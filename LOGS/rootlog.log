INFO ash4317 2020-07-11 14:40:58,804 - Requested to extract data.
DEBUG ash4317 2020-07-11 14:40:58,804 - Extracted links and ISINs from JSON object.
INFO ash4317 2020-07-11 14:42:40,878 - Made entry for extracted data in datafile successfully.
INFO werkzeug 2020-07-11 14:42:40,880 - 127.0.0.1 - - [11/Jul/2020 14:42:40] "[37mPOST /extract?no_of_docs=100&uname=ash4317&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ash4317 2020-07-11 14:42:40,891 - Requested to export extracted data.
INFO ash4317 2020-07-11 14:42:41,238 - Exported successfully
INFO werkzeug 2020-07-11 14:42:41,239 - 127.0.0.1 - - [11/Jul/2020 14:42:41] "[37mPOST /extract/export?filepath=extract.xlsx&uname=ash4317&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ash4317 2020-07-11 14:42:41,245 - Requested to pre-process data.
DEBUG ash4317 2020-07-11 14:43:34,321 - Pre-processed data
DEBUG ash4317 2020-07-11 14:43:34,325 - Made entry of pre-processed data in datafile successfully
INFO werkzeug 2020-07-11 14:43:34,326 - 127.0.0.1 - - [11/Jul/2020 14:43:34] "[37mPOST /preprocess?steps=url&steps=stemming&steps=lemmatization&steps=stopwords&steps=unusual&uname=ash4317&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ash4317 2020-07-11 14:43:34,334 - Requested to export pre-processed data.
DEBUG ash4317 2020-07-11 14:43:34,335 - Reading pre-processed datafile.
DEBUG ash4317 2020-07-11 14:43:34,337 - Exporting pre-processed data to excel file.
INFO ash4317 2020-07-11 14:43:34,383 - Exported pre-processed data successfully.
INFO werkzeug 2020-07-11 14:43:34,384 - 127.0.0.1 - - [11/Jul/2020 14:43:34] "[37mPOST /preprocess/export?filepath=prep.xlsx&uname=ash4317&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ash4317 2020-07-11 14:43:34,391 - Requested to cluster documents.
DEBUG ash4317 2020-07-11 14:43:34,392 - Reading datafile..
DEBUG ash4317 2020-07-11 14:43:34,393 - Calculating tf-idf
DEBUG ash4317 2020-07-11 14:43:34,553 - Calculating variance threshold
DEBUG ash4317 2020-07-11 14:43:34,607 - Applying PCA
DEBUG ash4317 2020-07-11 14:43:34,788 - Applying K-Means algorithm
DEBUG ash4317 2020-07-11 14:43:34,914 - Sorting clusters
DEBUG ash4317 2020-07-11 14:43:34,919 - Converting to JSON format
DEBUG ash4317 2020-07-11 14:43:34,974 - Exporting clustering results
DEBUG ash4317 2020-07-11 14:43:34,976 - Writting summary
DEBUG ash4317 2020-07-11 14:43:34,977 - Writting clustering information to datafile
DEBUG ash4317 2020-07-11 14:43:34,978 - Getting scatter plot for clustered data
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,118 - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,119 - findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,119 - findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,119 - findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,119 - findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,119 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,119 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,119 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,119 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,119 - findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,120 - findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,120 - findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,120 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,120 - findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,120 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,120 - findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,120 - findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,120 - findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,120 - findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,120 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,120 - findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,121 - findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,121 - findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,121 - findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,121 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,121 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,121 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,121 - findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,121 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,121 - findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,121 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,121 - findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,121 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,121 - findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,122 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,122 - findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,122 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,122 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,122 - findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,122 - findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,122 - findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,122 - findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,122 - findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,122 - findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,122 - findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,122 - findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,123 - findfont: score(<Font 'Times New Roman' (times.ttf) normal normal roman normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,123 - findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,123 - findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,123 - findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,123 - findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,123 - findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,123 - findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,123 - findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,123 - findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,123 - findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,123 - findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,123 - findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,123 - findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,124 - findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,124 - findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,124 - findfont: score(<Font 'Corbel' (corbell.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,124 - findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,124 - findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,124 - findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,124 - findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,124 - findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,124 - findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,124 - findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,124 - findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,124 - findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,124 - findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,125 - findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,125 - findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,125 - findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,125 - findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,125 - findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,125 - findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,125 - findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,125 - findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,125 - findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,125 - findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,125 - findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,125 - findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,125 - findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,126 - findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,126 - findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,126 - findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,126 - findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,126 - findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,126 - findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,126 - findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,126 - findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,126 - findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,126 - findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,126 - findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,126 - findfont: score(<Font 'Corbel' (corbell.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,127 - findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,127 - findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,127 - findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,127 - findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,127 - findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,127 - findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,127 - findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,127 - findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,127 - findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,127 - findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,127 - findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,127 - findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,127 - findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,128 - findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,128 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,128 - findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,128 - findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,128 - findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,128 - findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,128 - findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,128 - findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,128 - findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,128 - findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,128 - findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,128 - findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,129 - findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,129 - findfont: score(<Font 'Candara' (Candaral.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,129 - findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,129 - findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,129 - findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,129 - findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,129 - findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,129 - findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,129 - findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,129 - findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,129 - findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,129 - findfont: score(<Font 'Candara' (Candaral.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,129 - findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,130 - findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,130 - findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,130 - findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,130 - findfont: score(<Font 'Calibri' (calibril.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,130 - findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,130 - findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,130 - findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,130 - findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,130 - findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,130 - findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,130 - findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,130 - findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,130 - findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,131 - findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal roman normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,131 - findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,131 - findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,131 - findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,131 - findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,131 - findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,131 - findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,131 - findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,131 - findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,131 - findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,131 - findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,131 - findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,131 - findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,132 - findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,132 - findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,132 - findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,132 - findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,132 - findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,132 - findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,132 - findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,132 - findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,132 - findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,132 - findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,132 - findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal black normal>) = 11.525
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,132 - findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,133 - findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,133 - findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,133 - findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,133 - findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,133 - findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,133 - findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,133 - findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,133 - findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,133 - findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,133 - findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,133 - findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal semibold normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,133 - findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,133 - findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,134 - findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,134 - findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,134 - findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,134 - findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,134 - findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,134 - findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,134 - findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,134 - findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,134 - findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,134 - findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,134 - findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,134 - findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,134 - findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,135 - findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,135 - findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,135 - findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,135 - findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,135 - findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,135 - findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,135 - findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,135 - findfont: score(<Font 'Candara' (Candarali.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,135 - findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,135 - findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,135 - findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,135 - findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal medium normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,136 - findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,136 - findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,136 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,136 - findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,136 - findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,136 - findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,136 - findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,136 - findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,136 - findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,136 - findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,136 - findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal roman normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,136 - findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,136 - findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,137 - findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,137 - findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,137 - findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,137 - findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,137 - findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,137 - findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,137 - findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,137 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,137 - findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,137 - findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal semibold normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,137 - findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,137 - findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,137 - findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,138 - findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,138 - findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal medium normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,138 - findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,138 - findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,138 - findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal semibold normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,138 - findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,138 - findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,138 - findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,138 - findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,138 - findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal semibold normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,138 - findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,138 - findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal black normal>) = 11.525
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,138 - findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,139 - findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,139 - findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,139 - findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,139 - findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,139 - findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,139 - findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,139 - findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,139 - findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,139 - findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,139 - findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,139 - findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,140 - findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,140 - findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,140 - findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,140 - findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,140 - findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,140 - findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,140 - findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,140 - findfont: score(<Font 'Calibri' (calibril.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,140 - findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,140 - findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,141 - findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,141 - findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,141 - findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,141 - findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,141 - findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,141 - findfont: score(<Font 'Arial' (ariblk.ttf) normal normal black normal>) = 6.888636363636364
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,141 - findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,141 - findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,141 - findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,141 - findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,141 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,141 - findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,141 - findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,142 - findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,142 - findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,142 - findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,142 - findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,142 - findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,142 - findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,142 - findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,142 - findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,142 - findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,142 - findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,142 - findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,142 - findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,142 - findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,143 - findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,143 - findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,143 - findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,143 - findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,143 - findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,143 - findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,143 - findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,143 - findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,143 - findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,143 - findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,143 - findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,143 - findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,144 - findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,144 - findfont: score(<Font 'Times New Roman' (times.ttf) normal normal roman normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,144 - findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,144 - findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,144 - findfont: score(<Font 'Arial' (ariblk.ttf) normal normal black normal>) = 6.888636363636364
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,144 - findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,144 - findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,144 - findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,144 - findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,145 - findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,145 - findfont: score(<Font 'Candara' (Candarali.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,145 - findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,145 - findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,145 - findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,145 - findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,145 - findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,145 - findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,145 - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('c:\\python 3.8.2\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,224 - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,224 - findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,224 - findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,224 - findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,225 - findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,225 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,225 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,225 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,225 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,225 - findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,225 - findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,225 - findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,225 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,225 - findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,225 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,225 - findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,225 - findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,226 - findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,226 - findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,226 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,226 - findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,226 - findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,226 - findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,226 - findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,226 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,226 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,226 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,226 - findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,226 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,227 - findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,227 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,227 - findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,227 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,227 - findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,227 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,227 - findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,227 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,227 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,227 - findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,227 - findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,227 - findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,227 - findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,228 - findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,228 - findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,228 - findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,228 - findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,228 - findfont: score(<Font 'Times New Roman' (times.ttf) normal normal roman normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,228 - findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,228 - findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,228 - findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,228 - findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,228 - findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,228 - findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,228 - findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,228 - findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,229 - findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,229 - findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,229 - findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,229 - findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,229 - findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,229 - findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,229 - findfont: score(<Font 'Corbel' (corbell.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,229 - findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,229 - findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,229 - findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,229 - findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,229 - findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,230 - findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,230 - findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,230 - findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,230 - findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,230 - findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,230 - findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,230 - findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,230 - findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,230 - findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,230 - findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,230 - findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,230 - findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,230 - findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,231 - findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,231 - findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,231 - findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,231 - findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,231 - findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,231 - findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,231 - findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,231 - findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,231 - findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,231 - findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,231 - findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,231 - findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,231 - findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,232 - findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,232 - findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,232 - findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,232 - findfont: score(<Font 'Corbel' (corbell.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,232 - findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,232 - findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,232 - findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,232 - findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,232 - findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,232 - findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,232 - findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,232 - findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,232 - findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,233 - findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,233 - findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,233 - findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,233 - findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,233 - findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,233 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,233 - findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,233 - findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,233 - findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,233 - findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,233 - findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,233 - findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,234 - findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,234 - findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,234 - findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,234 - findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,234 - findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,234 - findfont: score(<Font 'Candara' (Candaral.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,234 - findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,234 - findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,234 - findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,234 - findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,234 - findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,234 - findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,234 - findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,235 - findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,235 - findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,235 - findfont: score(<Font 'Candara' (Candaral.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,235 - findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,235 - findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,235 - findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,235 - findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,235 - findfont: score(<Font 'Calibri' (calibril.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,235 - findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,235 - findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,235 - findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,235 - findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,235 - findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,236 - findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,236 - findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,236 - findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,236 - findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,236 - findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal roman normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,236 - findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,236 - findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,236 - findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,236 - findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,236 - findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,236 - findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,236 - findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,236 - findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,237 - findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,237 - findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,237 - findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,237 - findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,237 - findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,237 - findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,237 - findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,237 - findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,237 - findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,237 - findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,237 - findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,237 - findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,237 - findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,238 - findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,238 - findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal black normal>) = 11.525
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,238 - findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,238 - findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,238 - findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,238 - findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,238 - findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,238 - findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,238 - findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,238 - findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,238 - findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,238 - findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,238 - findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,239 - findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal semibold normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,239 - findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,239 - findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,239 - findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,239 - findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,239 - findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,239 - findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,239 - findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,239 - findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,239 - findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,239 - findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,239 - findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,240 - findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,240 - findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,240 - findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,240 - findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,240 - findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,240 - findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,240 - findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,240 - findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,241 - findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,241 - findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,241 - findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,241 - findfont: score(<Font 'Candara' (Candarali.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,241 - findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,241 - findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,241 - findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,241 - findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal medium normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,241 - findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,241 - findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,241 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,241 - findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,242 - findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,242 - findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,242 - findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,242 - findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,242 - findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,242 - findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,242 - findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal roman normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,242 - findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,242 - findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,242 - findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,242 - findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,242 - findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,242 - findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,243 - findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,243 - findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,243 - findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,243 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,243 - findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,243 - findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal semibold normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,243 - findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,243 - findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,243 - findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,243 - findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,243 - findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal medium normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,243 - findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,243 - findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,244 - findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal semibold normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,244 - findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,244 - findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,244 - findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,244 - findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,244 - findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal semibold normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,244 - findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,244 - findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal black normal>) = 11.525
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,244 - findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,244 - findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,244 - findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,244 - findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,244 - findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,245 - findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,245 - findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,245 - findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,245 - findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,245 - findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,245 - findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,245 - findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,245 - findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,245 - findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,245 - findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,245 - findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,245 - findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,245 - findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,246 - findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,246 - findfont: score(<Font 'Calibri' (calibril.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,246 - findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,246 - findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,246 - findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,246 - findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,246 - findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,246 - findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,246 - findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,246 - findfont: score(<Font 'Arial' (ariblk.ttf) normal normal black normal>) = 6.888636363636364
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,246 - findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,246 - findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,246 - findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,247 - findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,247 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,247 - findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,247 - findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,247 - findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,247 - findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,247 - findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,247 - findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,247 - findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,247 - findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,247 - findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,247 - findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,247 - findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,248 - findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,248 - findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,248 - findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,248 - findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,248 - findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,248 - findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,248 - findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,248 - findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,248 - findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,248 - findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,248 - findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,248 - findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,248 - findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,249 - findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,249 - findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,249 - findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,249 - findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,249 - findfont: score(<Font 'Times New Roman' (times.ttf) normal normal roman normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,249 - findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,249 - findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,249 - findfont: score(<Font 'Arial' (ariblk.ttf) normal normal black normal>) = 6.888636363636364
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,249 - findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,249 - findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,249 - findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,249 - findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,249 - findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,250 - findfont: score(<Font 'Candara' (Candarali.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,250 - findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,250 - findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,250 - findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,250 - findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,250 - findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,250 - findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 14:43:35,250 - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('c:\\python 3.8.2\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
INFO ash4317 2020-07-11 14:43:35,294 - Performed clustering successfully
INFO werkzeug 2020-07-11 14:43:35,296 - 127.0.0.1 - - [11/Jul/2020 14:43:35] "[37mPOST /clustering/kmeans?k=4&format=csv&uname=ash4317&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ash4317 2020-07-11 14:43:38,803 - Requested to get clustering details.
DEBUG ash4317 2020-07-11 14:43:38,803 - Reading datafile for clustered data
INFO ash4317 2020-07-11 14:43:38,803 - Get request for clustered data served successfully
INFO werkzeug 2020-07-11 14:43:38,805 - 127.0.0.1 - - [11/Jul/2020 14:43:38] "[37mGET /clustering/kmeans?uname=ash4317&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ash4317 2020-07-11 14:43:38,823 - Requested to get clustering summary.
DEBUG ash4317 2020-07-11 14:43:38,823 - Reading datafile for clustering summary
INFO ash4317 2020-07-11 14:43:38,823 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-11 14:43:38,824 - 127.0.0.1 - - [11/Jul/2020 14:43:38] "[37mGET /clustering/summary?uname=ash4317 HTTP/1.1[0m" 200 -
INFO ash4317 2020-07-11 14:43:38,833 - Requested to cluster documents.
DEBUG ash4317 2020-07-11 14:43:38,833 - Reading datafile..
DEBUG ash4317 2020-07-11 14:43:38,834 - Calculating tf-idf
DEBUG ash4317 2020-07-11 14:43:38,926 - Calculating variance threshold
DEBUG ash4317 2020-07-11 14:43:38,935 - Applying PCA
DEBUG ash4317 2020-07-11 14:43:38,985 - Applying DBSCAN algorithm
DEBUG ash4317 2020-07-11 14:43:38,994 - Sorting clusters
DEBUG ash4317 2020-07-11 14:43:38,995 - Converting to JSON format
DEBUG ash4317 2020-07-11 14:43:38,998 - Exporting clustering results
DEBUG ash4317 2020-07-11 14:43:38,999 - Writting summary
DEBUG ash4317 2020-07-11 14:43:39,000 - Writting clustering information to datafile
DEBUG ash4317 2020-07-11 14:43:39,002 - Getting scatter plot for clustered data
INFO ash4317 2020-07-11 14:43:39,070 - Performed clustering successfully
INFO werkzeug 2020-07-11 14:43:39,071 - 127.0.0.1 - - [11/Jul/2020 14:43:39] "[37mPOST /clustering/dbscan?eps=0.3&min=1&format=csv&uname=ash4317&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ash4317 2020-07-11 14:43:40,606 - Requested to get clustering details.
DEBUG ash4317 2020-07-11 14:43:40,606 - Reading datafile for clustered data
INFO ash4317 2020-07-11 14:43:40,606 - Get request for clustered data served successfully
INFO werkzeug 2020-07-11 14:43:40,608 - 127.0.0.1 - - [11/Jul/2020 14:43:40] "[37mGET /clustering/dbscan?uname=ash4317&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ash4317 2020-07-11 14:43:40,627 - Requested to get clustering summary.
DEBUG ash4317 2020-07-11 14:43:40,628 - Reading datafile for clustering summary
INFO ash4317 2020-07-11 14:43:40,629 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-11 14:43:40,632 - 127.0.0.1 - - [11/Jul/2020 14:43:40] "[37mGET /clustering/summary?uname=ash4317&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ash4317 2020-07-11 14:43:40,641 - Requested to cluster documents.
DEBUG ash4317 2020-07-11 14:43:40,641 - Reading datafile..
DEBUG ash4317 2020-07-11 14:43:40,642 - Calculating tf-idf
DEBUG ash4317 2020-07-11 14:43:40,705 - Calculating variance threshold
DEBUG ash4317 2020-07-11 14:43:40,716 - Applying PCA
DEBUG ash4317 2020-07-11 14:43:40,765 - Applying Agglomerative algorithm
DEBUG ash4317 2020-07-11 14:43:41,101 - Sorting clusters
DEBUG ash4317 2020-07-11 14:43:41,102 - Converting to JSON format
DEBUG ash4317 2020-07-11 14:43:41,105 - Exporting clustering results
DEBUG ash4317 2020-07-11 14:43:41,107 - Writting summary
DEBUG ash4317 2020-07-11 14:43:41,109 - Writting clustering information to datafile
DEBUG ash4317 2020-07-11 14:43:41,112 - Getting scatter plot for clustered data
INFO ash4317 2020-07-11 14:43:41,207 - Performed clustering successfully
INFO werkzeug 2020-07-11 14:43:41,208 - 127.0.0.1 - - [11/Jul/2020 14:43:41] "[37mPOST /clustering/agglomerative?k=5&format=csv&uname=ash4317&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ash4317 2020-07-11 14:43:42,927 - Requested to get clustering details.
DEBUG ash4317 2020-07-11 14:43:42,928 - Reading datafile for clustered data
INFO ash4317 2020-07-11 14:43:42,928 - Get request for clustered data served successfully
INFO werkzeug 2020-07-11 14:43:42,932 - 127.0.0.1 - - [11/Jul/2020 14:43:42] "[37mGET /clustering/agglomerative?uname=ash4317&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ash4317 2020-07-11 14:43:42,983 - Requested to get clustering summary.
DEBUG ash4317 2020-07-11 14:43:42,983 - Reading datafile for clustering summary
INFO ash4317 2020-07-11 14:43:42,984 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-11 14:43:42,985 - 127.0.0.1 - - [11/Jul/2020 14:43:42] "[37mGET /clustering/summary?uname=ash4317&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ash4317 2020-07-11 14:43:42,999 - Requested to cluster documents.
DEBUG ash4317 2020-07-11 14:43:43,000 - Reading datafile..
DEBUG ash4317 2020-07-11 14:43:43,003 - Calculating tf-idf
DEBUG ash4317 2020-07-11 14:43:43,139 - Calculating variance threshold
DEBUG ash4317 2020-07-11 14:43:43,157 - Applying PCA
DEBUG ash4317 2020-07-11 14:43:43,261 - Applying Birch algorithm
DEBUG ash4317 2020-07-11 14:43:43,297 - Sorting clusters
DEBUG ash4317 2020-07-11 14:43:43,299 - Converting to JSON format
DEBUG ash4317 2020-07-11 14:43:43,305 - Exporting clustering results
DEBUG ash4317 2020-07-11 14:43:43,308 - Writting summary
DEBUG ash4317 2020-07-11 14:43:43,311 - Writting clustering information to datafile
DEBUG ash4317 2020-07-11 14:43:43,313 - Getting scatter plot for clustered data
INFO ash4317 2020-07-11 14:43:43,465 - Performed clustering successfully
INFO werkzeug 2020-07-11 14:43:43,467 - 127.0.0.1 - - [11/Jul/2020 14:43:43] "[37mPOST /clustering/birch?k=5&format=csv&uname=ash4317&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ash4317 2020-07-11 14:43:45,079 - Requested to get clustering details.
DEBUG ash4317 2020-07-11 14:43:45,079 - Reading datafile for clustered data
INFO ash4317 2020-07-11 14:43:45,080 - Get request for clustered data served successfully
INFO werkzeug 2020-07-11 14:43:45,083 - 127.0.0.1 - - [11/Jul/2020 14:43:45] "[37mGET /clustering/birch?uname=ash4317&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ash4317 2020-07-11 14:43:45,134 - Requested to get clustering summary.
DEBUG ash4317 2020-07-11 14:43:45,135 - Reading datafile for clustering summary
INFO ash4317 2020-07-11 14:43:45,135 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-11 14:43:45,137 - 127.0.0.1 - - [11/Jul/2020 14:43:45] "[37mGET /clustering/summary?uname=ash4317&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ash4317 2020-07-11 14:44:33,708 - Requested to cluster documents.
DEBUG ash4317 2020-07-11 14:44:33,708 - Reading datafile..
DEBUG ash4317 2020-07-11 14:44:33,709 - Calculating tf-idf
DEBUG ash4317 2020-07-11 14:44:33,764 - Calculating variance threshold
DEBUG ash4317 2020-07-11 14:44:33,770 - Applying PCA
DEBUG ash4317 2020-07-11 14:44:33,813 - Applying K-Means algorithm
DEBUG ash4317 2020-07-11 14:44:33,837 - Sorting clusters
DEBUG ash4317 2020-07-11 14:44:33,837 - Converting to JSON format
DEBUG ash4317 2020-07-11 14:44:33,840 - Exporting clustering results
DEBUG ash4317 2020-07-11 14:44:33,841 - Writting summary
DEBUG ash4317 2020-07-11 14:44:33,842 - Writting clustering information to datafile
DEBUG ash4317 2020-07-11 14:44:33,843 - Getting scatter plot for clustered data
INFO ash4317 2020-07-11 14:44:33,925 - Performed clustering successfully
INFO werkzeug 2020-07-11 14:44:33,925 - 127.0.0.1 - - [11/Jul/2020 14:44:33] "[37mPOST /clustering/kmeans?k=4&format=csv&uname=ash4317&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ash4317 2020-07-11 14:44:38,100 - Requested to get clustering details.
DEBUG ash4317 2020-07-11 14:44:38,100 - Reading datafile for clustered data
INFO ash4317 2020-07-11 14:44:38,100 - Get request for clustered data served successfully
INFO werkzeug 2020-07-11 14:44:38,102 - 127.0.0.1 - - [11/Jul/2020 14:44:38] "[37mGET /clustering/kmeans?uname=ash4317&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ash4317 2020-07-11 14:44:38,120 - Requested to get clustering summary.
DEBUG ash4317 2020-07-11 14:44:38,120 - Reading datafile for clustering summary
INFO ash4317 2020-07-11 14:44:38,120 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-11 14:44:38,121 - 127.0.0.1 - - [11/Jul/2020 14:44:38] "[37mGET /clustering/summary?uname=ash4317 HTTP/1.1[0m" 200 -
INFO ash4317 2020-07-11 14:46:15,118 - Requested to cluster documents.
DEBUG ash4317 2020-07-11 14:46:15,118 - Reading datafile..
DEBUG ash4317 2020-07-11 14:46:15,120 - Calculating tf-idf
DEBUG ash4317 2020-07-11 14:46:15,267 - Calculating variance threshold
DEBUG ash4317 2020-07-11 14:46:15,285 - Applying PCA
DEBUG ash4317 2020-07-11 14:46:15,405 - Applying K-Means algorithm
DEBUG ash4317 2020-07-11 14:46:15,479 - Sorting clusters
DEBUG ash4317 2020-07-11 14:46:15,480 - Converting to JSON format
DEBUG ash4317 2020-07-11 14:46:15,486 - Exporting clustering results
DEBUG ash4317 2020-07-11 14:46:15,515 - Writting summary
DEBUG ash4317 2020-07-11 14:46:15,518 - Writting clustering information to datafile
DEBUG ash4317 2020-07-11 14:46:15,521 - Getting scatter plot for clustered data
INFO ash4317 2020-07-11 14:46:15,735 - Performed clustering successfully
INFO werkzeug 2020-07-11 14:46:15,737 - 127.0.0.1 - - [11/Jul/2020 14:46:15] "[37mPOST /clustering/kmeans?k=4&format=excel&uname=ash4317&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ash4317 2020-07-11 14:46:18,185 - Requested to get clustering details.
DEBUG ash4317 2020-07-11 14:46:18,186 - Reading datafile for clustered data
INFO ash4317 2020-07-11 14:46:18,186 - Get request for clustered data served successfully
INFO werkzeug 2020-07-11 14:46:18,187 - 127.0.0.1 - - [11/Jul/2020 14:46:18] "[37mGET /clustering/kmeans?uname=ash4317&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ash4317 2020-07-11 14:46:18,205 - Requested to get clustering summary.
DEBUG ash4317 2020-07-11 14:46:18,205 - Reading datafile for clustering summary
INFO ash4317 2020-07-11 14:46:18,205 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-11 14:46:18,207 - 127.0.0.1 - - [11/Jul/2020 14:46:18] "[37mGET /clustering/summary?uname=ash4317 HTTP/1.1[0m" 200 -
INFO werkzeug 2020-07-11 14:48:55,914 - 127.0.0.1 - - [11/Jul/2020 14:48:55] "[33mGET /cluster/summary HTTP/1.1[0m" 404 -
INFO werkzeug 2020-07-11 14:48:56,172 - 127.0.0.1 - - [11/Jul/2020 14:48:56] "[33mGET /favicon.ico HTTP/1.1[0m" 404 -
INFO werkzeug 2020-07-11 14:49:06,575 - 127.0.0.1 - - [11/Jul/2020 14:49:06] "[33mGET /cluster/summary?uname=ash4317 HTTP/1.1[0m" 404 -
INFO ash4317 2020-07-11 14:49:23,578 - Requested to get clustering summary.
DEBUG ash4317 2020-07-11 14:49:23,578 - Reading datafile for clustering summary
INFO ash4317 2020-07-11 14:49:23,579 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-11 14:49:23,580 - 127.0.0.1 - - [11/Jul/2020 14:49:23] "[37mGET /clustering/summary?uname=ash4317 HTTP/1.1[0m" 200 -
INFO ash4317 2020-07-11 14:49:35,711 - Requested to get clustering summary.
DEBUG ash4317 2020-07-11 14:49:35,711 - Reading datafile for clustering summary
INFO ash4317 2020-07-11 14:49:35,711 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-11 14:49:35,712 - 127.0.0.1 - - [11/Jul/2020 14:49:35] "[37mGET /clustering/summary?uname=ash4317&content_type=clust HTTP/1.1[0m" 200 -
INFO ash4317 2020-07-11 14:50:44,433 - Requested to cluster documents.
DEBUG ash4317 2020-07-11 14:50:44,433 - Reading datafile..
ERROR ash4317 2020-07-11 14:50:44,434 - Failed to read datafile
Traceback (most recent call last):
  File "C:\Users\ASHWIN\Desktop\FinIQ\Assignments_FinIQ\NLP_Citi\pre-processing-and-API\api.py", line 513, in post
    jsondata = ex.read_json(ex.get_recent_file('preprocess_' + args['uname'] + '_' + fname))
  File "C:\Users\ASHWIN\Desktop\FinIQ\Assignments_FinIQ\NLP_Citi\pre-processing-and-API\extract.py", line 293, in get_recent_file
    return names[0]
IndexError: list index out of range
INFO werkzeug 2020-07-11 14:50:44,438 - 127.0.0.1 - - [11/Jul/2020 14:50:44] "[31m[1mPOST /clustering/kmeans?k=4&format=excel&uname=ash4317&fname=ISINS_v3.xlsx HTTP/1.1[0m" 400 -
INFO ash4317 2020-07-11 14:50:55,788 - Requested to cluster documents.
DEBUG ash4317 2020-07-11 14:50:55,788 - Reading datafile..
ERROR ash4317 2020-07-11 14:50:55,788 - Failed to read datafile
Traceback (most recent call last):
  File "C:\Users\ASHWIN\Desktop\FinIQ\Assignments_FinIQ\NLP_Citi\pre-processing-and-API\api.py", line 513, in post
    jsondata = ex.read_json(ex.get_recent_file('preprocess_' + args['uname'] + '_' + fname))
  File "C:\Users\ASHWIN\Desktop\FinIQ\Assignments_FinIQ\NLP_Citi\pre-processing-and-API\extract.py", line 293, in get_recent_file
    return names[0]
IndexError: list index out of range
INFO werkzeug 2020-07-11 14:50:55,789 - 127.0.0.1 - - [11/Jul/2020 14:50:55] "[31m[1mPOST /clustering/kmeans?k=4&format=excel&uname=ash4317&fname=ISINS_v3.xlsx HTTP/1.1[0m" 400 -
INFO ash4317 2020-07-11 14:51:14,898 - Requested to extract data.
DEBUG ash4317 2020-07-11 14:51:14,899 - Extracted links and ISINs from JSON object.
INFO ash4317 2020-07-11 14:51:39,494 - Made entry for extracted data in datafile successfully.
INFO werkzeug 2020-07-11 14:51:39,495 - 127.0.0.1 - - [11/Jul/2020 14:51:39] "[37mPOST /extract?no_of_docs=30&uname=ash4317&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ash4317 2020-07-11 14:51:39,504 - Requested to export extracted data.
INFO ash4317 2020-07-11 14:51:39,635 - Exported successfully
INFO werkzeug 2020-07-11 14:51:39,636 - 127.0.0.1 - - [11/Jul/2020 14:51:39] "[37mPOST /extract/export?filepath=extract.xlsx&uname=ash4317&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ash4317 2020-07-11 14:51:39,644 - Requested to pre-process data.
DEBUG ash4317 2020-07-11 14:51:55,524 - Pre-processed data
DEBUG ash4317 2020-07-11 14:51:55,526 - Made entry of pre-processed data in datafile successfully
INFO werkzeug 2020-07-11 14:51:55,527 - 127.0.0.1 - - [11/Jul/2020 14:51:55] "[37mPOST /preprocess?steps=url&steps=stemming&steps=lemmatization&steps=stopwords&steps=unusual&uname=ash4317&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ash4317 2020-07-11 14:51:55,536 - Requested to export pre-processed data.
DEBUG ash4317 2020-07-11 14:51:55,536 - Reading pre-processed datafile.
DEBUG ash4317 2020-07-11 14:51:55,537 - Exporting pre-processed data to excel file.
INFO ash4317 2020-07-11 14:51:55,576 - Exported pre-processed data successfully.
INFO werkzeug 2020-07-11 14:51:55,576 - 127.0.0.1 - - [11/Jul/2020 14:51:55] "[37mPOST /preprocess/export?filepath=prep.xlsx&uname=ash4317&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ash4317 2020-07-11 14:51:55,583 - Requested to cluster documents.
DEBUG ash4317 2020-07-11 14:51:55,583 - Reading datafile..
DEBUG ash4317 2020-07-11 14:51:55,583 - Calculating tf-idf
DEBUG ash4317 2020-07-11 14:51:55,609 - Calculating variance threshold
DEBUG ash4317 2020-07-11 14:51:55,614 - Applying PCA
DEBUG ash4317 2020-07-11 14:51:55,643 - Applying K-Means algorithm
DEBUG ash4317 2020-07-11 14:51:55,668 - Sorting clusters
DEBUG ash4317 2020-07-11 14:51:55,669 - Converting to JSON format
DEBUG ash4317 2020-07-11 14:51:55,669 - Exporting clustering results
DEBUG ash4317 2020-07-11 14:51:55,672 - Writting summary
DEBUG ash4317 2020-07-11 14:51:55,673 - Writting clustering information to datafile
DEBUG ash4317 2020-07-11 14:51:55,674 - Getting scatter plot for clustered data
INFO ash4317 2020-07-11 14:51:55,757 - Performed clustering successfully
INFO werkzeug 2020-07-11 14:51:55,758 - 127.0.0.1 - - [11/Jul/2020 14:51:55] "[37mPOST /clustering/kmeans?k=4&format=excel&uname=ash4317&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ash4317 2020-07-11 14:51:57,405 - Requested to get clustering details.
DEBUG ash4317 2020-07-11 14:51:57,405 - Reading datafile for clustered data
INFO ash4317 2020-07-11 14:51:57,405 - Get request for clustered data served successfully
INFO werkzeug 2020-07-11 14:51:57,406 - 127.0.0.1 - - [11/Jul/2020 14:51:57] "[37mGET /clustering/kmeans?uname=ash4317&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ash4317 2020-07-11 14:51:57,419 - Requested to get clustering summary.
DEBUG ash4317 2020-07-11 14:51:57,419 - Reading datafile for clustering summary
INFO ash4317 2020-07-11 14:51:57,420 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-11 14:51:57,420 - 127.0.0.1 - - [11/Jul/2020 14:51:57] "[37mGET /clustering/summary?uname=ash4317 HTTP/1.1[0m" 200 -
INFO ash4317 2020-07-11 14:51:57,428 - Requested to cluster documents.
DEBUG ash4317 2020-07-11 14:51:57,428 - Reading datafile..
DEBUG ash4317 2020-07-11 14:51:57,429 - Calculating tf-idf
DEBUG ash4317 2020-07-11 14:51:57,455 - Calculating variance threshold
DEBUG ash4317 2020-07-11 14:51:57,460 - Applying PCA
DEBUG ash4317 2020-07-11 14:51:57,475 - Applying DBSCAN algorithm
DEBUG ash4317 2020-07-11 14:51:57,481 - Sorting clusters
DEBUG ash4317 2020-07-11 14:51:57,482 - Converting to JSON format
DEBUG ash4317 2020-07-11 14:51:57,482 - Exporting clustering results
DEBUG ash4317 2020-07-11 14:51:57,484 - Writting summary
DEBUG ash4317 2020-07-11 14:51:57,484 - Writting clustering information to datafile
DEBUG ash4317 2020-07-11 14:51:57,485 - Getting scatter plot for clustered data
INFO ash4317 2020-07-11 14:51:57,547 - Performed clustering successfully
INFO werkzeug 2020-07-11 14:51:57,548 - 127.0.0.1 - - [11/Jul/2020 14:51:57] "[37mPOST /clustering/dbscan?eps=0.3&min=1&format=csv&uname=ash4317&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ash4317 2020-07-11 14:51:58,869 - Requested to get clustering details.
DEBUG ash4317 2020-07-11 14:51:58,869 - Reading datafile for clustered data
INFO ash4317 2020-07-11 14:51:58,870 - Get request for clustered data served successfully
INFO werkzeug 2020-07-11 14:51:58,872 - 127.0.0.1 - - [11/Jul/2020 14:51:58] "[37mGET /clustering/dbscan?uname=ash4317&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ash4317 2020-07-11 14:51:58,896 - Requested to get clustering summary.
DEBUG ash4317 2020-07-11 14:51:58,896 - Reading datafile for clustering summary
INFO ash4317 2020-07-11 14:51:58,897 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-11 14:51:58,898 - 127.0.0.1 - - [11/Jul/2020 14:51:58] "[37mGET /clustering/summary?uname=ash4317&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ash4317 2020-07-11 14:51:58,914 - Requested to cluster documents.
DEBUG ash4317 2020-07-11 14:51:58,914 - Reading datafile..
DEBUG ash4317 2020-07-11 14:51:58,915 - Calculating tf-idf
DEBUG ash4317 2020-07-11 14:51:58,971 - Calculating variance threshold
DEBUG ash4317 2020-07-11 14:51:58,982 - Applying PCA
DEBUG ash4317 2020-07-11 14:51:59,010 - Applying Agglomerative algorithm
DEBUG ash4317 2020-07-11 14:51:59,020 - Sorting clusters
DEBUG ash4317 2020-07-11 14:51:59,021 - Converting to JSON format
DEBUG ash4317 2020-07-11 14:51:59,023 - Exporting clustering results
DEBUG ash4317 2020-07-11 14:51:59,026 - Writting summary
DEBUG ash4317 2020-07-11 14:51:59,027 - Writting clustering information to datafile
DEBUG ash4317 2020-07-11 14:51:59,029 - Getting scatter plot for clustered data
INFO ash4317 2020-07-11 14:51:59,183 - Performed clustering successfully
INFO werkzeug 2020-07-11 14:51:59,184 - 127.0.0.1 - - [11/Jul/2020 14:51:59] "[37mPOST /clustering/agglomerative?k=5&format=csv&uname=ash4317&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ash4317 2020-07-11 14:52:00,788 - Requested to get clustering details.
DEBUG ash4317 2020-07-11 14:52:00,789 - Reading datafile for clustered data
INFO ash4317 2020-07-11 14:52:00,790 - Get request for clustered data served successfully
INFO werkzeug 2020-07-11 14:52:00,792 - 127.0.0.1 - - [11/Jul/2020 14:52:00] "[37mGET /clustering/agglomerative?uname=ash4317&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ash4317 2020-07-11 14:52:00,819 - Requested to get clustering summary.
DEBUG ash4317 2020-07-11 14:52:00,819 - Reading datafile for clustering summary
INFO ash4317 2020-07-11 14:52:00,820 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-11 14:52:00,821 - 127.0.0.1 - - [11/Jul/2020 14:52:00] "[37mGET /clustering/summary?uname=ash4317&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ash4317 2020-07-11 14:52:00,841 - Requested to cluster documents.
DEBUG ash4317 2020-07-11 14:52:00,841 - Reading datafile..
DEBUG ash4317 2020-07-11 14:52:00,843 - Calculating tf-idf
DEBUG ash4317 2020-07-11 14:52:00,906 - Calculating variance threshold
DEBUG ash4317 2020-07-11 14:52:00,913 - Applying PCA
DEBUG ash4317 2020-07-11 14:52:00,931 - Applying Birch algorithm
DEBUG ash4317 2020-07-11 14:52:00,939 - Sorting clusters
DEBUG ash4317 2020-07-11 14:52:00,940 - Converting to JSON format
DEBUG ash4317 2020-07-11 14:52:00,941 - Exporting clustering results
DEBUG ash4317 2020-07-11 14:52:00,943 - Writting summary
DEBUG ash4317 2020-07-11 14:52:00,944 - Writting clustering information to datafile
DEBUG ash4317 2020-07-11 14:52:00,945 - Getting scatter plot for clustered data
INFO ash4317 2020-07-11 14:52:01,018 - Performed clustering successfully
INFO werkzeug 2020-07-11 14:52:01,019 - 127.0.0.1 - - [11/Jul/2020 14:52:01] "[37mPOST /clustering/birch?k=5&format=csv&uname=ash4317&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ash4317 2020-07-11 14:52:02,314 - Requested to get clustering details.
DEBUG ash4317 2020-07-11 14:52:02,315 - Reading datafile for clustered data
INFO ash4317 2020-07-11 14:52:02,315 - Get request for clustered data served successfully
INFO werkzeug 2020-07-11 14:52:02,316 - 127.0.0.1 - - [11/Jul/2020 14:52:02] "[37mGET /clustering/birch?uname=ash4317&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ash4317 2020-07-11 14:52:02,328 - Requested to get clustering summary.
DEBUG ash4317 2020-07-11 14:52:02,328 - Reading datafile for clustering summary
INFO ash4317 2020-07-11 14:52:02,329 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-11 14:52:02,329 - 127.0.0.1 - - [11/Jul/2020 14:52:02] "[37mGET /clustering/summary?uname=ash4317&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ash4317 2020-07-11 14:54:33,981 - Requested to get clustering summary.
DEBUG ash4317 2020-07-11 14:54:33,981 - Reading datafile for clustering summary
INFO ash4317 2020-07-11 14:54:33,981 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-11 14:54:33,982 - 127.0.0.1 - - [11/Jul/2020 14:54:33] "[37mGET /clustering/summary?uname=ash4317&content_type=clust HTTP/1.1[0m" 200 -
INFO ash4317 2020-07-11 14:54:44,762 - Requested to get clustering summary.
DEBUG ash4317 2020-07-11 14:54:44,762 - Reading datafile for clustering summary
INFO ash4317 2020-07-11 14:54:44,762 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-11 14:54:44,763 - 127.0.0.1 - - [11/Jul/2020 14:54:44] "[37mGET /clustering/summary?uname=ash4317&content_type=summary HTTP/1.1[0m" 200 -
INFO werkzeug 2020-07-11 14:54:51,075 - 127.0.0.1 - - [11/Jul/2020 14:54:51] "[31m[1mGET /clustering/kmeans HTTP/1.1[0m" 400 -
INFO ash4317 2020-07-11 14:54:59,342 - Requested to get clustering details.
DEBUG ash4317 2020-07-11 14:54:59,342 - Reading datafile for clustered data
INFO ash4317 2020-07-11 14:54:59,342 - Get request for clustered data served successfully
INFO werkzeug 2020-07-11 14:54:59,344 - 127.0.0.1 - - [11/Jul/2020 14:54:59] "[37mGET /clustering/kmeans?uname=ash4317 HTTP/1.1[0m" 200 -
INFO werkzeug 2020-07-11 14:56:01,817 - 127.0.0.1 - - [11/Jul/2020 14:56:01] "[33mGET /clustering/summ HTTP/1.1[0m" 404 -
INFO werkzeug 2020-07-11 14:56:08,657 - 127.0.0.1 - - [11/Jul/2020 14:56:08] "[31m[1mGET /clustering/summary HTTP/1.1[0m" 400 -
INFO werkzeug 2020-07-11 14:56:13,838 - 127.0.0.1 - - [11/Jul/2020 14:56:13] "[31m[1mGET /extract HTTP/1.1[0m" 400 -
INFO werkzeug 2020-07-11 15:22:50,217 -  * Restarting with stat
WARNING werkzeug 2020-07-11 15:22:55,224 -  * Debugger is active!
INFO werkzeug 2020-07-11 15:22:55,240 -  * Debugger PIN: 282-022-648
INFO werkzeug 2020-07-11 15:22:55,247 -  * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
