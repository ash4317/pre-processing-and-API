INFO admin 2020-07-11 18:59:42,416 - Requested to extract data.
DEBUG admin 2020-07-11 18:59:42,417 - Extracted links and ISINs from JSON object.
INFO admin 2020-07-11 19:00:13,122 - Made entry for extracted data in datafile successfully.
INFO werkzeug 2020-07-11 19:00:13,124 - 127.0.0.1 - - [11/Jul/2020 19:00:13] "[37mPOST /extract?no_of_docs=30&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-11 19:00:13,130 - Requested to export extracted data.
DEBUG admin 2020-07-11 19:00:13,140 - Checking if filepath already exists
DEBUG admin 2020-07-11 19:00:13,140 - Checking if filepath has valid format
DEBUG admin 2020-07-11 19:00:13,141 - Exporting data to excel file
INFO admin 2020-07-11 19:00:13,245 - Exported successfully
INFO werkzeug 2020-07-11 19:00:13,246 - 127.0.0.1 - - [11/Jul/2020 19:00:13] "[37mPOST /extract/export?filepath=extract.xlsx&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-11 19:00:13,256 - Requested to pre-process data.
DEBUG admin 2020-07-11 19:00:13,256 - Reading data from datafile
DEBUG admin 2020-07-11 19:00:13,266 - Pre-processing text data
DEBUG admin 2020-07-11 19:00:30,815 - Pre-processed data
DEBUG admin 2020-07-11 19:00:30,815 - Writting pre-processed data to datafile
DEBUG admin 2020-07-11 19:00:30,817 - Made entry of pre-processed data in datafile successfully
INFO werkzeug 2020-07-11 19:00:30,817 - 127.0.0.1 - - [11/Jul/2020 19:00:30] "[37mPOST /preprocess?steps=url&steps=stemming&steps=lemmatization&steps=stopwords&steps=unusual&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-11 19:00:30,827 - Requested to export pre-processed data.
DEBUG admin 2020-07-11 19:00:30,827 - Reading pre-processed datafile.
DEBUG admin 2020-07-11 19:00:30,828 - Checking if filepath already exists
DEBUG admin 2020-07-11 19:00:30,828 - Exporting pre-processed data to excel file.
INFO admin 2020-07-11 19:00:30,962 - Exported pre-processed data successfully.
INFO werkzeug 2020-07-11 19:00:30,962 - 127.0.0.1 - - [11/Jul/2020 19:00:30] "[37mPOST /preprocess/export?filepath=prep.xlsx&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-11 19:00:30,969 - Requested to plot elbow curve.
DEBUG admin 2020-07-11 19:00:30,969 - Reading datafile..
DEBUG admin 2020-07-11 19:00:30,970 - Setting default value of threshold for Variance Threshold to 0.0001
DEBUG admin 2020-07-11 19:00:30,970 - Setting default value of number of components for PCA to 0.8
DEBUG admin 2020-07-11 19:00:30,970 - Calculating tf-idf
DEBUG admin 2020-07-11 19:00:30,999 - Calculating variance threshold
DEBUG admin 2020-07-11 19:00:31,005 - Applying PCA
DEBUG admin 2020-07-11 19:00:31,141 - Plotting elbow curve
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,122 - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,123 - findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,123 - findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,123 - findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,123 - findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,123 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,123 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,123 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,123 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,124 - findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,124 - findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,124 - findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,124 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,124 - findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,124 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,124 - findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,124 - findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,124 - findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,124 - findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,124 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,124 - findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,125 - findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,125 - findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,125 - findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,125 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,125 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,125 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,125 - findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,125 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,125 - findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,125 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,125 - findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,125 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,125 - findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,126 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,126 - findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,126 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,126 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,126 - findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,126 - findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,126 - findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,126 - findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,126 - findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,126 - findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,126 - findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,126 - findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,127 - findfont: score(<Font 'Times New Roman' (times.ttf) normal normal roman normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,127 - findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,127 - findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,127 - findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,127 - findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,127 - findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,127 - findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,127 - findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,127 - findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,127 - findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,127 - findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,127 - findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,127 - findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,128 - findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,128 - findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,128 - findfont: score(<Font 'Corbel' (corbell.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,128 - findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,128 - findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,128 - findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,128 - findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,128 - findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,128 - findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,128 - findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,128 - findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,128 - findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,129 - findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,129 - findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,129 - findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,129 - findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,129 - findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,129 - findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,129 - findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,129 - findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,129 - findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,129 - findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,129 - findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,129 - findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,129 - findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,130 - findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,130 - findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,130 - findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,130 - findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,130 - findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,130 - findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,130 - findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,130 - findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,130 - findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,130 - findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,130 - findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,131 - findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,131 - findfont: score(<Font 'Corbel' (corbell.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,131 - findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,131 - findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,131 - findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,131 - findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,131 - findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,131 - findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,132 - findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,132 - findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,132 - findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,132 - findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,132 - findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,132 - findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,132 - findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,132 - findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,133 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,133 - findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,133 - findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,133 - findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,133 - findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,133 - findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,133 - findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,133 - findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,133 - findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,133 - findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,133 - findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,134 - findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,134 - findfont: score(<Font 'Candara' (Candaral.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,134 - findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,134 - findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,134 - findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,134 - findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,134 - findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,134 - findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,134 - findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,134 - findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,134 - findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,134 - findfont: score(<Font 'Candara' (Candaral.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,134 - findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,135 - findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,135 - findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,135 - findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,135 - findfont: score(<Font 'Calibri' (calibril.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,135 - findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,135 - findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,135 - findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,135 - findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,135 - findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,135 - findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,135 - findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,135 - findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,136 - findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,136 - findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal roman normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,136 - findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,136 - findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,136 - findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,136 - findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,136 - findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,136 - findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,136 - findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,136 - findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,136 - findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,136 - findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,136 - findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,137 - findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,137 - findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,137 - findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,137 - findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,137 - findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,137 - findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,137 - findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,137 - findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,137 - findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,137 - findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,137 - findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,137 - findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal black normal>) = 11.525
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,137 - findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,138 - findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,138 - findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,138 - findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,138 - findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,138 - findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,138 - findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,138 - findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,138 - findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,138 - findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,138 - findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,138 - findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal semibold normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,138 - findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,139 - findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,139 - findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,139 - findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,139 - findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,139 - findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,139 - findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,139 - findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,139 - findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,139 - findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,139 - findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,139 - findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,139 - findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,139 - findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,140 - findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,140 - findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,140 - findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,140 - findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,140 - findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,140 - findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,140 - findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,140 - findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,140 - findfont: score(<Font 'Candara' (Candarali.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,140 - findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,140 - findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,140 - findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,140 - findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal medium normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,141 - findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,141 - findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,141 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,141 - findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,141 - findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,141 - findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,141 - findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,141 - findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,141 - findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,141 - findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,141 - findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal roman normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,141 - findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,141 - findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,142 - findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,142 - findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,142 - findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,142 - findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,142 - findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,142 - findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,142 - findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,142 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,142 - findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,142 - findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal semibold normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,143 - findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,143 - findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,143 - findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,143 - findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,143 - findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal medium normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,143 - findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,143 - findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,143 - findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal semibold normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,143 - findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,143 - findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,143 - findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,143 - findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,144 - findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal semibold normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,144 - findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,144 - findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal black normal>) = 11.525
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,144 - findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,144 - findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,144 - findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,144 - findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,144 - findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,144 - findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,144 - findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,144 - findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,144 - findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,144 - findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,145 - findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,145 - findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,145 - findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,145 - findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,145 - findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,145 - findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,145 - findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,145 - findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,145 - findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,145 - findfont: score(<Font 'Calibri' (calibril.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,145 - findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,145 - findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,145 - findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,146 - findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,146 - findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,146 - findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,146 - findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,146 - findfont: score(<Font 'Arial' (ariblk.ttf) normal normal black normal>) = 6.888636363636364
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,146 - findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,146 - findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,146 - findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,146 - findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,146 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,146 - findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,146 - findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,146 - findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,147 - findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,147 - findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,147 - findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,147 - findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,147 - findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,147 - findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,147 - findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,147 - findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,147 - findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,147 - findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,147 - findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,147 - findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,147 - findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,148 - findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,148 - findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,148 - findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,148 - findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,148 - findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,148 - findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,148 - findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,148 - findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,148 - findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,148 - findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,148 - findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,148 - findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,148 - findfont: score(<Font 'Times New Roman' (times.ttf) normal normal roman normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,149 - findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,149 - findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,149 - findfont: score(<Font 'Arial' (ariblk.ttf) normal normal black normal>) = 6.888636363636364
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,149 - findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,149 - findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,149 - findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,149 - findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,149 - findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,149 - findfont: score(<Font 'Candara' (Candarali.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,149 - findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,149 - findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,149 - findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,149 - findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,150 - findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,150 - findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,150 - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('c:\\python 3.8.2\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,202 - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,202 - findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,202 - findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,202 - findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,202 - findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,202 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,202 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,202 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,203 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,203 - findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,203 - findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,203 - findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,203 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,203 - findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,203 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,203 - findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,203 - findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,203 - findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,203 - findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,203 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,204 - findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,204 - findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,204 - findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,204 - findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,204 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,204 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,204 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,204 - findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,204 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,204 - findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,204 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,204 - findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,205 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,205 - findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,205 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,205 - findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,205 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,205 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,205 - findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,205 - findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,205 - findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,205 - findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,205 - findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,205 - findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,206 - findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,206 - findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,206 - findfont: score(<Font 'Times New Roman' (times.ttf) normal normal roman normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,206 - findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,206 - findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,206 - findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,206 - findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,206 - findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,206 - findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,206 - findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,206 - findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,206 - findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,207 - findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,207 - findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,207 - findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,207 - findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,207 - findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,207 - findfont: score(<Font 'Corbel' (corbell.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,207 - findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,207 - findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,207 - findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,207 - findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,207 - findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,207 - findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,208 - findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,208 - findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,208 - findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,208 - findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,208 - findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,208 - findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,208 - findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,208 - findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,208 - findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,208 - findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,208 - findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,208 - findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,208 - findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,209 - findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,209 - findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,209 - findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,209 - findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,209 - findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,209 - findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,209 - findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,209 - findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,209 - findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,209 - findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,209 - findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,209 - findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,210 - findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,210 - findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,210 - findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,210 - findfont: score(<Font 'Corbel' (corbell.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,210 - findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,210 - findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,210 - findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,210 - findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,210 - findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,210 - findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,210 - findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,210 - findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,210 - findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,211 - findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,211 - findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,211 - findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,211 - findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,211 - findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,211 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,211 - findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,211 - findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,211 - findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,211 - findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,211 - findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,211 - findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,212 - findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,212 - findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,212 - findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,212 - findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,212 - findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,212 - findfont: score(<Font 'Candara' (Candaral.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,212 - findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,212 - findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,212 - findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,212 - findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,212 - findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,212 - findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,213 - findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,213 - findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,213 - findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,213 - findfont: score(<Font 'Candara' (Candaral.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,213 - findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,213 - findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,213 - findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,213 - findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,213 - findfont: score(<Font 'Calibri' (calibril.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,213 - findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,213 - findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,213 - findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,214 - findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,214 - findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,214 - findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,214 - findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,214 - findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,214 - findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,214 - findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal roman normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,214 - findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,214 - findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,214 - findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,214 - findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,214 - findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,214 - findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,215 - findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,215 - findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,215 - findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,215 - findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,215 - findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,215 - findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,215 - findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,215 - findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,215 - findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,215 - findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,215 - findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,215 - findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,216 - findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,216 - findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,216 - findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,216 - findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,216 - findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal black normal>) = 11.525
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,216 - findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,216 - findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,216 - findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,216 - findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,216 - findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,216 - findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,217 - findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,217 - findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,217 - findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,217 - findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,217 - findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,217 - findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal semibold normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,217 - findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,217 - findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,217 - findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,217 - findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,217 - findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,217 - findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,217 - findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,218 - findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,218 - findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,218 - findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,218 - findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,218 - findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,218 - findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,218 - findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,218 - findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,218 - findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,218 - findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,218 - findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,219 - findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,219 - findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,219 - findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,219 - findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,219 - findfont: score(<Font 'Candara' (Candarali.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,219 - findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,219 - findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,219 - findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,219 - findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal medium normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,219 - findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,219 - findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,219 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,219 - findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,220 - findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,220 - findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,220 - findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,220 - findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,220 - findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,220 - findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,220 - findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal roman normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,220 - findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,220 - findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,220 - findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,220 - findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,220 - findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,221 - findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,221 - findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,221 - findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,221 - findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,221 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,221 - findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,221 - findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal semibold normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,221 - findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,221 - findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,221 - findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,221 - findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,221 - findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal medium normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,221 - findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,222 - findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,222 - findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal semibold normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,222 - findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,222 - findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,222 - findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,222 - findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,222 - findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal semibold normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,222 - findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,222 - findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal black normal>) = 11.525
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,222 - findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,222 - findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,222 - findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,223 - findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,223 - findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,223 - findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,223 - findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,223 - findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,223 - findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,223 - findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,223 - findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,223 - findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,223 - findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,223 - findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,223 - findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,223 - findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,224 - findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,224 - findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,224 - findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,224 - findfont: score(<Font 'Calibri' (calibril.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,224 - findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,224 - findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,224 - findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,224 - findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,224 - findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,224 - findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,224 - findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,224 - findfont: score(<Font 'Arial' (ariblk.ttf) normal normal black normal>) = 6.888636363636364
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,225 - findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,225 - findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,225 - findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,225 - findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,225 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,225 - findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,225 - findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,225 - findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,225 - findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,225 - findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,225 - findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,225 - findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,226 - findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,226 - findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,226 - findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,226 - findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,226 - findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,226 - findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,226 - findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,226 - findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,226 - findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,226 - findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,226 - findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,226 - findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,226 - findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,227 - findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,227 - findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,227 - findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,227 - findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,227 - findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,227 - findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,227 - findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,227 - findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,227 - findfont: score(<Font 'Times New Roman' (times.ttf) normal normal roman normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,227 - findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,227 - findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,227 - findfont: score(<Font 'Arial' (ariblk.ttf) normal normal black normal>) = 6.888636363636364
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,228 - findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,228 - findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,228 - findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,228 - findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,228 - findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,228 - findfont: score(<Font 'Candara' (Candarali.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,228 - findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,228 - findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,228 - findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,228 - findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,228 - findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,228 - findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-11 19:00:33,228 - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('c:\\python 3.8.2\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
DEBUG admin 2020-07-11 19:00:33,296 - Packing returned image as a stream of bytes to the Response object
INFO admin 2020-07-11 19:00:33,296 - Plotted elbow curve successfully
DEBUG admin 2020-07-11 19:00:33,296 - Writing optimal k value
INFO admin 2020-07-11 19:00:33,297 - Obtained optimal value of K using Elbow curve successfully
INFO werkzeug 2020-07-11 19:00:33,298 - 127.0.0.1 - - [11/Jul/2020 19:00:33] "[37mPOST /clustering/elbow?uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-11 19:00:36,792 - Requested to get optimal k value
DEBUG admin 2020-07-11 19:00:36,792 - Reading datafile for optimal k value after elbow method
INFO admin 2020-07-11 19:00:36,793 - Get request for optimal k value served successfully
INFO werkzeug 2020-07-11 19:00:36,793 - 127.0.0.1 - - [11/Jul/2020 19:00:36] "[37mGET /clustering/elbow?uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-11 19:00:36,802 - Requested for optimal value of K using Silhouette.
DEBUG admin 2020-07-11 19:00:36,802 - Reading datafile..
DEBUG admin 2020-07-11 19:00:36,802 - Setting default value of threshold for Variance Threshold to 0.0001
DEBUG admin 2020-07-11 19:00:36,803 - Setting default value of number of components for PCA to 0.8
DEBUG admin 2020-07-11 19:00:36,803 - Calculating tf-idf
DEBUG admin 2020-07-11 19:00:36,830 - Calculating variance threshold
DEBUG admin 2020-07-11 19:00:36,835 - Applying PCA
DEBUG admin 2020-07-11 19:00:36,851 - Applying silhouette coefficient
DEBUG admin 2020-07-11 19:00:36,851 - Plotting silhouette score
DEBUG admin 2020-07-11 19:00:37,635 - Packing returned image as a stream of bytes to the Response object
INFO admin 2020-07-11 19:00:37,635 - Plotted silhouette score successfully
DEBUG admin 2020-07-11 19:00:37,635 - Writting optimal k
INFO admin 2020-07-11 19:00:37,636 - Obtained optimal value of k using Silhouette score successfully
INFO werkzeug 2020-07-11 19:00:37,637 - 127.0.0.1 - - [11/Jul/2020 19:00:37] "[37mPOST /clustering/silhouette?uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-11 19:00:39,340 - Requested to get optimal k value
DEBUG admin 2020-07-11 19:00:39,340 - Reading datafile for optimal k value after silhouette
INFO admin 2020-07-11 19:00:39,341 - Get request for optimal k value served successfully
INFO werkzeug 2020-07-11 19:00:39,341 - 127.0.0.1 - - [11/Jul/2020 19:00:39] "[37mGET /clustering/silhouette?uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-11 19:00:39,351 - Requested to cluster documents.
DEBUG admin 2020-07-11 19:00:39,351 - Reading datafile..
DEBUG admin 2020-07-11 19:00:39,352 - Setting default value of threshold for Variance Threshold to 0.0001
DEBUG admin 2020-07-11 19:00:39,352 - Setting default value of number of components for PCA to 0.8
DEBUG admin 2020-07-11 19:00:39,352 - Calculating tf-idf
DEBUG admin 2020-07-11 19:00:39,382 - Calculating variance threshold
DEBUG admin 2020-07-11 19:00:39,388 - Applying PCA
DEBUG admin 2020-07-11 19:00:39,402 - Applying K-Means algorithm
DEBUG admin 2020-07-11 19:00:39,429 - Sorting clusters
DEBUG admin 2020-07-11 19:00:39,430 - Converting to JSON format
DEBUG admin 2020-07-11 19:00:39,431 - Writting summary
DEBUG admin 2020-07-11 19:00:39,432 - Writting clustering information to datafile
DEBUG admin 2020-07-11 19:00:39,433 - Getting scatter plot for clustered data
DEBUG admin 2020-07-11 19:00:39,715 - Packing returned image as a stream of bytes in Response object
INFO admin 2020-07-11 19:00:39,716 - Performed clustering successfully
INFO werkzeug 2020-07-11 19:00:39,717 - 127.0.0.1 - - [11/Jul/2020 19:00:39] "[37mPOST /clustering/kmeans?k=4&format=csv&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-11 19:00:41,605 - Requested to get clustering details.
DEBUG admin 2020-07-11 19:00:41,606 - Reading datafile for clustered data
INFO admin 2020-07-11 19:00:41,607 - Get request for clustered data served successfully
INFO werkzeug 2020-07-11 19:00:41,609 - 127.0.0.1 - - [11/Jul/2020 19:00:41] "[37mGET /clustering/kmeans?uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-11 19:00:41,641 - Requested to get clustering summary.
DEBUG admin 2020-07-11 19:00:41,641 - Reading datafile for clustering summary
INFO admin 2020-07-11 19:00:41,642 - Get request for clustering summary served successfully
DEBUG admin 2020-07-11 19:00:41,642 - Returning summary
INFO werkzeug 2020-07-11 19:00:41,644 - 127.0.0.1 - - [11/Jul/2020 19:00:41] "[37mGET /clustering/summary?uname=admin HTTP/1.1[0m" 200 -
INFO admin 2020-07-11 19:00:41,662 - Requested to cluster documents.
DEBUG admin 2020-07-11 19:00:41,663 - Reading datafile..
DEBUG admin 2020-07-11 19:00:41,665 - Setting default value of threshold for Variance Threshold to 0.0001
DEBUG admin 2020-07-11 19:00:41,665 - Setting default value of number of components for PCA to 0.8
DEBUG admin 2020-07-11 19:00:41,665 - Calculating tf-idf
DEBUG admin 2020-07-11 19:00:41,756 - Calculating variance threshold
DEBUG admin 2020-07-11 19:00:41,766 - Applying PCA
DEBUG admin 2020-07-11 19:00:41,786 - Applying DBSCAN algorithm
DEBUG admin 2020-07-11 19:00:41,855 - Sorting clusters
DEBUG admin 2020-07-11 19:00:41,856 - Converting to JSON format
DEBUG admin 2020-07-11 19:00:41,857 - Writting summary
DEBUG admin 2020-07-11 19:00:41,858 - Writting clustering information to datafile
DEBUG admin 2020-07-11 19:00:41,859 - Getting scatter plot for clustered data
DEBUG admin 2020-07-11 19:00:41,925 - Packing returned image as a stream of bytes to the Response object
INFO admin 2020-07-11 19:00:41,925 - Performed clustering successfully
INFO werkzeug 2020-07-11 19:00:41,925 - 127.0.0.1 - - [11/Jul/2020 19:00:41] "[37mPOST /clustering/dbscan?eps=0.3&min=1&format=csv&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-11 19:00:43,261 - Requested to get clustering details.
DEBUG admin 2020-07-11 19:00:43,261 - Reading datafile for clustered data
INFO admin 2020-07-11 19:00:43,262 - Get request for clustered data served successfully
INFO werkzeug 2020-07-11 19:00:43,263 - 127.0.0.1 - - [11/Jul/2020 19:00:43] "[37mGET /clustering/dbscan?uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-11 19:00:43,277 - Requested to get clustering summary.
DEBUG admin 2020-07-11 19:00:43,277 - Reading datafile for clustering summary
INFO admin 2020-07-11 19:00:43,278 - Get request for clustering summary served successfully
DEBUG admin 2020-07-11 19:00:43,278 - Returning summary
INFO werkzeug 2020-07-11 19:00:43,279 - 127.0.0.1 - - [11/Jul/2020 19:00:43] "[37mGET /clustering/summary?uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-11 19:00:43,287 - Requested to cluster documents.
DEBUG admin 2020-07-11 19:00:43,287 - Reading datafile..
DEBUG admin 2020-07-11 19:00:43,288 - Setting default value of threshold for Variance Threshold to 0.0001
DEBUG admin 2020-07-11 19:00:43,288 - Setting default value of number of components for PCA to 0.8
DEBUG admin 2020-07-11 19:00:43,288 - Calculating tf-idf
DEBUG admin 2020-07-11 19:00:43,319 - Calculating variance threshold
DEBUG admin 2020-07-11 19:00:43,325 - Applying PCA
DEBUG admin 2020-07-11 19:00:43,338 - Applying Agglomerative algorithm
DEBUG admin 2020-07-11 19:00:43,476 - Sorting clusters
DEBUG admin 2020-07-11 19:00:43,477 - Converting to JSON format
DEBUG admin 2020-07-11 19:00:43,477 - Writting summary
DEBUG admin 2020-07-11 19:00:43,478 - Writting clustering information to datafile
DEBUG admin 2020-07-11 19:00:43,480 - Getting scatter plot for clustered data
DEBUG admin 2020-07-11 19:00:43,544 - Packing returned image as a stream of bytes to the Response object
INFO admin 2020-07-11 19:00:43,544 - Performed clustering successfully
INFO werkzeug 2020-07-11 19:00:43,544 - 127.0.0.1 - - [11/Jul/2020 19:00:43] "[37mPOST /clustering/agglomerative?k=5&format=csv&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-11 19:00:44,900 - Requested to get clustering details.
DEBUG admin 2020-07-11 19:00:44,900 - Reading datafile for clustered data
INFO admin 2020-07-11 19:00:44,900 - Get request for clustered data served successfully
INFO werkzeug 2020-07-11 19:00:44,901 - 127.0.0.1 - - [11/Jul/2020 19:00:44] "[37mGET /clustering/agglomerative?uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-11 19:00:44,914 - Requested to get clustering summary.
DEBUG admin 2020-07-11 19:00:44,914 - Reading datafile for clustering summary
INFO admin 2020-07-11 19:00:44,915 - Get request for clustering summary served successfully
DEBUG admin 2020-07-11 19:00:44,915 - Returning summary
INFO werkzeug 2020-07-11 19:00:44,915 - 127.0.0.1 - - [11/Jul/2020 19:00:44] "[37mGET /clustering/summary?uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-11 19:00:44,923 - Requested to cluster documents.
DEBUG admin 2020-07-11 19:00:44,923 - Reading datafile..
DEBUG admin 2020-07-11 19:00:44,924 - Setting default value of threshold for Variance Threshold to 0.0001
DEBUG admin 2020-07-11 19:00:44,924 - Setting default value of number of components for PCA to 0.8
DEBUG admin 2020-07-11 19:00:44,924 - Calculating tf-idf
DEBUG admin 2020-07-11 19:00:44,950 - Calculating variance threshold
DEBUG admin 2020-07-11 19:00:44,956 - Applying PCA
DEBUG admin 2020-07-11 19:00:44,970 - Applying Birch algorithm
DEBUG admin 2020-07-11 19:00:44,978 - Sorting clusters
DEBUG admin 2020-07-11 19:00:44,978 - Converting to JSON format
DEBUG admin 2020-07-11 19:00:44,979 - Writting summary
DEBUG admin 2020-07-11 19:00:44,980 - Writting clustering information to datafile
DEBUG admin 2020-07-11 19:00:44,993 - Getting scatter plot for clustered data
DEBUG admin 2020-07-11 19:00:45,062 - Packing returned image as a stream of bytes to the Response object
INFO admin 2020-07-11 19:00:45,062 - Performed clustering successfully
INFO werkzeug 2020-07-11 19:00:45,062 - 127.0.0.1 - - [11/Jul/2020 19:00:45] "[37mPOST /clustering/birch?k=5&format=csv&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-11 19:00:46,573 - Requested to get clustering details.
DEBUG admin 2020-07-11 19:00:46,573 - Reading datafile for clustered data
INFO admin 2020-07-11 19:00:46,574 - Get request for clustered data served successfully
INFO werkzeug 2020-07-11 19:00:46,576 - 127.0.0.1 - - [11/Jul/2020 19:00:46] "[37mGET /clustering/birch?uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-11 19:00:46,604 - Requested to get clustering summary.
DEBUG admin 2020-07-11 19:00:46,604 - Reading datafile for clustering summary
INFO admin 2020-07-11 19:00:46,605 - Get request for clustering summary served successfully
DEBUG admin 2020-07-11 19:00:46,605 - Returning summary
INFO werkzeug 2020-07-11 19:00:46,606 - 127.0.0.1 - - [11/Jul/2020 19:00:46] "[37mGET /clustering/summary?uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-11 19:00:46,623 - Logging off...deleting all cached files
INFO admin 2020-07-11 19:00:46,633 - Cleared cache
INFO werkzeug 2020-07-11 19:00:46,635 - 127.0.0.1 - - [11/Jul/2020 19:00:46] "[37mDELETE /clear?uname=admin HTTP/1.1[0m" 200 -
INFO admin 2020-07-11 19:00:46,658 - Requested for report generation.
DEBUG admin 2020-07-11 19:00:46,658 - Checking for json input
DEBUG admin 2020-07-11 19:00:46,658 - Fetching URLs
DEBUG admin 2020-07-11 19:00:46,658 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007930/dp108304_424b2-us1972721.htm URL
DEBUG admin 2020-07-11 19:00:47,376 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319008018/dp108385_424b2-us1972668.htm URL
DEBUG admin 2020-07-11 19:00:47,905 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319008084/dp108463_424b2-us1972667.htm URL
DEBUG admin 2020-07-11 19:00:48,431 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319009058/dp109430_424b2-us1972617.htm URL
DEBUG admin 2020-07-11 19:00:48,973 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007911/dp108280_424b2-us1972550.htm URL
DEBUG admin 2020-07-11 19:00:49,605 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319009050/dp109447_424b2-us1972547.htm URL
DEBUG admin 2020-07-11 19:00:50,251 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007828/dp108206_424b2-us1972545.htm URL
DEBUG admin 2020-07-11 19:00:50,792 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319009060/dp109497_424b2-us1972484.htm URL
DEBUG admin 2020-07-11 19:00:51,337 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007527/dp107872_fwp-us1972482.htm URL
DEBUG admin 2020-07-11 19:00:51,654 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007524/dp107870_fwp-us1972480.htm URL
DEBUG admin 2020-07-11 19:00:51,980 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319008572/dp109026_424b2-us1972369.htm URL
DEBUG admin 2020-07-11 19:00:52,506 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007525/dp107868_fwp-us1972350.htm URL
DEBUG admin 2020-07-11 19:00:52,837 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319009080/dp109492_424b2-us1972281.htm URL
DEBUG admin 2020-07-11 19:00:53,635 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007870/dp108232_424b2-us1972280.htm URL
DEBUG admin 2020-07-11 19:00:54,298 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007155/dp107611_424b2-us1972269.htm URL
DEBUG admin 2020-07-11 19:00:54,820 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319009048/dp109444_424b2-us1972158.htm URL
DEBUG admin 2020-07-11 19:00:55,768 - Using bruteforce method for report generation
INFO admin 2020-07-11 19:00:57,972 - Report generated successfully
INFO werkzeug 2020-07-11 19:00:57,974 - 127.0.0.1 - - [11/Jul/2020 19:00:57] "[37mPOST /report?username=admin&kind=1 HTTP/1.1[0m" 200 -
INFO admin 2020-07-11 19:00:57,983 - Requested for report generation.
DEBUG admin 2020-07-11 19:00:57,984 - Searching for JSON Dump
DEBUG admin 2020-07-11 19:00:57,984 - Found JSON Dump
DEBUG admin 2020-07-11 19:00:57,984 - Get request served successfully
INFO werkzeug 2020-07-11 19:00:57,988 - 127.0.0.1 - - [11/Jul/2020 19:00:57] "[37mGET /report?username=admin HTTP/1.1[0m" 200 -
INFO admin 2020-07-11 19:07:06,019 - Requested to extract data.
DEBUG admin 2020-07-11 19:07:06,019 - Extracted links and ISINs from JSON object.
INFO admin 2020-07-11 19:07:29,480 - Made entry for extracted data in datafile successfully.
INFO werkzeug 2020-07-11 19:07:29,481 - 127.0.0.1 - - [11/Jul/2020 19:07:29] "[37mPOST /extract?no_of_docs=30&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-11 19:07:29,490 - Requested to export extracted data.
DEBUG admin 2020-07-11 19:07:29,500 - Checking if filepath already exists
DEBUG admin 2020-07-11 19:07:29,501 - Checking if filepath has valid format
DEBUG admin 2020-07-11 19:07:29,501 - Exporting data to excel file
INFO admin 2020-07-11 19:07:29,613 - Exported successfully
INFO werkzeug 2020-07-11 19:07:29,614 - 127.0.0.1 - - [11/Jul/2020 19:07:29] "[37mPOST /extract/export?filepath=extract.xlsx&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-11 19:07:29,624 - Requested to pre-process data.
DEBUG admin 2020-07-11 19:07:29,624 - Reading data from datafile
DEBUG admin 2020-07-11 19:07:29,634 - Pre-processing text data
DEBUG admin 2020-07-11 19:07:44,747 - Pre-processed data
DEBUG admin 2020-07-11 19:07:44,747 - Writting pre-processed data to datafile
DEBUG admin 2020-07-11 19:07:44,750 - Made entry of pre-processed data in datafile successfully
INFO werkzeug 2020-07-11 19:07:44,751 - 127.0.0.1 - - [11/Jul/2020 19:07:44] "[37mPOST /preprocess?steps=url&steps=stemming&steps=lemmatization&steps=stopwords&steps=unusual&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-11 19:07:44,768 - Requested to export pre-processed data.
DEBUG admin 2020-07-11 19:07:44,769 - Reading pre-processed datafile.
DEBUG admin 2020-07-11 19:07:44,770 - Checking if filepath already exists
DEBUG admin 2020-07-11 19:07:44,771 - Exporting pre-processed data to excel file.
INFO admin 2020-07-11 19:07:44,843 - Exported pre-processed data successfully.
INFO werkzeug 2020-07-11 19:07:44,844 - 127.0.0.1 - - [11/Jul/2020 19:07:44] "[37mPOST /preprocess/export?filepath=prep.xlsx&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-11 19:07:44,858 - Requested to plot elbow curve.
DEBUG admin 2020-07-11 19:07:44,858 - Reading datafile..
DEBUG admin 2020-07-11 19:07:44,860 - Setting default value of threshold for Variance Threshold to 0.0001
DEBUG admin 2020-07-11 19:07:44,860 - Setting default value of number of components for PCA to 0.8
DEBUG admin 2020-07-11 19:07:44,860 - Calculating tf-idf
DEBUG admin 2020-07-11 19:07:44,927 - Calculating variance threshold
DEBUG admin 2020-07-11 19:07:44,939 - Applying PCA
DEBUG admin 2020-07-11 19:07:44,971 - Plotting elbow curve
DEBUG admin 2020-07-11 19:07:47,542 - Packing returned image as a stream of bytes to the Response object
INFO admin 2020-07-11 19:07:47,543 - Plotted elbow curve successfully
DEBUG admin 2020-07-11 19:07:47,543 - Writing optimal k value
INFO admin 2020-07-11 19:07:47,544 - Obtained optimal value of K using Elbow curve successfully
INFO werkzeug 2020-07-11 19:07:47,544 - 127.0.0.1 - - [11/Jul/2020 19:07:47] "[37mPOST /clustering/elbow?uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-11 19:07:50,406 - Requested to get optimal k value
DEBUG admin 2020-07-11 19:07:50,407 - Reading datafile for optimal k value after elbow method
INFO admin 2020-07-11 19:07:50,407 - Get request for optimal k value served successfully
INFO werkzeug 2020-07-11 19:07:50,409 - 127.0.0.1 - - [11/Jul/2020 19:07:50] "[37mGET /clustering/elbow?uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-11 19:07:50,428 - Requested for optimal value of K using Silhouette.
DEBUG admin 2020-07-11 19:07:50,428 - Reading datafile..
DEBUG admin 2020-07-11 19:07:50,431 - Setting default value of threshold for Variance Threshold to 0.0001
DEBUG admin 2020-07-11 19:07:50,431 - Setting default value of number of components for PCA to 0.8
DEBUG admin 2020-07-11 19:07:50,432 - Calculating tf-idf
DEBUG admin 2020-07-11 19:07:50,497 - Calculating variance threshold
DEBUG admin 2020-07-11 19:07:50,507 - Applying PCA
DEBUG admin 2020-07-11 19:07:50,539 - Applying silhouette coefficient
DEBUG admin 2020-07-11 19:07:50,540 - Plotting silhouette score
DEBUG admin 2020-07-11 19:07:51,401 - Packing returned image as a stream of bytes to the Response object
INFO admin 2020-07-11 19:07:51,401 - Plotted silhouette score successfully
DEBUG admin 2020-07-11 19:07:51,401 - Writting optimal k
INFO admin 2020-07-11 19:07:51,402 - Obtained optimal value of k using Silhouette score successfully
INFO werkzeug 2020-07-11 19:07:51,402 - 127.0.0.1 - - [11/Jul/2020 19:07:51] "[37mPOST /clustering/silhouette?uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-11 19:07:52,757 - Requested to get optimal k value
DEBUG admin 2020-07-11 19:07:52,757 - Reading datafile for optimal k value after silhouette
INFO admin 2020-07-11 19:07:52,758 - Get request for optimal k value served successfully
INFO werkzeug 2020-07-11 19:07:52,760 - 127.0.0.1 - - [11/Jul/2020 19:07:52] "[37mGET /clustering/silhouette?uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-11 19:07:52,775 - Requested to cluster documents.
DEBUG admin 2020-07-11 19:07:52,776 - Reading datafile..
DEBUG admin 2020-07-11 19:07:52,779 - Setting default value of threshold for Variance Threshold to 0.0001
DEBUG admin 2020-07-11 19:07:52,779 - Setting default value of number of components for PCA to 0.8
DEBUG admin 2020-07-11 19:07:52,780 - Calculating tf-idf
DEBUG admin 2020-07-11 19:07:52,844 - Calculating variance threshold
DEBUG admin 2020-07-11 19:07:52,855 - Applying PCA
DEBUG admin 2020-07-11 19:07:52,883 - Applying K-Means algorithm
DEBUG admin 2020-07-11 19:07:52,939 - Sorting clusters
DEBUG admin 2020-07-11 19:07:52,942 - Converting to JSON format
DEBUG admin 2020-07-11 19:07:52,945 - Writting summary
DEBUG admin 2020-07-11 19:07:52,947 - Writting clustering information to datafile
DEBUG admin 2020-07-11 19:07:52,949 - Getting scatter plot for clustered data
DEBUG admin 2020-07-11 19:07:53,139 - Packing returned image as a stream of bytes in Response object
INFO admin 2020-07-11 19:07:53,139 - Performed clustering successfully
INFO werkzeug 2020-07-11 19:07:53,140 - 127.0.0.1 - - [11/Jul/2020 19:07:53] "[37mPOST /clustering/kmeans?k=4&format=csv&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-11 19:07:54,463 - Requested to get clustering details.
DEBUG admin 2020-07-11 19:07:54,463 - Reading datafile for clustered data
INFO admin 2020-07-11 19:07:54,464 - Get request for clustered data served successfully
INFO werkzeug 2020-07-11 19:07:54,465 - 127.0.0.1 - - [11/Jul/2020 19:07:54] "[37mGET /clustering/kmeans?uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-11 19:07:54,497 - Requested to get clustering summary.
DEBUG admin 2020-07-11 19:07:54,498 - Reading datafile for clustering summary
INFO admin 2020-07-11 19:07:54,499 - Get request for clustering summary served successfully
DEBUG admin 2020-07-11 19:07:54,499 - Returning summary
INFO werkzeug 2020-07-11 19:07:54,501 - 127.0.0.1 - - [11/Jul/2020 19:07:54] "[37mGET /clustering/summary?uname=admin HTTP/1.1[0m" 200 -
INFO admin 2020-07-11 19:07:54,521 - Requested to cluster documents.
DEBUG admin 2020-07-11 19:07:54,522 - Reading datafile..
DEBUG admin 2020-07-11 19:07:54,525 - Setting default value of threshold for Variance Threshold to 0.0001
DEBUG admin 2020-07-11 19:07:54,526 - Setting default value of number of components for PCA to 0.8
DEBUG admin 2020-07-11 19:07:54,526 - Calculating tf-idf
DEBUG admin 2020-07-11 19:07:54,596 - Calculating variance threshold
DEBUG admin 2020-07-11 19:07:54,606 - Applying PCA
DEBUG admin 2020-07-11 19:07:54,637 - Applying DBSCAN algorithm
DEBUG admin 2020-07-11 19:07:54,653 - Sorting clusters
DEBUG admin 2020-07-11 19:07:54,655 - Converting to JSON format
DEBUG admin 2020-07-11 19:07:54,658 - Writting summary
DEBUG admin 2020-07-11 19:07:54,661 - Writting clustering information to datafile
DEBUG admin 2020-07-11 19:07:54,663 - Getting scatter plot for clustered data
DEBUG admin 2020-07-11 19:07:54,813 - Packing returned image as a stream of bytes to the Response object
INFO admin 2020-07-11 19:07:54,814 - Performed clustering successfully
INFO werkzeug 2020-07-11 19:07:54,815 - 127.0.0.1 - - [11/Jul/2020 19:07:54] "[37mPOST /clustering/dbscan?eps=0.3&min=1&format=csv&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-11 19:07:56,402 - Requested to get clustering details.
DEBUG admin 2020-07-11 19:07:56,403 - Reading datafile for clustered data
INFO admin 2020-07-11 19:07:56,403 - Get request for clustered data served successfully
INFO werkzeug 2020-07-11 19:07:56,404 - 127.0.0.1 - - [11/Jul/2020 19:07:56] "[37mGET /clustering/dbscan?uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-11 19:07:56,417 - Requested to get clustering summary.
DEBUG admin 2020-07-11 19:07:56,418 - Reading datafile for clustering summary
INFO admin 2020-07-11 19:07:56,418 - Get request for clustering summary served successfully
DEBUG admin 2020-07-11 19:07:56,418 - Returning summary
INFO werkzeug 2020-07-11 19:07:56,419 - 127.0.0.1 - - [11/Jul/2020 19:07:56] "[37mGET /clustering/summary?uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-11 19:07:56,428 - Requested to cluster documents.
DEBUG admin 2020-07-11 19:07:56,428 - Reading datafile..
DEBUG admin 2020-07-11 19:07:56,429 - Setting default value of threshold for Variance Threshold to 0.0001
DEBUG admin 2020-07-11 19:07:56,429 - Setting default value of number of components for PCA to 0.8
DEBUG admin 2020-07-11 19:07:56,429 - Calculating tf-idf
DEBUG admin 2020-07-11 19:07:56,453 - Calculating variance threshold
DEBUG admin 2020-07-11 19:07:56,459 - Applying PCA
DEBUG admin 2020-07-11 19:07:56,474 - Applying Agglomerative algorithm
DEBUG admin 2020-07-11 19:07:56,479 - Sorting clusters
DEBUG admin 2020-07-11 19:07:56,479 - Converting to JSON format
DEBUG admin 2020-07-11 19:07:56,480 - Writting summary
DEBUG admin 2020-07-11 19:07:56,481 - Writting clustering information to datafile
DEBUG admin 2020-07-11 19:07:56,482 - Getting scatter plot for clustered data
DEBUG admin 2020-07-11 19:07:56,546 - Packing returned image as a stream of bytes to the Response object
INFO admin 2020-07-11 19:07:56,547 - Performed clustering successfully
INFO werkzeug 2020-07-11 19:07:56,547 - 127.0.0.1 - - [11/Jul/2020 19:07:56] "[37mPOST /clustering/agglomerative?k=5&format=csv&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-11 19:07:57,842 - Requested to get clustering details.
DEBUG admin 2020-07-11 19:07:57,842 - Reading datafile for clustered data
INFO admin 2020-07-11 19:07:57,842 - Get request for clustered data served successfully
INFO werkzeug 2020-07-11 19:07:57,843 - 127.0.0.1 - - [11/Jul/2020 19:07:57] "[37mGET /clustering/agglomerative?uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-11 19:07:57,855 - Requested to get clustering summary.
DEBUG admin 2020-07-11 19:07:57,855 - Reading datafile for clustering summary
INFO admin 2020-07-11 19:07:57,856 - Get request for clustering summary served successfully
DEBUG admin 2020-07-11 19:07:57,856 - Returning summary
INFO werkzeug 2020-07-11 19:07:57,857 - 127.0.0.1 - - [11/Jul/2020 19:07:57] "[37mGET /clustering/summary?uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-11 19:07:57,864 - Requested to cluster documents.
DEBUG admin 2020-07-11 19:07:57,864 - Reading datafile..
DEBUG admin 2020-07-11 19:07:57,864 - Setting default value of threshold for Variance Threshold to 0.0001
DEBUG admin 2020-07-11 19:07:57,865 - Setting default value of number of components for PCA to 0.8
DEBUG admin 2020-07-11 19:07:57,865 - Calculating tf-idf
DEBUG admin 2020-07-11 19:07:57,896 - Calculating variance threshold
DEBUG admin 2020-07-11 19:07:57,902 - Applying PCA
DEBUG admin 2020-07-11 19:07:57,918 - Applying Birch algorithm
DEBUG admin 2020-07-11 19:07:57,925 - Sorting clusters
DEBUG admin 2020-07-11 19:07:57,926 - Converting to JSON format
DEBUG admin 2020-07-11 19:07:57,927 - Writting summary
DEBUG admin 2020-07-11 19:07:57,928 - Writting clustering information to datafile
DEBUG admin 2020-07-11 19:07:57,928 - Getting scatter plot for clustered data
DEBUG admin 2020-07-11 19:07:57,994 - Packing returned image as a stream of bytes to the Response object
INFO admin 2020-07-11 19:07:57,994 - Performed clustering successfully
INFO werkzeug 2020-07-11 19:07:57,994 - 127.0.0.1 - - [11/Jul/2020 19:07:57] "[37mPOST /clustering/birch?k=5&format=csv&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-11 19:07:59,798 - Requested to get clustering details.
DEBUG admin 2020-07-11 19:07:59,798 - Reading datafile for clustered data
INFO admin 2020-07-11 19:07:59,799 - Get request for clustered data served successfully
INFO werkzeug 2020-07-11 19:07:59,802 - 127.0.0.1 - - [11/Jul/2020 19:07:59] "[37mGET /clustering/birch?uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-11 19:07:59,851 - Requested to get clustering summary.
DEBUG admin 2020-07-11 19:07:59,851 - Reading datafile for clustering summary
INFO admin 2020-07-11 19:07:59,852 - Get request for clustering summary served successfully
DEBUG admin 2020-07-11 19:07:59,853 - Returning summary
INFO werkzeug 2020-07-11 19:07:59,859 - 127.0.0.1 - - [11/Jul/2020 19:07:59] "[37mGET /clustering/summary?uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-11 19:07:59,897 - Requested for report generation.
DEBUG admin 2020-07-11 19:07:59,897 - Checking for json input
DEBUG admin 2020-07-11 19:07:59,898 - Fetching URLs
DEBUG admin 2020-07-11 19:07:59,898 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007930/dp108304_424b2-us1972721.htm URL
DEBUG admin 2020-07-11 19:08:00,502 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319008018/dp108385_424b2-us1972668.htm URL
DEBUG admin 2020-07-11 19:08:01,027 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319008084/dp108463_424b2-us1972667.htm URL
DEBUG admin 2020-07-11 19:08:01,558 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319009058/dp109430_424b2-us1972617.htm URL
DEBUG admin 2020-07-11 19:08:02,021 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007911/dp108280_424b2-us1972550.htm URL
DEBUG admin 2020-07-11 19:08:02,483 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319009050/dp109447_424b2-us1972547.htm URL
DEBUG admin 2020-07-11 19:08:02,984 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007828/dp108206_424b2-us1972545.htm URL
DEBUG admin 2020-07-11 19:08:03,503 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319009060/dp109497_424b2-us1972484.htm URL
DEBUG admin 2020-07-11 19:08:04,013 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007527/dp107872_fwp-us1972482.htm URL
DEBUG admin 2020-07-11 19:08:04,323 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007524/dp107870_fwp-us1972480.htm URL
DEBUG admin 2020-07-11 19:08:04,643 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319008572/dp109026_424b2-us1972369.htm URL
DEBUG admin 2020-07-11 19:08:05,177 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007525/dp107868_fwp-us1972350.htm URL
DEBUG admin 2020-07-11 19:08:05,506 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319009080/dp109492_424b2-us1972281.htm URL
DEBUG admin 2020-07-11 19:08:06,123 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007870/dp108232_424b2-us1972280.htm URL
DEBUG admin 2020-07-11 19:08:06,762 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007155/dp107611_424b2-us1972269.htm URL
DEBUG admin 2020-07-11 19:08:07,207 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319009048/dp109444_424b2-us1972158.htm URL
DEBUG admin 2020-07-11 19:08:07,703 - Using bruteforce method for report generation
INFO admin 2020-07-11 19:08:09,693 - Report generated successfully
INFO werkzeug 2020-07-11 19:08:09,694 - 127.0.0.1 - - [11/Jul/2020 19:08:09] "[37mPOST /report?username=admin&kind=1 HTTP/1.1[0m" 200 -
INFO admin 2020-07-11 19:08:09,700 - Requested for report generation.
DEBUG admin 2020-07-11 19:08:09,700 - Searching for JSON Dump
DEBUG admin 2020-07-11 19:08:09,701 - Found JSON Dump
DEBUG admin 2020-07-11 19:08:09,701 - Get request served successfully
INFO werkzeug 2020-07-11 19:08:09,706 - 127.0.0.1 - - [11/Jul/2020 19:08:09] "[37mGET /report?username=admin HTTP/1.1[0m" 200 -
INFO werkzeug 2020-07-11 19:08:43,109 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-11 19:08:43,616 -  * Restarting with stat
INFO werkzeug 2020-07-11 19:08:47,961 -  * Restarting with stat
INFO werkzeug 2020-07-11 19:12:18,856 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-11 19:12:19,065 -  * Restarting with stat
INFO werkzeug 2020-07-11 19:12:35,307 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-11 19:12:35,527 -  * Restarting with stat
INFO werkzeug 2020-07-11 19:12:45,781 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-11 19:12:45,974 -  * Restarting with stat
INFO werkzeug 2020-07-11 19:12:50,986 -  * Restarting with stat
INFO werkzeug 2020-07-11 19:12:57,116 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-11 19:12:57,345 -  * Restarting with stat
INFO werkzeug 2020-07-11 19:13:04,884 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-11 19:13:05,146 -  * Restarting with stat
INFO werkzeug 2020-07-11 19:13:10,296 -  * Restarting with stat
INFO werkzeug 2020-07-11 19:13:18,835 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-11 19:13:19,220 -  * Restarting with stat
INFO werkzeug 2020-07-11 19:13:36,811 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-11 19:13:37,008 -  * Restarting with stat
INFO werkzeug 2020-07-11 19:15:32,674 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-11 19:15:32,878 -  * Restarting with stat
