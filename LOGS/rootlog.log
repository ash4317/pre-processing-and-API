INFO admin 2020-07-12 18:55:41,293 - Requested for report generation.
DEBUG admin 2020-07-12 18:55:41,293 - Checking for json input
DEBUG admin 2020-07-12 18:55:41,293 - Fetching URLs
DEBUG admin 2020-07-12 18:55:41,293 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007930/dp108304_424b2-us1972721.htm URL
DEBUG admin 2020-07-12 18:55:41,949 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319008018/dp108385_424b2-us1972668.htm URL
DEBUG admin 2020-07-12 18:55:42,449 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319008084/dp108463_424b2-us1972667.htm URL
DEBUG admin 2020-07-12 18:55:43,026 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319009058/dp109430_424b2-us1972617.htm URL
DEBUG admin 2020-07-12 18:55:43,527 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007911/dp108280_424b2-us1972550.htm URL
DEBUG admin 2020-07-12 18:55:44,058 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319009050/dp109447_424b2-us1972547.htm URL
DEBUG admin 2020-07-12 18:55:44,542 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007828/dp108206_424b2-us1972545.htm URL
DEBUG admin 2020-07-12 18:55:45,042 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319009060/dp109497_424b2-us1972484.htm URL
DEBUG admin 2020-07-12 18:55:45,573 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007527/dp107872_fwp-us1972482.htm URL
DEBUG admin 2020-07-12 18:55:45,886 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007524/dp107870_fwp-us1972480.htm URL
DEBUG admin 2020-07-12 18:55:46,198 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319008572/dp109026_424b2-us1972369.htm URL
DEBUG admin 2020-07-12 18:55:46,730 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007525/dp107868_fwp-us1972350.htm URL
DEBUG admin 2020-07-12 18:55:47,042 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319009080/dp109492_424b2-us1972281.htm URL
DEBUG admin 2020-07-12 18:55:47,651 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007870/dp108232_424b2-us1972280.htm URL
DEBUG admin 2020-07-12 18:55:48,279 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007155/dp107611_424b2-us1972269.htm URL
DEBUG admin 2020-07-12 18:55:48,810 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319009048/dp109444_424b2-us1972158.htm URL
DEBUG admin 2020-07-12 18:55:49,325 - Using bruteforce method for report generation
INFO admin 2020-07-12 18:55:51,169 - Report generated successfully
INFO werkzeug 2020-07-12 18:55:51,169 - 127.0.0.1 - - [12/Jul/2020 18:55:51] "[37mPOST /report?username=admin&kind=1 HTTP/1.1[0m" 200 -
INFO admin 2020-07-12 18:56:52,342 - Requested for report generation.
DEBUG admin 2020-07-12 18:56:52,342 - Searching for JSON Dump
DEBUG admin 2020-07-12 18:56:52,342 - Found JSON Dump
DEBUG admin 2020-07-12 18:56:52,342 - Get request served successfully
INFO werkzeug 2020-07-12 18:56:52,342 - 127.0.0.1 - - [12/Jul/2020 18:56:52] "[37mGET /report?username=admin&kind=1 HTTP/1.1[0m" 200 -
INFO werkzeug 2020-07-12 18:58:23,572 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\BruteForceReportGen.py', reloading
INFO werkzeug 2020-07-12 18:58:23,835 -  * Restarting with stat
INFO admin 2020-07-13 10:21:02,537 - Requested to extract data.
DEBUG admin 2020-07-13 10:21:02,554 - Extracted links and ISINs from JSON object.
INFO admin 2020-07-13 10:21:21,680 - Made entry for extracted data in datafile successfully.
INFO werkzeug 2020-07-13 10:21:21,680 - 127.0.0.1 - - [13/Jul/2020 10:21:21] "[37mPOST /extract?no_of_docs=20&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-13 10:21:21,689 - Requested to export extracted data.
DEBUG admin 2020-07-13 10:21:21,694 - Checking if filepath already exists
DEBUG admin 2020-07-13 10:21:21,694 - Checking if filepath has valid format
DEBUG admin 2020-07-13 10:21:21,695 - Exporting data to excel file
INFO admin 2020-07-13 10:21:21,868 - Exported successfully
INFO werkzeug 2020-07-13 10:21:21,868 - 127.0.0.1 - - [13/Jul/2020 10:21:21] "[37mPOST /extract/export?filepath=extract.xlsx&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-13 10:21:21,877 - Requested to pre-process data.
DEBUG admin 2020-07-13 10:21:21,877 - Reading data from datafile
DEBUG admin 2020-07-13 10:21:21,882 - Pre-processing text data
DEBUG admin 2020-07-13 10:21:34,804 - Pre-processed data
DEBUG admin 2020-07-13 10:21:34,805 - Writting pre-processed data to datafile
DEBUG admin 2020-07-13 10:21:34,806 - Made entry of pre-processed data in datafile successfully
INFO werkzeug 2020-07-13 10:21:34,806 - 127.0.0.1 - - [13/Jul/2020 10:21:34] "[37mPOST /preprocess?steps=url&steps=stemming&steps=lemmatization&steps=stopwords&steps=unusual&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-13 10:21:34,816 - Requested to export pre-processed data.
DEBUG admin 2020-07-13 10:21:34,816 - Reading pre-processed datafile.
DEBUG admin 2020-07-13 10:21:34,817 - Checking if filepath already exists
DEBUG admin 2020-07-13 10:21:34,818 - Exporting pre-processed data to excel file.
INFO admin 2020-07-13 10:21:34,868 - Exported pre-processed data successfully.
INFO werkzeug 2020-07-13 10:21:34,868 - 127.0.0.1 - - [13/Jul/2020 10:21:34] "[37mPOST /preprocess/export?filepath=prep.xlsx&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-13 10:21:34,876 - Requested to plot elbow curve.
DEBUG admin 2020-07-13 10:21:34,876 - Reading datafile..
DEBUG admin 2020-07-13 10:21:34,877 - Setting default value of threshold for Variance Threshold to 0.0001
DEBUG admin 2020-07-13 10:21:34,877 - Setting default value of number of components for PCA to 0.8
DEBUG admin 2020-07-13 10:21:34,877 - Calculating tf-idf
DEBUG admin 2020-07-13 10:21:34,908 - Calculating variance threshold
DEBUG admin 2020-07-13 10:21:34,913 - Applying PCA
DEBUG admin 2020-07-13 10:21:35,007 - Plotting elbow curve
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,451 - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,452 - findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,452 - findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,452 - findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,453 - findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,453 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,453 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,454 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,454 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,454 - findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,454 - findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,455 - findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,455 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,455 - findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,456 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,456 - findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,456 - findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,456 - findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,457 - findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,457 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,457 - findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,457 - findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,458 - findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,458 - findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,458 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,459 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,459 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,459 - findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,459 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,460 - findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,460 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,460 - findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,460 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,460 - findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,460 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,461 - findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,461 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,461 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,461 - findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,461 - findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,461 - findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,462 - findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,462 - findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,462 - findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,462 - findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,462 - findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,463 - findfont: score(<Font 'Times New Roman' (times.ttf) normal normal roman normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,463 - findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,463 - findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,463 - findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,463 - findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,463 - findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,464 - findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,464 - findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,464 - findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,464 - findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,464 - findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,465 - findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,465 - findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,465 - findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,465 - findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,466 - findfont: score(<Font 'Corbel' (corbell.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,466 - findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,466 - findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,466 - findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,466 - findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,467 - findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,467 - findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,467 - findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,467 - findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,467 - findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,468 - findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,468 - findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,468 - findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,468 - findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,468 - findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,468 - findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,469 - findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,469 - findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,469 - findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,469 - findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,469 - findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,469 - findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,470 - findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,470 - findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,470 - findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,470 - findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,470 - findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,470 - findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,471 - findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,471 - findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,471 - findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,471 - findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,471 - findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,472 - findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,472 - findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,472 - findfont: score(<Font 'Corbel' (corbell.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,472 - findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,472 - findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,472 - findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,473 - findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,473 - findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,473 - findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,473 - findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,473 - findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,473 - findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,474 - findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,474 - findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,474 - findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,474 - findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,474 - findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,474 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,475 - findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,475 - findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,475 - findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,475 - findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,475 - findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,476 - findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,476 - findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,476 - findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,476 - findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,476 - findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,476 - findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,477 - findfont: score(<Font 'Candara' (Candaral.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,477 - findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,477 - findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,477 - findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,477 - findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,478 - findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,478 - findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,478 - findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,478 - findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,478 - findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,479 - findfont: score(<Font 'Candara' (Candaral.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,479 - findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,479 - findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,479 - findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,479 - findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,480 - findfont: score(<Font 'Calibri' (calibril.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,480 - findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,480 - findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,480 - findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,480 - findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,480 - findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,481 - findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,481 - findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,481 - findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,481 - findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,482 - findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal roman normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,482 - findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,482 - findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,482 - findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,482 - findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,482 - findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,483 - findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,483 - findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,483 - findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,483 - findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,484 - findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,484 - findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,484 - findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,484 - findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,484 - findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,485 - findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,485 - findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,485 - findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,485 - findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,485 - findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,485 - findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,486 - findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,486 - findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,486 - findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal black normal>) = 11.525
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,486 - findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,486 - findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,486 - findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,487 - findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,487 - findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,487 - findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,487 - findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,488 - findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,488 - findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,488 - findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,488 - findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,488 - findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal semibold normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,489 - findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,489 - findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,489 - findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,489 - findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,489 - findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,489 - findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,490 - findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,490 - findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,490 - findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,490 - findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,490 - findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,490 - findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,491 - findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,491 - findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,491 - findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,491 - findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,491 - findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,491 - findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,492 - findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,492 - findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,492 - findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,492 - findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,493 - findfont: score(<Font 'Candara' (Candarali.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,493 - findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,493 - findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,493 - findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,493 - findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal medium normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,493 - findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,494 - findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,494 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,494 - findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,494 - findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,494 - findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,495 - findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,495 - findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,495 - findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,495 - findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,495 - findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal roman normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,496 - findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,496 - findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,496 - findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,496 - findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,496 - findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,496 - findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,497 - findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,497 - findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,497 - findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,497 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,497 - findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,497 - findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal semibold normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,498 - findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,498 - findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,498 - findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,498 - findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,498 - findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal medium normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,499 - findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,499 - findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,499 - findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal semibold normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,499 - findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,499 - findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,499 - findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,500 - findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,500 - findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal semibold normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,500 - findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,500 - findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal black normal>) = 11.525
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,500 - findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,501 - findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,501 - findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,501 - findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,502 - findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,502 - findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,502 - findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,503 - findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,503 - findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,503 - findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,503 - findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,503 - findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,504 - findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,504 - findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,504 - findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,505 - findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,505 - findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,505 - findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,505 - findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,505 - findfont: score(<Font 'Calibri' (calibril.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,505 - findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,506 - findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,506 - findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,506 - findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,506 - findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,506 - findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,507 - findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,507 - findfont: score(<Font 'Arial' (ariblk.ttf) normal normal black normal>) = 6.888636363636364
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,507 - findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,507 - findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,508 - findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,508 - findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,508 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,508 - findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,509 - findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,509 - findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,509 - findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,509 - findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,509 - findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,510 - findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,510 - findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,510 - findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,510 - findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,510 - findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,511 - findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,511 - findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,511 - findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,512 - findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,512 - findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,512 - findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,512 - findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,513 - findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,513 - findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,513 - findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,513 - findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,513 - findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,513 - findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,514 - findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,514 - findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,514 - findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,514 - findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,515 - findfont: score(<Font 'Times New Roman' (times.ttf) normal normal roman normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,515 - findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,515 - findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,515 - findfont: score(<Font 'Arial' (ariblk.ttf) normal normal black normal>) = 6.888636363636364
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,516 - findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,516 - findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,517 - findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,517 - findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,517 - findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,517 - findfont: score(<Font 'Candara' (Candarali.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,517 - findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,518 - findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,518 - findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,518 - findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,518 - findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,518 - findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,519 - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('c:\\python 3.8.2\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,614 - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,614 - findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,615 - findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,615 - findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,616 - findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,616 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,616 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,616 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,616 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,617 - findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,617 - findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,617 - findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,617 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,618 - findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,618 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,618 - findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,618 - findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,618 - findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,619 - findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,619 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,619 - findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,620 - findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,620 - findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,620 - findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,620 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,621 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,621 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,621 - findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,621 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,621 - findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,621 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,622 - findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,622 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,622 - findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,622 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,622 - findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,623 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,623 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,623 - findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,623 - findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,623 - findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,623 - findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,624 - findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,624 - findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,624 - findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,624 - findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,625 - findfont: score(<Font 'Times New Roman' (times.ttf) normal normal roman normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,625 - findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,625 - findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,625 - findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,625 - findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,626 - findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,626 - findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,626 - findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,626 - findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,626 - findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,626 - findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,627 - findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,627 - findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,627 - findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,627 - findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,628 - findfont: score(<Font 'Corbel' (corbell.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,628 - findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,628 - findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,628 - findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,628 - findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,629 - findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,629 - findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,629 - findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,629 - findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,629 - findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,630 - findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,630 - findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,630 - findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,630 - findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,630 - findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,631 - findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,631 - findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,631 - findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,631 - findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,631 - findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,632 - findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,632 - findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,632 - findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,633 - findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,633 - findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,633 - findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,633 - findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,634 - findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,634 - findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,634 - findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,634 - findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,635 - findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,635 - findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,635 - findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,635 - findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,636 - findfont: score(<Font 'Corbel' (corbell.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,636 - findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,636 - findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,637 - findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,637 - findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,637 - findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,637 - findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,638 - findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,638 - findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,638 - findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,638 - findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,639 - findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,639 - findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,639 - findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,640 - findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,640 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,640 - findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,640 - findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,641 - findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,641 - findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,641 - findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,641 - findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,641 - findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,641 - findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,642 - findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,642 - findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,642 - findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,642 - findfont: score(<Font 'Candara' (Candaral.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,643 - findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,643 - findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,643 - findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,643 - findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,644 - findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,644 - findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,644 - findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,644 - findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,644 - findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,645 - findfont: score(<Font 'Candara' (Candaral.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,645 - findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,645 - findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,645 - findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,645 - findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,646 - findfont: score(<Font 'Calibri' (calibril.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,646 - findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,646 - findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,646 - findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,646 - findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,647 - findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,647 - findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,647 - findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,648 - findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,648 - findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,648 - findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal roman normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,648 - findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,649 - findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,649 - findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,649 - findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,649 - findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,650 - findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,650 - findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,650 - findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,650 - findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,650 - findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,651 - findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,651 - findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,651 - findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,651 - findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,651 - findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,652 - findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,652 - findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,652 - findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,653 - findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,653 - findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,653 - findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,653 - findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,654 - findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal black normal>) = 11.525
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,654 - findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,655 - findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,656 - findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,656 - findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,656 - findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,657 - findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,657 - findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,657 - findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,657 - findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,658 - findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,658 - findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,658 - findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal semibold normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,659 - findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,659 - findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,659 - findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,659 - findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,659 - findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,660 - findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,660 - findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,660 - findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,660 - findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,660 - findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,661 - findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,661 - findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,661 - findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,661 - findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,661 - findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,662 - findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,662 - findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,662 - findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,662 - findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,662 - findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,663 - findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,663 - findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,663 - findfont: score(<Font 'Candara' (Candarali.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,663 - findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,663 - findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,663 - findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,664 - findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal medium normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,664 - findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,664 - findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,664 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,664 - findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,665 - findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,665 - findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,665 - findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,666 - findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,666 - findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,666 - findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,666 - findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal roman normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,667 - findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,667 - findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,667 - findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,667 - findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,667 - findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,668 - findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,668 - findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,668 - findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,669 - findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,669 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,669 - findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,669 - findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal semibold normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,669 - findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,669 - findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,670 - findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,670 - findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,670 - findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal medium normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,670 - findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,670 - findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,671 - findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal semibold normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,671 - findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,671 - findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,671 - findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,671 - findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,671 - findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal semibold normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,672 - findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,672 - findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal black normal>) = 11.525
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,672 - findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,672 - findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,672 - findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,672 - findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,673 - findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,673 - findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,673 - findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,673 - findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,674 - findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,674 - findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,674 - findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,674 - findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,675 - findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,675 - findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,675 - findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,675 - findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,676 - findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,676 - findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,676 - findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,676 - findfont: score(<Font 'Calibri' (calibril.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,676 - findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,677 - findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,677 - findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,677 - findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,677 - findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,677 - findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,678 - findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,678 - findfont: score(<Font 'Arial' (ariblk.ttf) normal normal black normal>) = 6.888636363636364
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,678 - findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,678 - findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,678 - findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,678 - findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,679 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,679 - findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,679 - findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,679 - findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,680 - findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,680 - findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,680 - findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,680 - findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,680 - findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,681 - findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,681 - findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,681 - findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,681 - findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,682 - findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,682 - findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,682 - findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,683 - findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,683 - findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,683 - findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,684 - findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,684 - findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,684 - findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,685 - findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,685 - findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,685 - findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,685 - findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,686 - findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,686 - findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,686 - findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,687 - findfont: score(<Font 'Times New Roman' (times.ttf) normal normal roman normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,687 - findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,687 - findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,687 - findfont: score(<Font 'Arial' (ariblk.ttf) normal normal black normal>) = 6.888636363636364
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,688 - findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,688 - findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,688 - findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,688 - findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,688 - findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,688 - findfont: score(<Font 'Candara' (Candarali.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,689 - findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,689 - findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,689 - findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,689 - findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,689 - findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,690 - findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 10:21:37,690 - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('c:\\python 3.8.2\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
DEBUG admin 2020-07-13 10:21:37,777 - Packing returned image as a stream of bytes to the Response object
INFO admin 2020-07-13 10:21:37,777 - Plotted elbow curve successfully
DEBUG admin 2020-07-13 10:21:37,777 - Writing optimal k value
INFO admin 2020-07-13 10:21:37,778 - Obtained optimal value of K using Elbow curve successfully
INFO werkzeug 2020-07-13 10:21:37,779 - 127.0.0.1 - - [13/Jul/2020 10:21:37] "[37mPOST /clustering/elbow?uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-13 10:21:40,723 - Requested to get optimal k value
DEBUG admin 2020-07-13 10:21:40,723 - Reading datafile for optimal k value after elbow method
INFO admin 2020-07-13 10:21:40,724 - Get request for optimal k value served successfully
INFO werkzeug 2020-07-13 10:21:40,725 - 127.0.0.1 - - [13/Jul/2020 10:21:40] "[37mGET /clustering/elbow?uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-13 10:21:40,734 - Requested for optimal value of K using Silhouette.
DEBUG admin 2020-07-13 10:21:40,734 - Reading datafile..
DEBUG admin 2020-07-13 10:21:40,735 - Setting default value of threshold for Variance Threshold to 0.0001
DEBUG admin 2020-07-13 10:21:40,735 - Setting default value of number of components for PCA to 0.8
DEBUG admin 2020-07-13 10:21:40,735 - Calculating tf-idf
DEBUG admin 2020-07-13 10:21:40,757 - Calculating variance threshold
DEBUG admin 2020-07-13 10:21:40,761 - Applying PCA
DEBUG admin 2020-07-13 10:21:40,770 - Applying silhouette coefficient
DEBUG admin 2020-07-13 10:21:40,770 - Plotting silhouette score
DEBUG admin 2020-07-13 10:21:41,911 - Packing returned image as a stream of bytes to the Response object
INFO admin 2020-07-13 10:21:41,912 - Plotted silhouette score successfully
DEBUG admin 2020-07-13 10:21:41,912 - Writting optimal k
INFO admin 2020-07-13 10:21:41,914 - Obtained optimal value of k using Silhouette score successfully
INFO werkzeug 2020-07-13 10:21:41,916 - 127.0.0.1 - - [13/Jul/2020 10:21:41] "[37mPOST /clustering/silhouette?uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-13 10:21:43,659 - Requested to get optimal k value
DEBUG admin 2020-07-13 10:21:43,659 - Reading datafile for optimal k value after silhouette
INFO admin 2020-07-13 10:21:43,660 - Get request for optimal k value served successfully
INFO werkzeug 2020-07-13 10:21:43,660 - 127.0.0.1 - - [13/Jul/2020 10:21:43] "[37mGET /clustering/silhouette?uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-13 10:21:43,671 - Requested to cluster documents.
DEBUG admin 2020-07-13 10:21:43,671 - Reading datafile..
DEBUG admin 2020-07-13 10:21:43,672 - Setting default value of threshold for Variance Threshold to 0.0001
DEBUG admin 2020-07-13 10:21:43,672 - Setting default value of number of components for PCA to 0.8
DEBUG admin 2020-07-13 10:21:43,672 - Calculating tf-idf
DEBUG admin 2020-07-13 10:21:43,711 - Calculating variance threshold
DEBUG admin 2020-07-13 10:21:43,717 - Applying PCA
DEBUG admin 2020-07-13 10:21:43,728 - Applying K-Means algorithm
DEBUG admin 2020-07-13 10:21:43,759 - Sorting clusters
DEBUG admin 2020-07-13 10:21:43,760 - Converting to JSON format
DEBUG admin 2020-07-13 10:21:43,761 - Writting summary
DEBUG admin 2020-07-13 10:21:43,762 - Writting clustering information to datafile
INFO werkzeug 2020-07-13 10:21:43,764 - 127.0.0.1 - - [13/Jul/2020 10:21:43] "[37mPOST /clustering/kmeans?k=4&format=csv&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-13 10:21:43,770 - Requested to get clustering details.
DEBUG admin 2020-07-13 10:21:43,770 - Reading datafile for clustered data
INFO admin 2020-07-13 10:21:43,770 - Get request for clustered data served successfully
INFO werkzeug 2020-07-13 10:21:43,771 - 127.0.0.1 - - [13/Jul/2020 10:21:43] "[37mGET /clustering/kmeans?uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-13 10:21:43,784 - Requested to get clustering summary.
DEBUG admin 2020-07-13 10:21:43,784 - Reading datafile for clustering summary
INFO admin 2020-07-13 10:21:43,785 - Get request for clustering summary served successfully
DEBUG admin 2020-07-13 10:21:43,785 - Returning summary
INFO werkzeug 2020-07-13 10:21:43,786 - 127.0.0.1 - - [13/Jul/2020 10:21:43] "[37mGET /clustering/summary?uname=admin HTTP/1.1[0m" 200 -
INFO admin 2020-07-13 10:21:43,795 - Requested to cluster documents.
DEBUG admin 2020-07-13 10:21:43,795 - Reading datafile..
DEBUG admin 2020-07-13 10:21:43,797 - Setting default value of threshold for Variance Threshold to 0.0001
DEBUG admin 2020-07-13 10:21:43,798 - Setting default value of number of components for PCA to 0.8
DEBUG admin 2020-07-13 10:21:43,798 - Calculating tf-idf
DEBUG admin 2020-07-13 10:21:43,818 - Calculating variance threshold
DEBUG admin 2020-07-13 10:21:43,822 - Applying PCA
DEBUG admin 2020-07-13 10:21:43,830 - Applying DBSCAN algorithm
DEBUG admin 2020-07-13 10:21:43,858 - Sorting clusters
DEBUG admin 2020-07-13 10:21:43,859 - Converting to JSON format
DEBUG admin 2020-07-13 10:21:43,860 - Writting summary
DEBUG admin 2020-07-13 10:21:43,861 - Writting clustering information to datafile
INFO werkzeug 2020-07-13 10:21:43,863 - 127.0.0.1 - - [13/Jul/2020 10:21:43] "[37mPOST /clustering/dbscan?eps=0.3&min=1&format=csv&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-13 10:21:43,868 - Requested to get clustering details.
DEBUG admin 2020-07-13 10:21:43,869 - Reading datafile for clustered data
INFO admin 2020-07-13 10:21:43,869 - Get request for clustered data served successfully
INFO werkzeug 2020-07-13 10:21:43,870 - 127.0.0.1 - - [13/Jul/2020 10:21:43] "[37mGET /clustering/dbscan?uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-13 10:21:43,883 - Requested to get clustering summary.
DEBUG admin 2020-07-13 10:21:43,883 - Reading datafile for clustering summary
INFO admin 2020-07-13 10:21:43,884 - Get request for clustering summary served successfully
DEBUG admin 2020-07-13 10:21:43,884 - Returning summary
INFO werkzeug 2020-07-13 10:21:43,885 - 127.0.0.1 - - [13/Jul/2020 10:21:43] "[37mGET /clustering/summary?uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-13 10:21:43,894 - Requested to cluster documents.
DEBUG admin 2020-07-13 10:21:43,894 - Reading datafile..
DEBUG admin 2020-07-13 10:21:43,895 - Setting default value of threshold for Variance Threshold to 0.0001
DEBUG admin 2020-07-13 10:21:43,896 - Setting default value of number of components for PCA to 0.8
DEBUG admin 2020-07-13 10:21:43,896 - Calculating tf-idf
DEBUG admin 2020-07-13 10:21:43,917 - Calculating variance threshold
DEBUG admin 2020-07-13 10:21:43,922 - Applying PCA
DEBUG admin 2020-07-13 10:21:43,929 - Applying Agglomerative algorithm
DEBUG admin 2020-07-13 10:21:43,954 - Sorting clusters
DEBUG admin 2020-07-13 10:21:43,955 - Converting to JSON format
DEBUG admin 2020-07-13 10:21:43,956 - Writting summary
DEBUG admin 2020-07-13 10:21:43,957 - Writting clustering information to datafile
INFO werkzeug 2020-07-13 10:21:43,959 - 127.0.0.1 - - [13/Jul/2020 10:21:43] "[37mPOST /clustering/agglomerative?k=5&format=csv&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-13 10:21:43,965 - Requested to get clustering details.
DEBUG admin 2020-07-13 10:21:43,965 - Reading datafile for clustered data
INFO admin 2020-07-13 10:21:43,965 - Get request for clustered data served successfully
INFO werkzeug 2020-07-13 10:21:43,966 - 127.0.0.1 - - [13/Jul/2020 10:21:43] "[37mGET /clustering/agglomerative?uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-13 10:21:43,980 - Requested to get clustering summary.
DEBUG admin 2020-07-13 10:21:43,980 - Reading datafile for clustering summary
INFO admin 2020-07-13 10:21:43,980 - Get request for clustering summary served successfully
DEBUG admin 2020-07-13 10:21:43,980 - Returning summary
INFO werkzeug 2020-07-13 10:21:43,981 - 127.0.0.1 - - [13/Jul/2020 10:21:43] "[37mGET /clustering/summary?uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-13 10:21:43,991 - Requested to cluster documents.
DEBUG admin 2020-07-13 10:21:43,991 - Reading datafile..
DEBUG admin 2020-07-13 10:21:43,991 - Setting default value of threshold for Variance Threshold to 0.0001
DEBUG admin 2020-07-13 10:21:43,992 - Setting default value of number of components for PCA to 0.8
DEBUG admin 2020-07-13 10:21:43,992 - Calculating tf-idf
DEBUG admin 2020-07-13 10:21:44,015 - Calculating variance threshold
DEBUG admin 2020-07-13 10:21:44,020 - Applying PCA
DEBUG admin 2020-07-13 10:21:44,027 - Applying Birch algorithm
DEBUG admin 2020-07-13 10:21:44,046 - Sorting clusters
DEBUG admin 2020-07-13 10:21:44,047 - Converting to JSON format
DEBUG admin 2020-07-13 10:21:44,048 - Writting summary
DEBUG admin 2020-07-13 10:21:44,049 - Writting clustering information to datafile
INFO werkzeug 2020-07-13 10:21:44,051 - 127.0.0.1 - - [13/Jul/2020 10:21:44] "[37mPOST /clustering/birch?k=5&format=csv&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-13 10:21:44,058 - Requested to get clustering details.
DEBUG admin 2020-07-13 10:21:44,058 - Reading datafile for clustered data
INFO admin 2020-07-13 10:21:44,059 - Get request for clustered data served successfully
INFO werkzeug 2020-07-13 10:21:44,060 - 127.0.0.1 - - [13/Jul/2020 10:21:44] "[37mGET /clustering/birch?uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-13 10:21:44,072 - Requested to get clustering summary.
DEBUG admin 2020-07-13 10:21:44,072 - Reading datafile for clustering summary
INFO admin 2020-07-13 10:21:44,073 - Get request for clustering summary served successfully
DEBUG admin 2020-07-13 10:21:44,073 - Returning summary
INFO werkzeug 2020-07-13 10:21:44,073 - 127.0.0.1 - - [13/Jul/2020 10:21:44] "[37mGET /clustering/summary?uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-13 10:21:44,083 - Logging off...deleting all cached files
INFO admin 2020-07-13 10:21:44,134 - Cleared cache
INFO werkzeug 2020-07-13 10:21:44,135 - 127.0.0.1 - - [13/Jul/2020 10:21:44] "[37mDELETE /clear?uname=admin HTTP/1.1[0m" 200 -
INFO admin 2020-07-13 10:21:44,145 - Requested for report generation.
DEBUG admin 2020-07-13 10:21:44,145 - Checking for json input
DEBUG admin 2020-07-13 10:21:44,146 - Fetching URLs
DEBUG admin 2020-07-13 10:21:44,146 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007930/dp108304_424b2-us1972721.htm URL
DEBUG admin 2020-07-13 10:21:45,009 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319008018/dp108385_424b2-us1972668.htm URL
DEBUG admin 2020-07-13 10:21:45,472 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319008084/dp108463_424b2-us1972667.htm URL
DEBUG admin 2020-07-13 10:21:45,934 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319009058/dp109430_424b2-us1972617.htm URL
DEBUG admin 2020-07-13 10:21:46,333 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007911/dp108280_424b2-us1972550.htm URL
DEBUG admin 2020-07-13 10:21:46,784 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319009050/dp109447_424b2-us1972547.htm URL
DEBUG admin 2020-07-13 10:21:47,205 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007828/dp108206_424b2-us1972545.htm URL
DEBUG admin 2020-07-13 10:21:47,677 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319009060/dp109497_424b2-us1972484.htm URL
DEBUG admin 2020-07-13 10:21:48,110 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007527/dp107872_fwp-us1972482.htm URL
DEBUG admin 2020-07-13 10:21:48,367 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007524/dp107870_fwp-us1972480.htm URL
DEBUG admin 2020-07-13 10:21:48,693 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319008572/dp109026_424b2-us1972369.htm URL
DEBUG admin 2020-07-13 10:21:49,094 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007525/dp107868_fwp-us1972350.htm URL
DEBUG admin 2020-07-13 10:21:49,375 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319009080/dp109492_424b2-us1972281.htm URL
DEBUG admin 2020-07-13 10:21:49,904 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007870/dp108232_424b2-us1972280.htm URL
DEBUG admin 2020-07-13 10:21:50,634 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007155/dp107611_424b2-us1972269.htm URL
DEBUG admin 2020-07-13 10:21:51,100 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319009048/dp109444_424b2-us1972158.htm URL
DEBUG admin 2020-07-13 10:21:51,666 - Using bruteforce method for report generation
INFO admin 2020-07-13 10:21:53,729 - Report generated successfully
INFO werkzeug 2020-07-13 10:21:53,730 - 127.0.0.1 - - [13/Jul/2020 10:21:53] "[37mPOST /report?username=admin&kind=1 HTTP/1.1[0m" 200 -
INFO admin 2020-07-13 10:21:53,737 - Requested for report generation.
DEBUG admin 2020-07-13 10:21:53,738 - Searching for JSON Dump
DEBUG admin 2020-07-13 10:21:53,738 - Found JSON Dump
DEBUG admin 2020-07-13 10:21:53,738 - Get request served successfully
INFO werkzeug 2020-07-13 10:21:53,739 - 127.0.0.1 - - [13/Jul/2020 10:21:53] "[37mGET /report?username=admin HTTP/1.1[0m" 200 -
INFO admin 2020-07-13 12:54:13,595 - Requested to extract data.
DEBUG admin 2020-07-13 12:54:13,611 - Extracted links and ISINs from JSON object.
INFO admin 2020-07-13 12:54:23,702 - Made entry for extracted data in datafile successfully.
INFO werkzeug 2020-07-13 12:54:23,702 - 127.0.0.1 - - [13/Jul/2020 12:54:23] "[37mPOST /extract?no_of_docs=10&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-13 12:54:43,177 - Requested to export extracted data.
DEBUG admin 2020-07-13 12:54:43,177 - Checking if filepath has valid format
DEBUG admin 2020-07-13 12:54:43,177 - Exporting data to excel file
INFO admin 2020-07-13 12:54:43,334 - Exported successfully
INFO werkzeug 2020-07-13 12:54:43,334 - 127.0.0.1 - - [13/Jul/2020 12:54:43] "[37mPOST /extract/export?filepath=extract.xlsx&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-13 12:55:36,663 - Requested to pre-process data.
DEBUG admin 2020-07-13 12:55:36,663 - Reading data from datafile
DEBUG admin 2020-07-13 12:55:36,679 - Pre-processing text data
DEBUG admin 2020-07-13 12:55:42,224 - Pre-processed data
DEBUG admin 2020-07-13 12:55:42,224 - Writting pre-processed data to datafile
DEBUG admin 2020-07-13 12:55:42,224 - Made entry of pre-processed data in datafile successfully
INFO werkzeug 2020-07-13 12:55:42,224 - 127.0.0.1 - - [13/Jul/2020 12:55:42] "[37mPOST /preprocess?steps=url&steps=stemming&steps=lemmatization&steps=stopwords&steps=unusual&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-13 12:55:54,728 - Requested to export pre-processed data.
DEBUG admin 2020-07-13 12:55:54,728 - Reading pre-processed datafile.
DEBUG admin 2020-07-13 12:55:54,728 - Exporting pre-processed data to excel file.
INFO admin 2020-07-13 12:55:54,759 - Exported pre-processed data successfully.
INFO werkzeug 2020-07-13 12:55:54,759 - 127.0.0.1 - - [13/Jul/2020 12:55:54] "[37mPOST /preprocess/export?filepath=prep.xlsx&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-13 12:56:25,418 - Requested to get optimal k value
DEBUG admin 2020-07-13 12:56:25,418 - Reading datafile for optimal k value after silhouette
ERROR admin 2020-07-13 12:56:25,418 - Error in reading datafile
Traceback (most recent call last):
  File "C:\Users\ASHWIN\Desktop\FinIQ\Assignments_FinIQ\NLP_Citi\pre-processing-and-API\api.py", line 1529, in get
    data = ex.get_recent_file('optimal_k_' + args['uname'])
  File "C:\Users\ASHWIN\Desktop\FinIQ\Assignments_FinIQ\NLP_Citi\pre-processing-and-API\extract.py", line 294, in get_recent_file
    return names[0]
IndexError: list index out of range
INFO werkzeug 2020-07-13 12:56:25,418 - 127.0.0.1 - - [13/Jul/2020 12:56:25] "[31m[1mGET /clustering/silhouette?uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 400 -
INFO admin 2020-07-13 12:56:47,966 - Requested to cluster documents.
DEBUG admin 2020-07-13 12:56:47,966 - Reading datafile..
DEBUG admin 2020-07-13 12:56:47,966 - Setting default value of threshold for Variance Threshold to 0.0001
DEBUG admin 2020-07-13 12:56:47,966 - Setting default value of number of components for PCA to 0.8
DEBUG admin 2020-07-13 12:56:47,966 - Calculating tf-idf
DEBUG admin 2020-07-13 12:56:47,982 - Calculating variance threshold
DEBUG admin 2020-07-13 12:56:47,982 - Applying PCA
DEBUG admin 2020-07-13 12:56:48,138 - Applying K-Means algorithm
DEBUG admin 2020-07-13 12:56:48,185 - Sorting clusters
DEBUG admin 2020-07-13 12:56:48,185 - Converting to JSON format
DEBUG admin 2020-07-13 12:56:48,185 - Writting summary
DEBUG admin 2020-07-13 12:56:48,185 - Writting clustering information to datafile
INFO werkzeug 2020-07-13 12:56:48,185 - 127.0.0.1 - - [13/Jul/2020 12:56:48] "[37mPOST /clustering/kmeans?k=4&format=csv&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-13 12:57:08,025 - Requested to get clustering details.
DEBUG admin 2020-07-13 12:57:08,025 - Reading datafile for clustered data
INFO admin 2020-07-13 12:57:08,025 - Get request for clustered data served successfully
INFO werkzeug 2020-07-13 12:57:08,026 - 127.0.0.1 - - [13/Jul/2020 12:57:08] "[37mGET /clustering/kmeans?uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-13 12:57:17,598 - Requested to get clustering summary.
DEBUG admin 2020-07-13 12:57:17,598 - Reading datafile for clustering summary
INFO admin 2020-07-13 12:57:17,598 - Get request for clustering summary served successfully
DEBUG admin 2020-07-13 12:57:17,598 - Returning summary
INFO werkzeug 2020-07-13 12:57:17,598 - 127.0.0.1 - - [13/Jul/2020 12:57:17] "[37mGET /clustering/summary?uname=admin HTTP/1.1[0m" 200 -
INFO admin 2020-07-13 12:58:40,062 - Requested to export extracted data.
DEBUG admin 2020-07-13 12:58:40,062 - Checking if filepath has valid format
DEBUG admin 2020-07-13 12:58:40,062 - Exporting data to excel file
INFO admin 2020-07-13 12:58:40,124 - Exported successfully
INFO werkzeug 2020-07-13 12:58:40,124 - 127.0.0.1 - - [13/Jul/2020 12:58:40] "[37mPOST /extract/export?filepath=extract.xlsx&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-13 13:04:16,082 - Requested to export extracted data.
DEBUG admin 2020-07-13 13:04:16,097 - Checking if filepath has valid format
DEBUG admin 2020-07-13 13:04:16,097 - Exporting data to csv file
INFO admin 2020-07-13 13:04:16,113 - Exported successfully
INFO werkzeug 2020-07-13 13:04:16,113 - 127.0.0.1 - - [13/Jul/2020 13:04:16] "[37mPOST /extract/export?filepath=extract.csv&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-13 13:20:44,081 - Requested to cluster documents.
DEBUG admin 2020-07-13 13:20:44,081 - Reading datafile..
ERROR admin 2020-07-13 13:20:44,081 - Failed to read datafileIndexError('list index out of range')
Traceback (most recent call last):
  File "C:\Users\ASHWIN\Desktop\FinIQ\Assignments_FinIQ\NLP_Citi\pre-processing-and-API\api.py", line 547, in post
    jsondata = ex.read_json(ex.get_recent_file('preprocess_' + args['uname'] + '_' + fname))
  File "C:\Users\ASHWIN\Desktop\FinIQ\Assignments_FinIQ\NLP_Citi\pre-processing-and-API\extract.py", line 294, in get_recent_file
    return names[0]
IndexError: list index out of range
INFO werkzeug 2020-07-13 13:20:44,081 - 127.0.0.1 - - [13/Jul/2020 13:20:44] "[31m[1mPOST /clustering/kmeans?k=4&format=csv&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 400 -
INFO admin 2020-07-13 13:25:39,834 - Requested to get clustering details.
DEBUG admin 2020-07-13 13:25:39,834 - Reading datafile for clustered data
INFO admin 2020-07-13 13:25:39,834 - Get request for clustered data served successfully
INFO werkzeug 2020-07-13 13:25:39,849 - 127.0.0.1 - - [13/Jul/2020 13:25:39] "[37mGET /clustering/kmeans?uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-13 13:25:51,316 - Requested to get clustering details.
DEBUG admin 2020-07-13 13:25:51,316 - Reading datafile for clustered data
ERROR admin 2020-07-13 13:25:51,316 - Error in reading datafile
Traceback (most recent call last):
  File "C:\Users\ASHWIN\Desktop\FinIQ\Assignments_FinIQ\NLP_Citi\pre-processing-and-API\api.py", line 650, in get
    data = ex.get_recent_file('cluster_' + args['uname'])
  File "C:\Users\ASHWIN\Desktop\FinIQ\Assignments_FinIQ\NLP_Citi\pre-processing-and-API\extract.py", line 294, in get_recent_file
    return names[0]
IndexError: list index out of range
INFO werkzeug 2020-07-13 13:25:51,316 - 127.0.0.1 - - [13/Jul/2020 13:25:51] "[31m[1mGET /clustering/kmeans?uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 400 -
INFO admin 2020-07-13 13:35:10,800 - Requested to plot elbow curve.
DEBUG admin 2020-07-13 13:35:10,800 - Reading datafile..
ERROR admin 2020-07-13 13:35:10,800 - Failed to read datafile
Traceback (most recent call last):
  File "C:\Users\ASHWIN\Desktop\FinIQ\Assignments_FinIQ\NLP_Citi\pre-processing-and-API\api.py", line 1301, in post
    jsondata = ex.read_json(ex.get_recent_file('preprocess_' + args['uname'] + '_' + fname))
  File "C:\Users\ASHWIN\Desktop\FinIQ\Assignments_FinIQ\NLP_Citi\pre-processing-and-API\extract.py", line 294, in get_recent_file
    return names[0]
IndexError: list index out of range
INFO werkzeug 2020-07-13 13:35:10,800 - 127.0.0.1 - - [13/Jul/2020 13:35:10] "[31m[1mPOST /clustering/elbow?uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 400 -
INFO admin 2020-07-13 13:35:42,241 - Requested to plot elbow curve.
DEBUG admin 2020-07-13 13:35:42,241 - Reading datafile..
DEBUG admin 2020-07-13 13:35:42,272 - Setting default value of threshold for Variance Threshold to 0.0001
DEBUG admin 2020-07-13 13:35:42,272 - Setting default value of number of components for PCA to 0.8
DEBUG admin 2020-07-13 13:35:42,272 - Calculating tf-idf
DEBUG admin 2020-07-13 13:35:42,287 - Calculating variance threshold
DEBUG admin 2020-07-13 13:35:42,287 - Applying PCA
DEBUG admin 2020-07-13 13:35:42,303 - Plotting elbow curve
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Times New Roman' (times.ttf) normal normal roman normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Corbel' (corbell.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Corbel' (corbell.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Candara' (Candaral.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Candara' (Candaral.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Calibri' (calibril.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal roman normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal black normal>) = 11.525
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal semibold normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,162 - findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Candara' (Candarali.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal medium normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal roman normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal semibold normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal medium normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal semibold normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal semibold normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal black normal>) = 11.525
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Calibri' (calibril.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Arial' (ariblk.ttf) normal normal black normal>) = 6.888636363636364
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Times New Roman' (times.ttf) normal normal roman normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Arial' (ariblk.ttf) normal normal black normal>) = 6.888636363636364
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Candara' (Candarali.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,177 - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('c:\\python 3.8.2\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,271 - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,271 - findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,271 - findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,271 - findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,271 - findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,271 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,271 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,271 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,271 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,271 - findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,271 - findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,271 - findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,271 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,271 - findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,271 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,271 - findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,271 - findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,271 - findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,271 - findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,271 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,271 - findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,271 - findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,271 - findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,271 - findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,271 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,271 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,271 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,271 - findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,271 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,271 - findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,271 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,271 - findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,271 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,271 - findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,271 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,271 - findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,271 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,271 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,271 - findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,271 - findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,271 - findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,271 - findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,271 - findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,271 - findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,271 - findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,271 - findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,271 - findfont: score(<Font 'Times New Roman' (times.ttf) normal normal roman normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,271 - findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Corbel' (corbell.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Corbel' (corbell.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Candara' (Candaral.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Candara' (Candaral.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Calibri' (calibril.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal roman normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal black normal>) = 11.525
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal semibold normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Candara' (Candarali.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal medium normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal roman normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal semibold normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal medium normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal semibold normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal semibold normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal black normal>) = 11.525
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,287 - findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Calibri' (calibril.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Arial' (ariblk.ttf) normal normal black normal>) = 6.888636363636364
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Times New Roman' (times.ttf) normal normal roman normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Arial' (ariblk.ttf) normal normal black normal>) = 6.888636363636364
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Candara' (Candarali.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-13 13:35:44,302 - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('c:\\python 3.8.2\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
DEBUG admin 2020-07-13 13:35:44,365 - Packing returned image as a stream of bytes to the Response object
INFO admin 2020-07-13 13:35:44,365 - Plotted elbow curve successfully
DEBUG admin 2020-07-13 13:35:44,365 - Writing optimal k value
INFO admin 2020-07-13 13:35:44,365 - Obtained optimal value of K using Elbow curve successfully
INFO werkzeug 2020-07-13 13:35:44,365 - 127.0.0.1 - - [13/Jul/2020 13:35:44] "[37mPOST /clustering/elbow?uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-13 13:49:00,766 - Requested to get optimal k value
DEBUG admin 2020-07-13 13:49:00,766 - Reading datafile for optimal k value after elbow method
INFO admin 2020-07-13 13:49:00,766 - Get request for optimal k value served successfully
INFO werkzeug 2020-07-13 13:49:00,766 - 127.0.0.1 - - [13/Jul/2020 13:49:00] "[37mGET /clustering/elbow?uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-13 15:13:39,211 - Requested to extract data.
DEBUG admin 2020-07-13 15:13:39,211 - Extracted links and ISINs from JSON object.
INFO admin 2020-07-13 15:13:54,002 - Made entry for extracted data in datafile successfully.
INFO werkzeug 2020-07-13 15:13:54,002 - 127.0.0.1 - - [13/Jul/2020 15:13:54] "[37mPOST /extract?no_of_docs=10&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-13 15:21:45,109 - Requested to get extracted data.
DEBUG admin 2020-07-13 15:21:45,109 - Searching for requested datafile
INFO admin 2020-07-13 15:21:45,109 - Get request served successfully
INFO werkzeug 2020-07-13 15:21:45,124 - 127.0.0.1 - - [13/Jul/2020 15:21:45] "[37mGET /extract?uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-13 15:25:01,577 - Requested to extract data.
DEBUG admin 2020-07-13 15:25:01,577 - Extracted links and ISINs from JSON object.
INFO admin 2020-07-13 15:25:02,264 - Made entry for extracted data in datafile successfully.
INFO werkzeug 2020-07-13 15:25:02,264 - 127.0.0.1 - - [13/Jul/2020 15:25:02] "[37mPOST /extract?no_of_docs=1&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO werkzeug 2020-07-13 15:25:11,622 - 127.0.0.1 - - [13/Jul/2020 15:25:11] "[31m[1mGET /extract HTTP/1.1[0m" 400 -
INFO admin 2020-07-13 15:25:21,555 - Requested to get extracted data.
DEBUG admin 2020-07-13 15:25:21,556 - Searching for requested datafile
INFO admin 2020-07-13 15:25:21,556 - Get request served successfully
INFO werkzeug 2020-07-13 15:25:21,558 - 127.0.0.1 - - [13/Jul/2020 15:25:21] "[37mGET /extract?uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO werkzeug 2020-07-13 15:25:21,815 - 127.0.0.1 - - [13/Jul/2020 15:25:21] "[33mGET /favicon.ico HTTP/1.1[0m" 404 -
INFO admin 2020-07-13 15:28:50,133 - Requested to get extracted data.
DEBUG admin 2020-07-13 15:28:50,133 - Searching for requested datafile
ERROR admin 2020-07-13 15:28:50,133 - Exception occurred while reading datafile:IndexError('list index out of range')
Traceback (most recent call last):
  File "C:\Users\ASHWIN\Desktop\FinIQ\Assignments_FinIQ\NLP_Citi\pre-processing-and-API\api.py", line 161, in get
    data = ex.get_recent_file('extract_' + args['uname'] + '_' + fname)
  File "C:\Users\ASHWIN\Desktop\FinIQ\Assignments_FinIQ\NLP_Citi\pre-processing-and-API\extract.py", line 294, in get_recent_file
    return names[0]
IndexError: list index out of range
INFO werkzeug 2020-07-13 15:28:50,133 - 127.0.0.1 - - [13/Jul/2020 15:28:50] "[31m[1mGET /extract?uname=admin&fname=I_v3.xlsx HTTP/1.1[0m" 400 -
INFO admin 2020-07-13 16:11:09,607 - Requested to pre-process data.
DEBUG admin 2020-07-13 16:11:09,607 - Reading data from datafile
DEBUG admin 2020-07-13 16:11:09,607 - Pre-processing text data
DEBUG admin 2020-07-13 16:11:12,497 - Pre-processed data
DEBUG admin 2020-07-13 16:11:12,497 - Writting pre-processed data to datafile
DEBUG admin 2020-07-13 16:11:12,513 - Made entry of pre-processed data in datafile successfully
INFO werkzeug 2020-07-13 16:11:12,513 - 127.0.0.1 - - [13/Jul/2020 16:11:12] "[37mPOST /preprocess?steps=url&steps=stemming&steps=lemmatization&steps=stopwords&steps=unusual&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-13 16:14:23,225 - Requested to pre-process data.
DEBUG admin 2020-07-13 16:14:23,225 - Reading data from datafile
ERROR admin 2020-07-13 16:14:23,225 - Failed to read datafile
Traceback (most recent call last):
  File "C:\Users\ASHWIN\Desktop\FinIQ\Assignments_FinIQ\NLP_Citi\pre-processing-and-API\api.py", line 316, in post
    jsondata = ex.read_json(ex.get_recent_file('extract_' + args['uname'] + '_' + fname))
  File "C:\Users\ASHWIN\Desktop\FinIQ\Assignments_FinIQ\NLP_Citi\pre-processing-and-API\extract.py", line 294, in get_recent_file
    return names[0]
IndexError: list index out of range
INFO werkzeug 2020-07-13 16:14:23,225 - 127.0.0.1 - - [13/Jul/2020 16:14:23] "[31m[1mPOST /preprocess?steps=url&steps=stemming&steps=lemmatization&steps=stopwords&steps=unusual&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 400 -
INFO admin 2020-07-13 16:25:14,206 - Requested to get pre-processed data.
DEBUG admin 2020-07-13 16:25:14,206 - Reading pre-processed datafile
INFO admin 2020-07-13 16:25:14,206 - Get request for pre-processed data served successfully
INFO werkzeug 2020-07-13 16:25:14,206 - 127.0.0.1 - - [13/Jul/2020 16:25:14] "[37mGET /preprocess?uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-13 16:29:01,043 - Requested to extract data.
DEBUG admin 2020-07-13 16:29:01,043 - Extracted links and ISINs from JSON object.
INFO admin 2020-07-13 16:29:02,602 - Made entry for extracted data in datafile successfully.
INFO werkzeug 2020-07-13 16:29:02,602 - 127.0.0.1 - - [13/Jul/2020 16:29:02] "[37mPOST /extract?no_of_docs=1&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-13 16:29:18,066 - Requested to pre-process data.
DEBUG admin 2020-07-13 16:29:18,066 - Reading data from datafile
DEBUG admin 2020-07-13 16:29:18,066 - Pre-processing text data
DEBUG admin 2020-07-13 16:29:18,488 - Pre-processed data
DEBUG admin 2020-07-13 16:29:18,488 - Writting pre-processed data to datafile
DEBUG admin 2020-07-13 16:29:18,488 - Made entry of pre-processed data in datafile successfully
INFO werkzeug 2020-07-13 16:29:18,488 - 127.0.0.1 - - [13/Jul/2020 16:29:18] "[37mPOST /preprocess?steps=url&steps=stemming&steps=lemmatization&steps=stopwords&steps=unusual&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO werkzeug 2020-07-13 16:29:26,762 - 127.0.0.1 - - [13/Jul/2020 16:29:26] "[31m[1mGET /preprocess HTTP/1.1[0m" 400 -
INFO admin 2020-07-13 16:29:35,447 - Requested to get pre-processed data.
DEBUG admin 2020-07-13 16:29:35,447 - Reading pre-processed datafile
INFO admin 2020-07-13 16:29:35,448 - Get request for pre-processed data served successfully
INFO werkzeug 2020-07-13 16:29:35,449 - 127.0.0.1 - - [13/Jul/2020 16:29:35] "[37mGET /preprocess?uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-13 16:30:48,580 - Requested to extract data.
ERROR admin 2020-07-13 16:30:48,580 - Failed to extract links and ISINs from JSON object.
INFO werkzeug 2020-07-13 16:30:48,580 - 127.0.0.1 - - [13/Jul/2020 16:30:48] "[31m[1mPOST /extract?no_of_docs=10&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 400 -
INFO admin 2020-07-13 16:31:02,569 - Requested to extract data.
DEBUG admin 2020-07-13 16:31:02,569 - Extracted links and ISINs from JSON object.
INFO admin 2020-07-13 16:31:14,046 - Made entry for extracted data in datafile successfully.
INFO werkzeug 2020-07-13 16:31:14,046 - 127.0.0.1 - - [13/Jul/2020 16:31:14] "[37mPOST /extract?no_of_docs=10&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-13 16:31:26,205 - Requested to pre-process data.
DEBUG admin 2020-07-13 16:31:26,205 - Reading data from datafile
DEBUG admin 2020-07-13 16:31:26,205 - Pre-processing text data
DEBUG admin 2020-07-13 16:31:30,126 - Pre-processed data
DEBUG admin 2020-07-13 16:31:30,126 - Writting pre-processed data to datafile
DEBUG admin 2020-07-13 16:31:30,126 - Made entry of pre-processed data in datafile successfully
INFO werkzeug 2020-07-13 16:31:30,126 - 127.0.0.1 - - [13/Jul/2020 16:31:30] "[37mPOST /preprocess?steps=url&steps=stemming&steps=lemmatization&steps=stopwords&steps=unusual&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-13 16:31:34,886 - Requested to get pre-processed data.
DEBUG admin 2020-07-13 16:31:34,887 - Reading pre-processed datafile
INFO admin 2020-07-13 16:31:34,887 - Get request for pre-processed data served successfully
INFO werkzeug 2020-07-13 16:31:34,888 - 127.0.0.1 - - [13/Jul/2020 16:31:34] "[37mGET /preprocess?uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO werkzeug 2020-07-13 18:54:47,458 - 127.0.0.1 - - [13/Jul/2020 18:54:47] "[31m[1mGET /extract HTTP/1.1[0m" 400 -
INFO werkzeug 2020-07-13 18:55:11,926 - 127.0.0.1 - - [13/Jul/2020 18:55:11] "[31m[1mGET /extract?uname=admin HTTP/1.1[0m" 400 -
INFO admin 2020-07-13 19:00:33,902 - Requested to extract data.
DEBUG admin 2020-07-13 19:00:33,902 - Extracted links and ISINs from JSON object.
INFO admin 2020-07-13 19:00:41,611 - Made entry for extracted data in datafile successfully.
INFO werkzeug 2020-07-13 19:00:41,612 - 127.0.0.1 - - [13/Jul/2020 19:00:41] "[37mPOST /extract?no_of_docs=10&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-13 19:00:52,686 - Requested to pre-process data.
DEBUG admin 2020-07-13 19:00:52,686 - Reading data from datafile
DEBUG admin 2020-07-13 19:00:52,688 - Pre-processing text data
DEBUG admin 2020-07-13 19:00:58,078 - Pre-processed data
DEBUG admin 2020-07-13 19:00:58,078 - Writting pre-processed data to datafile
DEBUG admin 2020-07-13 19:00:58,079 - Made entry of pre-processed data in datafile successfully
INFO werkzeug 2020-07-13 19:00:58,080 - 127.0.0.1 - - [13/Jul/2020 19:00:58] "[37mPOST /preprocess?steps=url&steps=stemming&steps=lemmatization&steps=stopwords&steps=unusual&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-13 19:01:19,176 - Requested to cluster documents.
DEBUG admin 2020-07-13 19:01:19,176 - Reading datafile..
DEBUG admin 2020-07-13 19:01:19,177 - Setting default value of threshold for Variance Threshold to 0.0001
DEBUG admin 2020-07-13 19:01:19,177 - Setting default value of number of components for PCA to 0.8
DEBUG admin 2020-07-13 19:01:19,177 - Calculating tf-idf
DEBUG admin 2020-07-13 19:01:19,194 - Calculating variance threshold
DEBUG admin 2020-07-13 19:01:19,198 - Applying PCA
DEBUG admin 2020-07-13 19:01:19,204 - Applying K-Means algorithm
DEBUG admin 2020-07-13 19:01:19,225 - Sorting clusters
DEBUG admin 2020-07-13 19:01:19,225 - Converting to JSON format
DEBUG admin 2020-07-13 19:01:19,226 - Writting summary
DEBUG admin 2020-07-13 19:01:19,227 - Writting clustering information to datafile
INFO werkzeug 2020-07-13 19:01:19,228 - 127.0.0.1 - - [13/Jul/2020 19:01:19] "[37mPOST /clustering/kmeans?k=4&format=csv&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-13 21:03:14,246 - Requested to extract data.
DEBUG admin 2020-07-13 21:03:14,261 - Extracted links and ISINs from JSON object.
INFO admin 2020-07-13 21:03:25,394 - Made entry for extracted data in datafile successfully.
INFO werkzeug 2020-07-13 21:03:25,394 - 127.0.0.1 - - [13/Jul/2020 21:03:25] "[37mPOST /extract?no_of_docs=10&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-13 21:03:38,654 - Requested to export extracted data.
DEBUG admin 2020-07-13 21:03:38,657 - Checking if filepath has valid format
DEBUG admin 2020-07-13 21:03:38,657 - Exporting data to excel file
INFO admin 2020-07-13 21:03:38,706 - Exported successfully
ERROR admin 2020-07-13 21:03:38,707 - Exception occurred:FileNotFoundError(2, 'No such file or directory')
Traceback (most recent call last):
  File "C:\Users\ASHWIN\Desktop\FinIQ\Assignments_FinIQ\NLP_Citi\pre-processing-and-API\api.py", line 259, in post
    return send_file(ex.give_filename(args['filepath'].split('.')[0] + '_' + args['uname'] + '_' + args['fname'] + '.', args['filepath'].split('.')[1]))
  File "c:\python 3.8.2\lib\site-packages\flask\helpers.py", line 629, in send_file
    file = open(filename, "rb")
FileNotFoundError: [Errno 2] No such file or directory: 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\extract_admin_ISINS_v3.xlsx._13-07-2020_21-03-38xlsx'
INFO werkzeug 2020-07-13 21:03:38,708 - 127.0.0.1 - - [13/Jul/2020 21:03:38] "[31m[1mPOST /extract/export?filepath=extract.xlsx&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 400 -
INFO admin 2020-07-13 21:06:23,653 - Requested to export extracted data.
DEBUG admin 2020-07-13 21:06:23,656 - Checking if filepath has valid format
DEBUG admin 2020-07-13 21:06:23,656 - Exporting data to excel file
INFO admin 2020-07-13 21:06:23,779 - Exported successfully
ERROR admin 2020-07-13 21:06:23,779 - Exception occurred:FileNotFoundError(2, 'No such file or directory')
Traceback (most recent call last):
  File "C:\Users\ASHWIN\Desktop\FinIQ\Assignments_FinIQ\NLP_Citi\pre-processing-and-API\api.py", line 259, in post
    logger.info('Exported successfully')
  File "c:\python 3.8.2\lib\site-packages\flask\helpers.py", line 629, in send_file
    file = open(filename, "rb")
FileNotFoundError: [Errno 2] No such file or directory: 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\extract_admin_ISINS_v3.xlsx._13-07-2020_21-06-23xlsx'
INFO werkzeug 2020-07-13 21:06:23,781 - 127.0.0.1 - - [13/Jul/2020 21:06:23] "[31m[1mPOST /extract/export?filepath=extract.xlsx&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 400 -
INFO admin 2020-07-14 09:14:47,535 - Requested to extract data.
DEBUG admin 2020-07-14 09:14:47,582 - Extracted links and ISINs from JSON object.
INFO admin 2020-07-14 09:14:54,405 - Made entry for extracted data in datafile successfully.
INFO werkzeug 2020-07-14 09:14:54,421 - 127.0.0.1 - - [14/Jul/2020 09:14:54] "[37mPOST /extract?no_of_docs=10&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-14 09:15:12,353 - Requested to extract data.
DEBUG admin 2020-07-14 09:15:12,353 - Extracted links and ISINs from JSON object.
INFO admin 2020-07-14 09:15:50,829 - Made entry for extracted data in datafile successfully.
INFO werkzeug 2020-07-14 09:15:50,829 - 127.0.0.1 - - [14/Jul/2020 09:15:50] "[37mPOST /extract?no_of_docs=50&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-14 09:16:01,956 - Requested to pre-process data.
DEBUG admin 2020-07-14 09:16:01,956 - Reading data from datafile
DEBUG admin 2020-07-14 09:16:01,971 - Pre-processing text data
DEBUG admin 2020-07-14 09:16:26,115 - Pre-processed data
DEBUG admin 2020-07-14 09:16:26,115 - Writting pre-processed data to datafile
DEBUG admin 2020-07-14 09:16:26,130 - Made entry of pre-processed data in datafile successfully
INFO werkzeug 2020-07-14 09:16:26,130 - 127.0.0.1 - - [14/Jul/2020 09:16:26] "[37mPOST /preprocess?steps=url&steps=stemming&steps=lemmatization&steps=stopwords&steps=unusual&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-14 09:16:48,330 - Requested to cluster documents.
DEBUG admin 2020-07-14 09:16:48,330 - Reading datafile..
DEBUG admin 2020-07-14 09:16:48,330 - Setting default value of threshold for Variance Threshold to 0.0001
DEBUG admin 2020-07-14 09:16:48,330 - Setting default value of number of components for PCA to 0.8
DEBUG admin 2020-07-14 09:16:48,330 - Calculating tf-idf
DEBUG admin 2020-07-14 09:16:48,487 - Calculating variance threshold
DEBUG admin 2020-07-14 09:16:48,550 - Applying PCA
DEBUG admin 2020-07-14 09:16:48,800 - Applying K-Means algorithm
DEBUG admin 2020-07-14 09:16:48,940 - Sorting clusters
DEBUG admin 2020-07-14 09:16:48,940 - Converting to JSON format
DEBUG admin 2020-07-14 09:16:48,956 - Writting summary
DEBUG admin 2020-07-14 09:16:48,956 - Writting clustering information to datafile
INFO werkzeug 2020-07-14 09:16:48,971 - 127.0.0.1 - - [14/Jul/2020 09:16:48] "[37mPOST /clustering/kmeans?k=4&format=csv&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-14 09:17:33,382 - Requested to get clustering summary.
DEBUG admin 2020-07-14 09:17:33,382 - Reading datafile for clustering summary
INFO admin 2020-07-14 09:17:33,382 - Get request for clustering summary served successfully
DEBUG admin 2020-07-14 09:17:33,382 - Returning summary
INFO werkzeug 2020-07-14 09:17:33,382 - 127.0.0.1 - - [14/Jul/2020 09:17:33] "[37mGET /clustering/summary?uname=admin&content_type=summary HTTP/1.1[0m" 200 -
INFO admin 2020-07-14 09:24:15,133 - Requested to get clustering summary.
DEBUG admin 2020-07-14 09:24:15,133 - Reading datafile for clustering summary
INFO admin 2020-07-14 09:24:15,133 - Get request for clustering summary served successfully
DEBUG admin 2020-07-14 09:24:15,133 - Returning clustering details
INFO werkzeug 2020-07-14 09:24:15,133 - 127.0.0.1 - - [14/Jul/2020 09:24:15] "[37mGET /clustering/summary?uname=admin&content_type=clust HTTP/1.1[0m" 200 -
INFO werkzeug 2020-07-14 09:26:33,464 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-14 09:26:34,053 -  * Restarting with stat
INFO werkzeug 2020-07-14 09:26:37,599 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-14 09:26:37,839 -  * Restarting with stat
INFO werkzeug 2020-07-14 09:26:41,244 -  * Restarting with stat
INFO werkzeug 2020-07-14 09:26:44,975 -  * Restarting with stat
INFO werkzeug 2020-07-14 09:26:51,402 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-14 09:26:51,623 -  * Restarting with stat
INFO werkzeug 2020-07-14 09:26:55,106 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-14 09:26:55,365 -  * Restarting with stat
INFO werkzeug 2020-07-14 09:26:59,141 -  * Restarting with stat
INFO werkzeug 2020-07-14 09:27:03,896 -  * Restarting with stat
INFO werkzeug 2020-07-14 09:36:14,211 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-14 09:36:14,446 -  * Restarting with stat
INFO werkzeug 2020-07-14 09:45:43,918 - 127.0.0.1 - - [14/Jul/2020 09:45:43] "[35m[1mPOST /report?username=admin&kind=1 HTTP/1.1[0m" 500 -
INFO admin 2020-07-14 09:45:59,975 - Requested for report generation. Previous report deleted.
ERROR admin 2020-07-14 09:45:59,975 - Exception occurred:NameError("name 'p' is not defined")
Traceback (most recent call last):
  File "C:\Users\ASHWIN\Desktop\FinIQ\Assignments_FinIQ\NLP_Citi\pre-processing-and-API\api.py", line 1644, in post
    for a, b, c in os.walk(p):
NameError: name 'p' is not defined
INFO werkzeug 2020-07-14 09:45:59,975 - 127.0.0.1 - - [14/Jul/2020 09:45:59] "[31m[1mPOST /report?uname=admin&kind=1 HTTP/1.1[0m" 400 -
INFO werkzeug 2020-07-14 09:46:27,992 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-14 09:46:28,217 -  * Restarting with stat
INFO werkzeug 2020-07-14 09:46:31,696 -  * Restarting with stat
INFO admin 2020-07-14 09:46:34,789 - Requested for report generation. Previous report deleted.
DEBUG admin 2020-07-14 09:46:34,789 - Checking for json input
DEBUG admin 2020-07-14 09:46:34,789 - Fetching URLs
DEBUG admin 2020-07-14 09:46:34,789 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007930/dp108304_424b2-us1972721.htm URL
DEBUG admin 2020-07-14 09:46:36,893 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319008018/dp108385_424b2-us1972668.htm URL
DEBUG admin 2020-07-14 09:46:37,769 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319008084/dp108463_424b2-us1972667.htm URL
DEBUG admin 2020-07-14 09:46:38,789 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319009058/dp109430_424b2-us1972617.htm URL
DEBUG admin 2020-07-14 09:46:39,679 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007911/dp108280_424b2-us1972550.htm URL
DEBUG admin 2020-07-14 09:46:40,711 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319009050/dp109447_424b2-us1972547.htm URL
DEBUG admin 2020-07-14 09:46:41,621 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007828/dp108206_424b2-us1972545.htm URL
DEBUG admin 2020-07-14 09:46:42,594 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319009060/dp109497_424b2-us1972484.htm URL
DEBUG admin 2020-07-14 09:46:43,585 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007527/dp107872_fwp-us1972482.htm URL
DEBUG admin 2020-07-14 09:46:44,316 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007524/dp107870_fwp-us1972480.htm URL
DEBUG admin 2020-07-14 09:46:45,265 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319008572/dp109026_424b2-us1972369.htm URL
DEBUG admin 2020-07-14 09:46:46,078 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007525/dp107868_fwp-us1972350.htm URL
DEBUG admin 2020-07-14 09:46:46,859 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319009080/dp109492_424b2-us1972281.htm URL
DEBUG admin 2020-07-14 09:46:47,812 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007870/dp108232_424b2-us1972280.htm URL
DEBUG admin 2020-07-14 09:46:49,190 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007155/dp107611_424b2-us1972269.htm URL
DEBUG admin 2020-07-14 09:46:50,178 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319009048/dp109444_424b2-us1972158.htm URL
DEBUG admin 2020-07-14 09:46:51,069 - Using bruteforce method for report generation
INFO admin 2020-07-14 09:46:52,990 - Report generated successfully
INFO werkzeug 2020-07-14 09:46:52,990 - 127.0.0.1 - - [14/Jul/2020 09:46:52] "[37mPOST /report?uname=admin&kind=1 HTTP/1.1[0m" 200 -
INFO admin 2020-07-14 10:02:19,870 - Requested for report generation. Previous report deleted.
ERROR admin 2020-07-14 10:02:19,870 - Exception occurred:NameError("name 'p' is not defined")
Traceback (most recent call last):
  File "C:\Users\ASHWIN\Desktop\FinIQ\Assignments_FinIQ\NLP_Citi\pre-processing-and-API\api.py", line 1646, in post
    os.remove(os.path.join(p, user + '.json'))
NameError: name 'p' is not defined
INFO werkzeug 2020-07-14 10:02:19,870 - 127.0.0.1 - - [14/Jul/2020 10:02:19] "[31m[1mPOST /report?uname=admin&kind=10 HTTP/1.1[0m" 400 -
INFO admin 2020-07-14 10:02:32,551 - Requested for report generation. Previous report deleted.
ERROR admin 2020-07-14 10:02:32,551 - Exception occurred:NameError("name 'p' is not defined")
Traceback (most recent call last):
  File "C:\Users\ASHWIN\Desktop\FinIQ\Assignments_FinIQ\NLP_Citi\pre-processing-and-API\api.py", line 1646, in post
    os.remove(os.path.join(p, user + '.json'))
NameError: name 'p' is not defined
INFO werkzeug 2020-07-14 10:02:32,551 - 127.0.0.1 - - [14/Jul/2020 10:02:32] "[31m[1mPOST /report?uname=admin&kind=10 HTTP/1.1[0m" 400 -
INFO werkzeug 2020-07-14 10:02:43,582 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-14 10:02:43,797 -  * Restarting with stat
INFO admin 2020-07-14 10:02:48,524 - Requested for report generation. Previous report deleted.
DEBUG admin 2020-07-14 10:02:48,524 - Checking for json input
DEBUG admin 2020-07-14 10:02:48,524 - Fetching URLs
DEBUG admin 2020-07-14 10:02:48,524 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007930/dp108304_424b2-us1972721.htm URL
DEBUG admin 2020-07-14 10:02:49,726 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319008018/dp108385_424b2-us1972668.htm URL
DEBUG admin 2020-07-14 10:02:50,717 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319008084/dp108463_424b2-us1972667.htm URL
DEBUG admin 2020-07-14 10:02:51,576 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319009058/dp109430_424b2-us1972617.htm URL
DEBUG admin 2020-07-14 10:02:52,487 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007911/dp108280_424b2-us1972550.htm URL
DEBUG admin 2020-07-14 10:02:53,440 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319009050/dp109447_424b2-us1972547.htm URL
DEBUG admin 2020-07-14 10:02:54,467 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007828/dp108206_424b2-us1972545.htm URL
DEBUG admin 2020-07-14 10:02:55,267 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319009060/dp109497_424b2-us1972484.htm URL
DEBUG admin 2020-07-14 10:02:56,362 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007527/dp107872_fwp-us1972482.htm URL
DEBUG admin 2020-07-14 10:02:56,975 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007524/dp107870_fwp-us1972480.htm URL
DEBUG admin 2020-07-14 10:02:57,585 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319008572/dp109026_424b2-us1972369.htm URL
DEBUG admin 2020-07-14 10:02:58,637 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007525/dp107868_fwp-us1972350.htm URL
DEBUG admin 2020-07-14 10:02:59,301 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319009080/dp109492_424b2-us1972281.htm URL
DEBUG admin 2020-07-14 10:03:00,737 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007870/dp108232_424b2-us1972280.htm URL
DEBUG admin 2020-07-14 10:03:01,790 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007155/dp107611_424b2-us1972269.htm URL
DEBUG admin 2020-07-14 10:03:02,691 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319009048/dp109444_424b2-us1972158.htm URL
DEBUG admin 2020-07-14 10:03:03,757 - Invalid argument 'kind' entered
INFO werkzeug 2020-07-14 10:03:03,757 - 127.0.0.1 - - [14/Jul/2020 10:03:03] "[31m[1mPOST /report?uname=admin&kind=10 HTTP/1.1[0m" 400 -
INFO werkzeug 2020-07-14 10:03:42,266 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-14 10:03:42,492 -  * Restarting with stat
INFO werkzeug 2020-07-14 10:03:59,007 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-14 10:03:59,204 -  * Restarting with stat
INFO werkzeug 2020-07-14 10:04:26,592 - 127.0.0.1 - - [14/Jul/2020 10:04:26] "[35m[1mPOST /report?uname=admin&kind=10 HTTP/1.1[0m" 500 -
INFO werkzeug 2020-07-14 10:04:50,281 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-14 10:04:50,520 -  * Restarting with stat
INFO werkzeug 2020-07-14 10:05:29,156 - 127.0.0.1 - - [14/Jul/2020 10:05:29] "[35m[1mPOST /report?uname=admin&kind=10 HTTP/1.1[0m" 500 -
INFO werkzeug 2020-07-14 10:05:50,327 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-14 10:05:50,544 -  * Restarting with stat
INFO werkzeug 2020-07-14 10:05:55,414 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-14 10:05:55,617 -  * Restarting with stat
INFO admin 2020-07-14 10:05:58,803 - Requested for report generation. Previous report deleted.
DEBUG admin 2020-07-14 10:05:58,803 - Invalid argument 'kind' entered
INFO werkzeug 2020-07-14 10:05:58,803 - 127.0.0.1 - - [14/Jul/2020 10:05:58] "[31m[1mPOST /report?uname=admin&kind=10 HTTP/1.1[0m" 400 -
INFO admin 2020-07-14 10:11:11,160 - Requested for report generation.
DEBUG admin 2020-07-14 10:11:11,160 - Searching for JSON Dump
ERROR admin 2020-07-14 10:11:11,160 - Could not find the JSON Dump, the file is not prepared yet
INFO werkzeug 2020-07-14 10:11:11,160 - 127.0.0.1 - - [14/Jul/2020 10:11:11] "[31m[1mGET /report?uname=admin&kind=10 HTTP/1.1[0m" 400 -
INFO admin 2020-07-14 10:11:28,991 - Requested for report generation. Previous report deleted.
DEBUG admin 2020-07-14 10:11:28,991 - Invalid argument 'kind' entered
INFO werkzeug 2020-07-14 10:11:28,991 - 127.0.0.1 - - [14/Jul/2020 10:11:28] "[31m[1mPOST /report?uname=admin&kind=1 HTTP/1.1[0m" 400 -
INFO admin 2020-07-14 10:11:48,668 - Requested for report generation. Previous report deleted.
DEBUG admin 2020-07-14 10:11:48,668 - Invalid argument 'kind' entered
INFO werkzeug 2020-07-14 10:11:48,668 - 127.0.0.1 - - [14/Jul/2020 10:11:48] "[31m[1mPOST /report?uname=admin&kind=1 HTTP/1.1[0m" 400 -
INFO werkzeug 2020-07-14 10:12:24,714 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-14 10:12:24,931 -  * Restarting with stat
INFO werkzeug 2020-07-14 10:12:29,894 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-14 10:12:30,098 -  * Restarting with stat
INFO admin 2020-07-14 10:12:52,878 - Requested for report generation. Previous report deleted.
DEBUG admin 2020-07-14 10:12:52,878 - Invalid argument 'kind' entered
INFO werkzeug 2020-07-14 10:12:52,878 - 127.0.0.1 - - [14/Jul/2020 10:12:52] "[31m[1mPOST /report?uname=admin&kind=1 HTTP/1.1[0m" 400 -
INFO admin 2020-07-14 10:13:17,374 - Requested for report generation. Previous report deleted.
DEBUG admin 2020-07-14 10:13:17,374 - Invalid argument 'kind' entered
INFO werkzeug 2020-07-14 10:13:17,374 - 127.0.0.1 - - [14/Jul/2020 10:13:17] "[31m[1mPOST /report?uname=admin&kind=1 HTTP/1.1[0m" 400 -
INFO werkzeug 2020-07-14 10:13:31,476 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-14 10:13:31,693 -  * Restarting with stat
INFO admin 2020-07-14 10:13:54,699 - Requested for report generation. Previous report deleted.
DEBUG admin 2020-07-14 10:13:54,699 - Invalid argument 'kind' entered
INFO werkzeug 2020-07-14 10:13:54,699 - 127.0.0.1 - - [14/Jul/2020 10:13:54] "[31m[1mPOST /report?uname=admin&kind=1 HTTP/1.1[0m" 400 -
INFO werkzeug 2020-07-14 10:15:01,385 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-14 10:15:01,582 -  * Restarting with stat
INFO werkzeug 2020-07-14 10:15:04,920 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-14 10:15:05,216 -  * Restarting with stat
INFO admin 2020-07-14 10:15:08,496 - Requested for report generation. Previous report deleted.
DEBUG admin 2020-07-14 10:15:08,496 - Invalid argument 'kind' entered
INFO werkzeug 2020-07-14 10:15:08,496 - 127.0.0.1 - - [14/Jul/2020 10:15:08] "[31m[1mPOST /report?uname=admin&kind=1 HTTP/1.1[0m" 400 -
INFO werkzeug 2020-07-14 10:15:24,436 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-14 10:15:24,639 -  * Restarting with stat
INFO admin 2020-07-14 10:15:41,024 - Requested for report generation. Previous report deleted.
DEBUG admin 2020-07-14 10:15:41,024 - Checking for json input
DEBUG admin 2020-07-14 10:15:41,024 - Fetching URLs
DEBUG admin 2020-07-14 10:15:41,024 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007930/dp108304_424b2-us1972721.htm URL
DEBUG admin 2020-07-14 10:15:41,836 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319008018/dp108385_424b2-us1972668.htm URL
DEBUG admin 2020-07-14 10:15:42,394 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319008084/dp108463_424b2-us1972667.htm URL
DEBUG admin 2020-07-14 10:15:42,932 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319009058/dp109430_424b2-us1972617.htm URL
DEBUG admin 2020-07-14 10:15:43,479 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007911/dp108280_424b2-us1972550.htm URL
DEBUG admin 2020-07-14 10:15:44,106 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319009050/dp109447_424b2-us1972547.htm URL
DEBUG admin 2020-07-14 10:15:44,591 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007828/dp108206_424b2-us1972545.htm URL
DEBUG admin 2020-07-14 10:15:45,130 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319009060/dp109497_424b2-us1972484.htm URL
DEBUG admin 2020-07-14 10:15:45,715 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007527/dp107872_fwp-us1972482.htm URL
DEBUG admin 2020-07-14 10:15:46,043 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007524/dp107870_fwp-us1972480.htm URL
DEBUG admin 2020-07-14 10:15:46,371 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319008572/dp109026_424b2-us1972369.htm URL
DEBUG admin 2020-07-14 10:15:46,902 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007525/dp107868_fwp-us1972350.htm URL
DEBUG admin 2020-07-14 10:15:47,199 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319009080/dp109492_424b2-us1972281.htm URL
DEBUG admin 2020-07-14 10:15:47,887 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007870/dp108232_424b2-us1972280.htm URL
DEBUG admin 2020-07-14 10:15:48,496 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007155/dp107611_424b2-us1972269.htm URL
DEBUG admin 2020-07-14 10:15:49,002 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319009048/dp109444_424b2-us1972158.htm URL
DEBUG admin 2020-07-14 10:15:49,569 - Using bruteforce method for report generation
INFO admin 2020-07-14 10:15:51,210 - Report generated successfully
INFO werkzeug 2020-07-14 10:15:51,210 - 127.0.0.1 - - [14/Jul/2020 10:15:51] "[37mPOST /report?uname=admin&kind=1 HTTP/1.1[0m" 200 -
INFO admin 2020-07-14 10:16:14,057 - Requested for report generation.
DEBUG admin 2020-07-14 10:16:14,058 - Searching for JSON Dump
DEBUG admin 2020-07-14 10:16:14,058 - Found JSON Dump
DEBUG admin 2020-07-14 10:16:14,058 - Get request served successfully
INFO werkzeug 2020-07-14 10:16:14,059 - 127.0.0.1 - - [14/Jul/2020 10:16:14] "[37mGET /report?uname=admin&kind=1 HTTP/1.1[0m" 200 -
INFO werkzeug 2020-07-14 10:18:17,066 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-14 10:18:17,290 -  * Restarting with stat
INFO werkzeug 2020-07-14 10:18:20,617 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-14 10:18:20,848 -  * Restarting with stat
INFO werkzeug 2020-07-14 10:18:26,590 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-14 10:18:26,797 -  * Restarting with stat
INFO werkzeug 2020-07-14 10:18:30,222 -  * Restarting with stat
INFO admin 2020-07-14 10:19:06,228 - Requested for report generation.
DEBUG admin 2020-07-14 10:19:06,228 - Searching for JSON Dump
DEBUG admin 2020-07-14 10:19:06,228 - Found JSON Dump
DEBUG admin 2020-07-14 10:19:06,228 - Get request served successfully
INFO werkzeug 2020-07-14 10:19:06,228 - 127.0.0.1 - - [14/Jul/2020 10:19:06] "[37mGET /report?uname=admin&kind=1 HTTP/1.1[0m" 200 -
INFO werkzeug 2020-07-14 10:19:28,158 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-14 10:19:28,371 -  * Restarting with stat
INFO admin 2020-07-14 10:20:42,098 - Requested for report generation.
DEBUG admin 2020-07-14 10:20:42,098 - Searching for JSON Dump
DEBUG admin 2020-07-14 10:20:42,099 - Found JSON Dump
DEBUG admin 2020-07-14 10:20:42,099 - Get request served successfully
INFO werkzeug 2020-07-14 10:20:42,100 - 127.0.0.1 - - [14/Jul/2020 10:20:42] "[37mGET /report?uname=admin HTTP/1.1[0m" 200 -
INFO werkzeug 2020-07-14 10:20:42,299 - 127.0.0.1 - - [14/Jul/2020 10:20:42] "[33mGET /favicon.ico HTTP/1.1[0m" 404 -
INFO admin 2020-07-14 10:25:55,477 - Requested for report generation.
DEBUG admin 2020-07-14 10:25:55,477 - Searching for JSON Dump
ERROR admin 2020-07-14 10:25:55,477 - Could not find the JSON Dump, the file is not prepared yet
INFO werkzeug 2020-07-14 10:25:55,478 - 127.0.0.1 - - [14/Jul/2020 10:25:55] "[31m[1mGET /report?uname=admin HTTP/1.1[0m" 400 -
INFO werkzeug 2020-07-14 10:31:42,157 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-14 10:31:42,399 -  * Restarting with stat
INFO werkzeug 2020-07-14 10:32:23,964 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-14 10:32:24,190 -  * Restarting with stat
INFO admin 2020-07-14 10:33:24,424 - Requested to export pre-processed data.
DEBUG admin 2020-07-14 10:33:24,424 - Reading pre-processed datafile.
DEBUG admin 2020-07-14 10:33:24,424 - Exporting pre-processed data to excel file.
INFO admin 2020-07-14 10:33:24,471 - Exported pre-processed data successfully.
ERROR admin 2020-07-14 10:33:24,471 - Exception occurred: FileNotFoundError(2, 'No such file or directory')
Traceback (most recent call last):
  File "C:\Users\ASHWIN\Desktop\FinIQ\Assignments_FinIQ\NLP_Citi\pre-processing-and-API\api.py", line 483, in post
    return send_file(ex.give_filename(args['filepath'].split('.')[0] + '_' + args['uname'] + '_' + args['fname'] + '.', args['filepath'].split('.')[1]))
  File "c:\python 3.8.2\lib\site-packages\flask\helpers.py", line 629, in send_file
    file = open(filename, "rb")
FileNotFoundError: [Errno 2] No such file or directory: 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\prep_admin_ISINS_v3.xlsx._14-07-2020_10-33-24xlsx'
INFO werkzeug 2020-07-14 10:33:24,471 - 127.0.0.1 - - [14/Jul/2020 10:33:24] "[31m[1mPOST /preprocess/export?filepath=prep.xlsx&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 400 -
INFO werkzeug 2020-07-14 10:35:53,355 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-14 10:35:53,590 -  * Restarting with stat
INFO werkzeug 2020-07-14 10:35:58,423 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-14 10:35:58,645 -  * Restarting with stat
INFO werkzeug 2020-07-14 10:36:02,198 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-14 10:36:02,487 -  * Restarting with stat
INFO werkzeug 2020-07-14 10:36:06,479 -  * Restarting with stat
INFO werkzeug 2020-07-14 10:36:17,036 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-14 10:36:17,238 -  * Restarting with stat
INFO admin 2020-07-14 10:41:47,088 - Requested to export pre-processed data.
DEBUG admin 2020-07-14 10:41:47,088 - Reading pre-processed datafile.
DEBUG admin 2020-07-14 10:41:47,088 - Exporting pre-processed data to excel file.
INFO admin 2020-07-14 10:41:47,135 - Exported pre-processed data successfully.
ERROR admin 2020-07-14 10:41:47,135 - Exception occurred: FileNotFoundError(2, 'No such file or directory')
Traceback (most recent call last):
  File "C:\Users\ASHWIN\Desktop\FinIQ\Assignments_FinIQ\NLP_Citi\pre-processing-and-API\api.py", line 483, in post
    return send_file(ex.give_filename(args['filepath'].split('.')[0] + '_' + args['uname'] + '_' + args['fname'] + '.', args['filepath'].split('.')[1]))
  File "c:\python 3.8.2\lib\site-packages\flask\helpers.py", line 629, in send_file
    file = open(filename, "rb")
FileNotFoundError: [Errno 2] No such file or directory: 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\prep_admin_ISINS_v3.xlsx._14-07-2020_10-41-47xlsx'
INFO werkzeug 2020-07-14 10:41:47,135 - 127.0.0.1 - - [14/Jul/2020 10:41:47] "[31m[1mPOST /preprocess/export?filepath=prep.xlsx&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 400 -
INFO werkzeug 2020-07-14 10:42:53,530 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-14 10:42:53,765 -  * Restarting with stat
INFO admin 2020-07-14 10:44:25,676 - Requested to export pre-processed data.
DEBUG admin 2020-07-14 10:44:25,676 - Reading pre-processed datafile.
DEBUG admin 2020-07-14 10:44:25,676 - Exporting pre-processed data to excel file.
INFO admin 2020-07-14 10:44:25,707 - Exported pre-processed data successfully.
ERROR admin 2020-07-14 10:44:25,707 - Exception occurred: FileNotFoundError(2, 'No such file or directory')
Traceback (most recent call last):
  File "C:\Users\ASHWIN\Desktop\FinIQ\Assignments_FinIQ\NLP_Citi\pre-processing-and-API\api (2).py", line 483, in post
    return send_file(ex.give_filename(args['filepath'].split('.')[0] + '_' + args['uname'] + '_' + args['fname'] + '.', args['filepath'].split('.')[1]))
  File "c:\python 3.8.2\lib\site-packages\flask\helpers.py", line 629, in send_file
    file = open(filename, "rb")
FileNotFoundError: [Errno 2] No such file or directory: 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\prep_admin_ISINS_v3.xlsx._14-07-2020_10-44-25xlsx'
INFO werkzeug 2020-07-14 10:44:25,707 - 127.0.0.1 - - [14/Jul/2020 10:44:25] "[31m[1mPOST /preprocess/export?filepath=prep.xlsx&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 400 -
INFO werkzeug 2020-07-14 10:47:10,189 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-14 10:47:10,387 -  * Restarting with stat
INFO werkzeug 2020-07-14 10:47:33,825 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-14 10:47:34,060 -  * Restarting with stat
INFO admin 2020-07-14 10:47:40,646 - Requested to export pre-processed data.
DEBUG admin 2020-07-14 10:47:40,646 - Reading pre-processed datafile.
DEBUG admin 2020-07-14 10:47:40,661 - Exporting pre-processed data to excel file.
INFO admin 2020-07-14 10:47:40,692 - Exported pre-processed data successfully.
ERROR admin 2020-07-14 10:47:40,692 - Exception occurred: FileNotFoundError(2, 'No such file or directory')
Traceback (most recent call last):
  File "C:\Users\ASHWIN\Desktop\FinIQ\Assignments_FinIQ\NLP_Citi\pre-processing-and-API\api.py", line 483, in post
    return send_file(args['uname'] + '_' + args['fname'] + '_' + args['filepath'])
  File "c:\python 3.8.2\lib\site-packages\flask\helpers.py", line 629, in send_file
    file = open(filename, "rb")
FileNotFoundError: [Errno 2] No such file or directory: 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\admin_ISINS_v3.xlsx_prep.xlsx'
INFO werkzeug 2020-07-14 10:47:40,692 - 127.0.0.1 - - [14/Jul/2020 10:47:40] "[31m[1mPOST /preprocess/export?filepath=prep.xlsx&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 400 -
INFO admin 2020-07-14 10:47:55,982 - Requested to export extracted data.
DEBUG admin 2020-07-14 10:47:55,997 - Checking if filepath has valid format
DEBUG admin 2020-07-14 10:47:55,998 - Exporting data to excel file
INFO admin 2020-07-14 10:47:56,207 - Exported successfully
ERROR admin 2020-07-14 10:47:56,208 - Exception occurred:FileNotFoundError(2, 'No such file or directory')
Traceback (most recent call last):
  File "C:\Users\ASHWIN\Desktop\FinIQ\Assignments_FinIQ\NLP_Citi\pre-processing-and-API\api.py", line 259, in post
    return send_file(args['uname'] + '_' + args['fname'] + '_' + args['filepath'])
  File "c:\python 3.8.2\lib\site-packages\flask\helpers.py", line 629, in send_file
    file = open(filename, "rb")
FileNotFoundError: [Errno 2] No such file or directory: 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\admin_ISINS_v3.xlsx_extract.xlsx'
INFO werkzeug 2020-07-14 10:47:56,209 - 127.0.0.1 - - [14/Jul/2020 10:47:56] "[31m[1mPOST /extract/export?filepath=extract.xlsx&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 400 -
INFO werkzeug 2020-07-14 10:50:28,146 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\extract.py', reloading
INFO werkzeug 2020-07-14 10:50:28,406 -  * Restarting with stat
INFO werkzeug 2020-07-14 10:50:37,083 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\extract.py', reloading
INFO werkzeug 2020-07-14 10:50:37,290 -  * Restarting with stat
INFO werkzeug 2020-07-14 10:51:46,500 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-14 10:51:46,700 -  * Restarting with stat
INFO werkzeug 2020-07-14 10:52:04,545 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-14 10:52:04,749 -  * Restarting with stat
INFO werkzeug 2020-07-14 10:52:08,138 -  * Restarting with stat
INFO werkzeug 2020-07-14 10:52:41,804 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-14 10:52:42,010 -  * Restarting with stat
INFO werkzeug 2020-07-14 10:52:52,041 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-14 10:52:52,231 -  * Restarting with stat
INFO werkzeug 2020-07-14 10:52:55,830 -  * Restarting with stat
INFO werkzeug 2020-07-14 10:53:02,131 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-14 10:53:02,446 -  * Restarting with stat
INFO werkzeug 2020-07-14 10:53:11,600 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-14 10:53:11,793 -  * Restarting with stat
INFO werkzeug 2020-07-14 10:53:17,396 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-14 10:53:17,627 -  * Restarting with stat
INFO werkzeug 2020-07-14 10:53:23,436 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-14 10:53:23,654 -  * Restarting with stat
INFO werkzeug 2020-07-14 10:53:28,946 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-14 10:53:29,139 -  * Restarting with stat
INFO werkzeug 2020-07-14 10:53:34,846 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-14 10:53:35,038 -  * Restarting with stat
INFO werkzeug 2020-07-14 10:53:40,683 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-14 10:53:40,885 -  * Restarting with stat
INFO werkzeug 2020-07-14 10:53:46,459 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-14 10:53:46,773 -  * Restarting with stat
INFO werkzeug 2020-07-14 10:53:53,032 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-14 10:53:53,369 -  * Restarting with stat
INFO werkzeug 2020-07-14 10:53:59,291 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-14 10:53:59,628 -  * Restarting with stat
INFO werkzeug 2020-07-14 10:54:05,270 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-14 10:54:05,628 -  * Restarting with stat
INFO werkzeug 2020-07-14 10:54:11,001 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-14 10:54:11,328 -  * Restarting with stat
INFO werkzeug 2020-07-14 10:54:14,790 -  * Restarting with stat
INFO werkzeug 2020-07-14 10:54:20,352 -  * Restarting with stat
INFO werkzeug 2020-07-14 10:54:25,829 -  * Restarting with stat
INFO admin 2020-07-14 10:55:07,361 - Requested to extract data.
DEBUG admin 2020-07-14 10:55:07,361 - Extracted links and ISINs from JSON object.
INFO admin 2020-07-14 10:55:53,742 - Made entry for extracted data in datafile successfully.
INFO werkzeug 2020-07-14 10:55:53,742 - 127.0.0.1 - - [14/Jul/2020 10:55:53] "[37mPOST /extract?no_of_docs=50&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-14 10:56:01,964 - Requested to pre-process data.
DEBUG admin 2020-07-14 10:56:01,979 - Reading data from datafile
DEBUG admin 2020-07-14 10:56:01,979 - Pre-processing text data
DEBUG admin 2020-07-14 10:56:24,935 - Pre-processed data
DEBUG admin 2020-07-14 10:56:24,935 - Writting pre-processed data to datafile
DEBUG admin 2020-07-14 10:56:24,935 - Made entry of pre-processed data in datafile successfully
INFO werkzeug 2020-07-14 10:56:24,935 - 127.0.0.1 - - [14/Jul/2020 10:56:24] "[37mPOST /preprocess?steps=url&steps=stemming&steps=lemmatization&steps=stopwords&steps=unusual&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-14 10:56:40,483 - Requested to plot elbow curve.
DEBUG admin 2020-07-14 10:56:40,483 - Reading datafile..
DEBUG admin 2020-07-14 10:56:40,484 - Setting default value of threshold for Variance Threshold to 0.0001
DEBUG admin 2020-07-14 10:56:40,484 - Setting default value of number of components for PCA to 0.8
DEBUG admin 2020-07-14 10:56:40,484 - Calculating tf-idf
DEBUG admin 2020-07-14 10:56:40,517 - Calculating variance threshold
DEBUG admin 2020-07-14 10:56:40,523 - Applying PCA
DEBUG admin 2020-07-14 10:56:40,544 - Plotting elbow curve
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Times New Roman' (times.ttf) normal normal roman normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Corbel' (corbell.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Corbel' (corbell.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Candara' (Candaral.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Candara' (Candaral.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Calibri' (calibril.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal roman normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal black normal>) = 11.525
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal semibold normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,872 - findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Candara' (Candarali.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal medium normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal roman normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal semibold normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal medium normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal semibold normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal semibold normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal black normal>) = 11.525
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Calibri' (calibril.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Arial' (ariblk.ttf) normal normal black normal>) = 6.888636363636364
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Times New Roman' (times.ttf) normal normal roman normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Arial' (ariblk.ttf) normal normal black normal>) = 6.888636363636364
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Candara' (Candarali.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,888 - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('c:\\python 3.8.2\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Times New Roman' (times.ttf) normal normal roman normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Corbel' (corbell.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Corbel' (corbell.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Candara' (Candaral.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Candara' (Candaral.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Calibri' (calibril.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,981 - findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal roman normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal black normal>) = 11.525
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal semibold normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Candara' (Candarali.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal medium normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal roman normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal semibold normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal medium normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal semibold normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal semibold normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal black normal>) = 11.525
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Calibri' (calibril.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Arial' (ariblk.ttf) normal normal black normal>) = 6.888636363636364
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Times New Roman' (times.ttf) normal normal roman normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Arial' (ariblk.ttf) normal normal black normal>) = 6.888636363636364
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Candara' (Candarali.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-14 10:56:44,997 - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('c:\\python 3.8.2\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
DEBUG admin 2020-07-14 10:56:45,060 - Packing returned image as a stream of bytes to the Response object
INFO admin 2020-07-14 10:56:45,060 - Plotted elbow curve successfully
DEBUG admin 2020-07-14 10:56:45,060 - Writing optimal k value
INFO admin 2020-07-14 10:56:45,060 - Obtained optimal value of K using Elbow curve successfully
INFO werkzeug 2020-07-14 10:56:45,060 - 127.0.0.1 - - [14/Jul/2020 10:56:45] "[37mPOST /clustering/elbow?uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-14 10:56:47,779 - Requested to get optimal k value
DEBUG admin 2020-07-14 10:56:47,779 - Reading datafile for optimal k value after elbow method
INFO admin 2020-07-14 10:56:47,779 - Get request for optimal k value served successfully
INFO werkzeug 2020-07-14 10:56:47,779 - 127.0.0.1 - - [14/Jul/2020 10:56:47] "[37mGET /clustering/elbow?uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-14 10:56:47,794 - Requested for optimal value of K using Silhouette.
DEBUG admin 2020-07-14 10:56:47,794 - Reading datafile..
DEBUG admin 2020-07-14 10:56:47,794 - Setting default value of threshold for Variance Threshold to 0.0001
DEBUG admin 2020-07-14 10:56:47,794 - Setting default value of number of components for PCA to 0.8
DEBUG admin 2020-07-14 10:56:47,794 - Calculating tf-idf
DEBUG admin 2020-07-14 10:56:47,826 - Calculating variance threshold
DEBUG admin 2020-07-14 10:56:47,841 - Applying PCA
DEBUG admin 2020-07-14 10:56:47,857 - Applying silhouette coefficient
DEBUG admin 2020-07-14 10:56:47,857 - Plotting silhouette score
DEBUG admin 2020-07-14 10:56:48,560 - Packing returned image as a stream of bytes to the Response object
INFO admin 2020-07-14 10:56:48,560 - Plotted silhouette score successfully
DEBUG admin 2020-07-14 10:56:48,560 - Writting optimal k
INFO admin 2020-07-14 10:56:48,560 - Obtained optimal value of k using Silhouette score successfully
INFO werkzeug 2020-07-14 10:56:48,560 - 127.0.0.1 - - [14/Jul/2020 10:56:48] "[37mPOST /clustering/silhouette?uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-14 10:56:49,874 - Requested to get optimal k value
DEBUG admin 2020-07-14 10:56:49,874 - Reading datafile for optimal k value after silhouette
INFO admin 2020-07-14 10:56:49,874 - Get request for optimal k value served successfully
INFO werkzeug 2020-07-14 10:56:49,874 - 127.0.0.1 - - [14/Jul/2020 10:56:49] "[37mGET /clustering/silhouette?uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-14 10:57:14,805 - Requested to cluster documents.
DEBUG admin 2020-07-14 10:57:14,805 - Reading datafile..
DEBUG admin 2020-07-14 10:57:14,806 - Setting default value of threshold for Variance Threshold to 0.0001
DEBUG admin 2020-07-14 10:57:14,806 - Setting default value of number of components for PCA to 0.8
DEBUG admin 2020-07-14 10:57:14,806 - Calculating tf-idf
DEBUG admin 2020-07-14 10:57:14,837 - Calculating variance threshold
DEBUG admin 2020-07-14 10:57:14,842 - Applying PCA
DEBUG admin 2020-07-14 10:57:14,863 - Applying K-Means algorithm
DEBUG admin 2020-07-14 10:57:14,885 - Sorting clusters
DEBUG admin 2020-07-14 10:57:14,885 - Converting to JSON format
DEBUG admin 2020-07-14 10:57:14,886 - Writting summary
DEBUG admin 2020-07-14 10:57:14,888 - Writting clustering information to datafile
INFO werkzeug 2020-07-14 10:57:14,889 - 127.0.0.1 - - [14/Jul/2020 10:57:14] "[37mPOST /clustering/kmeans?k=4&format=csv&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-14 10:57:14,900 - Requested to get clustering details.
DEBUG admin 2020-07-14 10:57:14,900 - Reading datafile for clustered data
INFO admin 2020-07-14 10:57:14,900 - Get request for clustered data served successfully
INFO werkzeug 2020-07-14 10:57:14,901 - 127.0.0.1 - - [14/Jul/2020 10:57:14] "[37mGET /clustering/kmeans?uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-14 10:57:14,924 - Requested to get clustering summary.
DEBUG admin 2020-07-14 10:57:14,924 - Reading datafile for clustering summary
INFO admin 2020-07-14 10:57:14,924 - Get request for clustering summary served successfully
DEBUG admin 2020-07-14 10:57:14,924 - Returning summary
INFO werkzeug 2020-07-14 10:57:14,925 - 127.0.0.1 - - [14/Jul/2020 10:57:14] "[37mGET /clustering/summary?uname=admin HTTP/1.1[0m" 200 -
INFO admin 2020-07-14 10:57:14,941 - Requested to cluster documents.
DEBUG admin 2020-07-14 10:57:14,941 - Reading datafile..
DEBUG admin 2020-07-14 10:57:14,944 - Setting default value of threshold for Variance Threshold to 0.0001
DEBUG admin 2020-07-14 10:57:14,944 - Setting default value of number of components for PCA to 0.8
DEBUG admin 2020-07-14 10:57:14,944 - Calculating tf-idf
DEBUG admin 2020-07-14 10:57:14,970 - Calculating variance threshold
DEBUG admin 2020-07-14 10:57:14,975 - Applying PCA
DEBUG admin 2020-07-14 10:57:14,995 - Applying DBSCAN algorithm
DEBUG admin 2020-07-14 10:57:15,035 - Sorting clusters
DEBUG admin 2020-07-14 10:57:15,035 - Converting to JSON format
DEBUG admin 2020-07-14 10:57:15,035 - Writting summary
DEBUG admin 2020-07-14 10:57:15,035 - Writting clustering information to datafile
INFO werkzeug 2020-07-14 10:57:15,035 - 127.0.0.1 - - [14/Jul/2020 10:57:15] "[37mPOST /clustering/dbscan?eps=0.3&min=1&format=csv&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-14 10:57:15,045 - Requested to get clustering details.
DEBUG admin 2020-07-14 10:57:15,045 - Reading datafile for clustered data
INFO admin 2020-07-14 10:57:15,045 - Get request for clustered data served successfully
INFO werkzeug 2020-07-14 10:57:15,045 - 127.0.0.1 - - [14/Jul/2020 10:57:15] "[37mGET /clustering/dbscan?uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-14 10:57:15,065 - Requested to get clustering summary.
DEBUG admin 2020-07-14 10:57:15,065 - Reading datafile for clustering summary
INFO admin 2020-07-14 10:57:15,065 - Get request for clustering summary served successfully
DEBUG admin 2020-07-14 10:57:15,065 - Returning summary
INFO werkzeug 2020-07-14 10:57:15,065 - 127.0.0.1 - - [14/Jul/2020 10:57:15] "[37mGET /clustering/summary?uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-14 10:57:15,084 - Requested to cluster documents.
DEBUG admin 2020-07-14 10:57:15,084 - Reading datafile..
DEBUG admin 2020-07-14 10:57:15,084 - Setting default value of threshold for Variance Threshold to 0.0001
DEBUG admin 2020-07-14 10:57:15,084 - Setting default value of number of components for PCA to 0.8
DEBUG admin 2020-07-14 10:57:15,084 - Calculating tf-idf
DEBUG admin 2020-07-14 10:57:15,120 - Calculating variance threshold
DEBUG admin 2020-07-14 10:57:15,125 - Applying PCA
DEBUG admin 2020-07-14 10:57:15,145 - Applying Agglomerative algorithm
DEBUG admin 2020-07-14 10:57:15,205 - Sorting clusters
DEBUG admin 2020-07-14 10:57:15,205 - Converting to JSON format
DEBUG admin 2020-07-14 10:57:15,211 - Writting summary
DEBUG admin 2020-07-14 10:57:15,213 - Writting clustering information to datafile
INFO werkzeug 2020-07-14 10:57:15,215 - 127.0.0.1 - - [14/Jul/2020 10:57:15] "[37mPOST /clustering/agglomerative?k=5&format=csv&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-14 10:57:15,225 - Requested to get clustering details.
DEBUG admin 2020-07-14 10:57:15,225 - Reading datafile for clustered data
INFO admin 2020-07-14 10:57:15,225 - Get request for clustered data served successfully
INFO werkzeug 2020-07-14 10:57:15,225 - 127.0.0.1 - - [14/Jul/2020 10:57:15] "[37mGET /clustering/agglomerative?uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-14 10:57:15,245 - Requested to get clustering summary.
DEBUG admin 2020-07-14 10:57:15,245 - Reading datafile for clustering summary
INFO admin 2020-07-14 10:57:15,245 - Get request for clustering summary served successfully
DEBUG admin 2020-07-14 10:57:15,245 - Returning summary
INFO werkzeug 2020-07-14 10:57:15,245 - 127.0.0.1 - - [14/Jul/2020 10:57:15] "[37mGET /clustering/summary?uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-14 10:57:15,265 - Requested to cluster documents.
DEBUG admin 2020-07-14 10:57:15,265 - Reading datafile..
DEBUG admin 2020-07-14 10:57:15,265 - Setting default value of threshold for Variance Threshold to 0.0001
DEBUG admin 2020-07-14 10:57:15,265 - Setting default value of number of components for PCA to 0.8
DEBUG admin 2020-07-14 10:57:15,265 - Calculating tf-idf
DEBUG admin 2020-07-14 10:57:15,295 - Calculating variance threshold
DEBUG admin 2020-07-14 10:57:15,295 - Applying PCA
DEBUG admin 2020-07-14 10:57:15,320 - Applying Birch algorithm
DEBUG admin 2020-07-14 10:57:15,330 - Sorting clusters
DEBUG admin 2020-07-14 10:57:15,330 - Converting to JSON format
DEBUG admin 2020-07-14 10:57:15,335 - Writting summary
DEBUG admin 2020-07-14 10:57:15,335 - Writting clustering information to datafile
INFO werkzeug 2020-07-14 10:57:15,335 - 127.0.0.1 - - [14/Jul/2020 10:57:15] "[37mPOST /clustering/birch?k=5&format=csv&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-14 10:57:15,345 - Requested to get clustering details.
DEBUG admin 2020-07-14 10:57:15,345 - Reading datafile for clustered data
INFO admin 2020-07-14 10:57:15,345 - Get request for clustered data served successfully
INFO werkzeug 2020-07-14 10:57:15,345 - 127.0.0.1 - - [14/Jul/2020 10:57:15] "[37mGET /clustering/birch?uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-14 10:57:15,366 - Requested to get clustering summary.
DEBUG admin 2020-07-14 10:57:15,366 - Reading datafile for clustering summary
INFO admin 2020-07-14 10:57:15,366 - Get request for clustering summary served successfully
DEBUG admin 2020-07-14 10:57:15,367 - Returning summary
INFO werkzeug 2020-07-14 10:57:15,367 - 127.0.0.1 - - [14/Jul/2020 10:57:15] "[37mGET /clustering/summary?uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-14 10:57:51,036 - Logging off...deleting all cached files
ERROR admin 2020-07-14 10:57:51,036 - Exception occurred: FileNotFoundError(2, 'The system cannot find the path specified')
Traceback (most recent call last):
  File "C:\Users\ASHWIN\Desktop\FinIQ\Assignments_FinIQ\NLP_Citi\pre-processing-and-API\api.py", line 1577, in delete
    shutil.rmtree(path)
  File "c:\python 3.8.2\lib\shutil.py", line 737, in rmtree
    return _rmtree_unsafe(path, onerror)
  File "c:\python 3.8.2\lib\shutil.py", line 596, in _rmtree_unsafe
    onerror(os.scandir, path, sys.exc_info())
  File "c:\python 3.8.2\lib\shutil.py", line 593, in _rmtree_unsafe
    with os.scandir(path) as scandir_it:
FileNotFoundError: [WinError 3] The system cannot find the path specified: 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\__pycache__'
INFO werkzeug 2020-07-14 10:57:51,036 - 127.0.0.1 - - [14/Jul/2020 10:57:51] "[31m[1mDELETE /clear?uname=admin HTTP/1.1[0m" 400 -
INFO admin 2020-07-14 10:58:44,128 - Requested for report generation. Previous report deleted.
DEBUG admin 2020-07-14 10:58:44,128 - Checking for json input
DEBUG admin 2020-07-14 10:58:44,128 - Fetching URLs
DEBUG admin 2020-07-14 10:58:44,128 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007930/dp108304_424b2-us1972721.htm URL
DEBUG admin 2020-07-14 10:58:45,255 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319008018/dp108385_424b2-us1972668.htm URL
DEBUG admin 2020-07-14 10:58:46,007 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319008084/dp108463_424b2-us1972667.htm URL
DEBUG admin 2020-07-14 10:58:46,864 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319009058/dp109430_424b2-us1972617.htm URL
DEBUG admin 2020-07-14 10:58:47,678 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007911/dp108280_424b2-us1972550.htm URL
DEBUG admin 2020-07-14 10:58:48,648 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319009050/dp109447_424b2-us1972547.htm URL
DEBUG admin 2020-07-14 10:58:49,368 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007828/dp108206_424b2-us1972545.htm URL
DEBUG admin 2020-07-14 10:58:50,056 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319009060/dp109497_424b2-us1972484.htm URL
DEBUG admin 2020-07-14 10:58:51,186 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007527/dp107872_fwp-us1972482.htm URL
DEBUG admin 2020-07-14 10:58:51,510 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007524/dp107870_fwp-us1972480.htm URL
DEBUG admin 2020-07-14 10:58:51,823 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319008572/dp109026_424b2-us1972369.htm URL
DEBUG admin 2020-07-14 10:58:52,528 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007525/dp107868_fwp-us1972350.htm URL
DEBUG admin 2020-07-14 10:58:52,808 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319009080/dp109492_424b2-us1972281.htm URL
DEBUG admin 2020-07-14 10:58:54,029 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007870/dp108232_424b2-us1972280.htm URL
DEBUG admin 2020-07-14 10:58:55,118 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319007155/dp107611_424b2-us1972269.htm URL
DEBUG admin 2020-07-14 10:58:55,732 - Fetching https://www.sec.gov/Archives/edgar/data/831001/000095010319009048/dp109444_424b2-us1972158.htm URL
DEBUG admin 2020-07-14 10:58:56,466 - Using bruteforce method for report generation
INFO admin 2020-07-14 10:58:58,390 - Report generated successfully
INFO werkzeug 2020-07-14 10:58:58,390 - 127.0.0.1 - - [14/Jul/2020 10:58:58] "[37mPOST /report?uname=admin&kind=1 HTTP/1.1[0m" 200 -
INFO admin 2020-07-14 10:58:58,405 - Requested for report generation.
DEBUG admin 2020-07-14 10:58:58,405 - Searching for JSON Dump
DEBUG admin 2020-07-14 10:58:58,405 - Found JSON Dump
DEBUG admin 2020-07-14 10:58:58,405 - Get request served successfully
INFO werkzeug 2020-07-14 10:58:58,405 - 127.0.0.1 - - [14/Jul/2020 10:58:58] "[37mGET /report?uname=admin HTTP/1.1[0m" 200 -
INFO werkzeug 2020-07-14 11:00:26,692 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-14 11:00:27,179 -  * Restarting with stat
INFO werkzeug 2020-07-14 11:01:02,160 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-14 11:01:02,379 -  * Restarting with stat
INFO werkzeug 2020-07-14 11:01:06,394 -  * Restarting with stat
INFO admin 2020-07-14 11:01:57,462 - Requested to export extracted data.
ERROR admin 2020-07-14 11:01:57,462 - Exception occurred while reading datafile:TypeError("get_recent_file() missing 1 required positional argument: 'extension'")
Traceback (most recent call last):
  File "C:\Users\ASHWIN\Desktop\FinIQ\Assignments_FinIQ\NLP_Citi\pre-processing-and-API\api.py", line 227, in post
    jsondata = ex.read_json(ex.get_recent_file('extract_' + args['uname'] + '_' + fname))
TypeError: get_recent_file() missing 1 required positional argument: 'extension'
INFO werkzeug 2020-07-14 11:01:57,462 - 127.0.0.1 - - [14/Jul/2020 11:01:57] "[31m[1mPOST /extract/export?filepath=extract.xlsx&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 400 -
INFO werkzeug 2020-07-14 11:02:38,136 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-14 11:02:38,364 -  * Restarting with stat
INFO admin 2020-07-14 11:02:41,720 - Requested to export extracted data.
ERROR admin 2020-07-14 11:02:41,732 - Exception occurred:IndexError('list index out of range')
Traceback (most recent call last):
  File "C:\Users\ASHWIN\Desktop\FinIQ\Assignments_FinIQ\NLP_Citi\pre-processing-and-API\api.py", line 239, in post
    if os.path.exists(ex.get_recent_file(args['filepath'].split('.')[0] + '_' + args['uname'] + '_' + args['fname'], '.xlsx')):
  File "C:\Users\ASHWIN\Desktop\FinIQ\Assignments_FinIQ\NLP_Citi\pre-processing-and-API\extract.py", line 294, in get_recent_file
    return names[0]
IndexError: list index out of range
INFO werkzeug 2020-07-14 11:02:41,732 - 127.0.0.1 - - [14/Jul/2020 11:02:41] "[31m[1mPOST /extract/export?filepath=extract.xlsx&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 400 -
INFO admin 2020-07-14 11:03:14,814 - Requested to export extracted data.
ERROR admin 2020-07-14 11:03:14,829 - Exception occurred:IndexError('list index out of range')
Traceback (most recent call last):
  File "C:\Users\ASHWIN\Desktop\FinIQ\Assignments_FinIQ\NLP_Citi\pre-processing-and-API\api.py", line 239, in post
    if os.path.exists(ex.get_recent_file(args['filepath'].split('.')[0] + '_' + args['uname'] + '_' + args['fname'], '.xlsx')):
  File "C:\Users\ASHWIN\Desktop\FinIQ\Assignments_FinIQ\NLP_Citi\pre-processing-and-API\extract.py", line 294, in get_recent_file
    return names[0]
IndexError: list index out of range
INFO werkzeug 2020-07-14 11:03:14,829 - 127.0.0.1 - - [14/Jul/2020 11:03:14] "[31m[1mPOST /extract/export?filepath=extract.xlsx&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 400 -
INFO werkzeug 2020-07-14 11:04:41,376 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-14 11:04:41,588 -  * Restarting with stat
INFO werkzeug 2020-07-14 11:05:19,106 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-14 11:05:19,319 -  * Restarting with stat
INFO admin 2020-07-14 11:05:23,926 - Requested to export extracted data.
ERROR admin 2020-07-14 11:05:23,946 - Exception occurred:IndexError('list index out of range')
Traceback (most recent call last):
  File "C:\Users\ASHWIN\Desktop\FinIQ\Assignments_FinIQ\NLP_Citi\pre-processing-and-API\api.py", line 240, in post
    if os.path.exists(ex.get_recent_file(args['filepath'].split('.')[0] + '_' + args['uname'] + '_' + args['fname'], '.xlsx')):
  File "C:\Users\ASHWIN\Desktop\FinIQ\Assignments_FinIQ\NLP_Citi\pre-processing-and-API\extract.py", line 294, in get_recent_file
    return names[0]
IndexError: list index out of range
INFO werkzeug 2020-07-14 11:05:23,946 - 127.0.0.1 - - [14/Jul/2020 11:05:23] "[31m[1mPOST /extract/export?filepath=extract.xlsx&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 400 -
INFO werkzeug 2020-07-14 11:07:08,473 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\extract.py', reloading
INFO werkzeug 2020-07-14 11:07:08,676 -  * Restarting with stat
INFO werkzeug 2020-07-14 11:07:13,575 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\extract.py', reloading
INFO werkzeug 2020-07-14 11:07:13,790 -  * Restarting with stat
INFO admin 2020-07-14 11:08:06,710 - Requested to export extracted data.
ERROR admin 2020-07-14 11:08:06,725 - Exception occurred:TypeError('remove: path should be string, bytes or os.PathLike, not bool')
Traceback (most recent call last):
  File "C:\Users\ASHWIN\Desktop\FinIQ\Assignments_FinIQ\NLP_Citi\pre-processing-and-API\api.py", line 241, in post
    os.remove(ex.get_recent_file(args['filepath'].split('.')[0] + '_' + args['uname'] + '_' + args['fname'], '.xlsx'))
TypeError: remove: path should be string, bytes or os.PathLike, not bool
INFO werkzeug 2020-07-14 11:08:06,725 - 127.0.0.1 - - [14/Jul/2020 11:08:06] "[31m[1mPOST /extract/export?filepath=extract.xlsx&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 400 -
INFO werkzeug 2020-07-14 11:08:32,943 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\extract.py', reloading
INFO werkzeug 2020-07-14 11:08:33,147 -  * Restarting with stat
INFO admin 2020-07-14 11:08:42,275 - Requested to export extracted data.
DEBUG admin 2020-07-14 11:08:42,290 - Checking if filepath has valid format
DEBUG admin 2020-07-14 11:08:42,290 - Exporting data to excel file
INFO admin 2020-07-14 11:08:42,478 - Exported successfully
INFO werkzeug 2020-07-14 11:08:42,478 - 127.0.0.1 - - [14/Jul/2020 11:08:42] "[37mPOST /extract/export?filepath=extract.xlsx&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-14 11:10:03,055 - Requested to export extracted data.
DEBUG admin 2020-07-14 11:10:03,070 - Checking if filepath has valid format
DEBUG admin 2020-07-14 11:10:03,070 - Exporting data to excel file
INFO admin 2020-07-14 11:10:03,224 - Exported successfully
INFO werkzeug 2020-07-14 11:10:03,225 - 127.0.0.1 - - [14/Jul/2020 11:10:03] "[37mPOST /extract/export?filepath=extract.xlsx&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin 2020-07-14 11:11:15,200 - Requested to export pre-processed data.
DEBUG admin 2020-07-14 11:11:15,200 - Reading pre-processed datafile.
DEBUG admin 2020-07-14 11:11:15,201 - Exporting pre-processed data to excel file.
INFO admin 2020-07-14 11:11:16,275 - Exported pre-processed data successfully.
INFO werkzeug 2020-07-14 11:11:16,275 - 127.0.0.1 - - [14/Jul/2020 11:11:16] "[37mPOST /preprocess/export?filepath=prep.xlsx&uname=admin&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO werkzeug 2020-07-14 11:11:33,635 -  * Detected change in 'C:\\Users\\ASHWIN\\Desktop\\FinIQ\\Assignments_FinIQ\\NLP_Citi\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-14 11:11:33,845 -  * Restarting with stat
