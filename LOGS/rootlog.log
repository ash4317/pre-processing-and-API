INFO werkzeug 2020-07-10 10:23:10,918 -  * Restarting with stat
WARNING werkzeug 2020-07-10 10:23:27,941 -  * Debugger is active!
INFO werkzeug 2020-07-10 10:23:27,993 -  * Debugger PIN: 240-565-176
INFO werkzeug 2020-07-10 10:23:28,092 -  * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
INFO ram 2020-07-10 10:23:33,491 - Requested to extract data.
DEBUG ram 2020-07-10 10:23:33,491 - Extracted links and ISINs from JSON object.
INFO vaishnavi 2020-07-10 10:23:34,765 - Requested to extract data.
DEBUG vaishnavi 2020-07-10 10:23:34,765 - Extracted links and ISINs from JSON object.
INFO admin1 2020-07-10 10:23:36,752 - Requested to extract data.
DEBUG admin1 2020-07-10 10:23:36,776 - Extracted links and ISINs from JSON object.
INFO ram 2020-07-10 10:23:46,733 - Made entry for extracted data in datafile successfully.
INFO werkzeug 2020-07-10 10:23:46,737 - 127.0.0.1 - - [10/Jul/2020 10:23:46] "[37mPOST /extract?filepath=ISINS_v3.xlsx&no_of_docs=9&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 10:23:46,889 - Requested to export extracted data.
INFO ram 2020-07-10 10:23:49,058 - Exported successfully
INFO werkzeug 2020-07-10 10:23:49,062 - 127.0.0.1 - - [10/Jul/2020 10:23:49] "[37mPOST /extract/export?filepath=extract.xlsx&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 10:23:49,098 - Requested to pre-process data.
INFO vaishnavi 2020-07-10 10:23:56,851 - Made entry for extracted data in datafile successfully.
INFO werkzeug 2020-07-10 10:23:56,871 - 127.0.0.1 - - [10/Jul/2020 10:23:56] "[37mPOST /extract?filepath=ISINS_v3.xlsx&no_of_docs=15&uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO vaishnavi 2020-07-10 10:23:57,087 - Requested to export extracted data.
INFO admin1 2020-07-10 10:23:58,005 - Made entry for extracted data in datafile successfully.
INFO werkzeug 2020-07-10 10:23:58,009 - 127.0.0.1 - - [10/Jul/2020 10:23:58] "[37mPOST /extract?filepath=ISINS_v3.xlsx&no_of_docs=15&uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 10:23:58,065 - Requested to export extracted data.
INFO vaishnavi 2020-07-10 10:23:58,929 - Exported successfully
INFO werkzeug 2020-07-10 10:23:58,929 - 127.0.0.1 - - [10/Jul/2020 10:23:58] "[37mPOST /extract/export?filepath=extract.xlsx&uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO vaishnavi 2020-07-10 10:23:58,989 - Requested to pre-process data.
INFO admin1 2020-07-10 10:24:00,292 - Exported successfully
INFO werkzeug 2020-07-10 10:24:00,312 - 127.0.0.1 - - [10/Jul/2020 10:24:00] "[37mPOST /extract/export?filepath=extract.xlsx&uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 10:24:00,420 - Requested to pre-process data.
ERROR vaishnavi 2020-07-10 10:24:47,525 - Exception occurred: AttributeError("'WordNetCorpusReader' object has no attribute '_LazyCorpusLoader__args'")
Traceback (most recent call last):
  File "C:\Users\Personnal\Documents\FinIQ\NLP_Project\Another\API\pre-processing-and-API\api.py", line 286, in post
    data = cf.preprocessing(text, args['steps'])
  File "C:\Users\Personnal\Documents\FinIQ\NLP_Project\Another\API\pre-processing-and-API\clean_file.py", line 246, in preprocessing
    text = apply_lemmatization(text)
  File "C:\Users\Personnal\Documents\FinIQ\NLP_Project\Another\API\pre-processing-and-API\clean_file.py", line 113, in apply_lemmatization
    tokens = [lemmatizer.lemmatize(w) for w in tokens]
  File "C:\Users\Personnal\Documents\FinIQ\NLP_Project\Another\API\pre-processing-and-API\clean_file.py", line 113, in <listcomp>
    tokens = [lemmatizer.lemmatize(w) for w in tokens]
  File "C:\Users\Personnal\AppData\Local\Programs\Python\Python38\lib\site-packages\nltk\stem\wordnet.py", line 38, in lemmatize
    lemmas = wordnet._morphy(word, pos)
  File "C:\Users\Personnal\AppData\Local\Programs\Python\Python38\lib\site-packages\nltk\corpus\util.py", line 120, in __getattr__
    self.__load()
  File "C:\Users\Personnal\AppData\Local\Programs\Python\Python38\lib\site-packages\nltk\corpus\util.py", line 94, in __load
    args, kwargs = self.__args, self.__kwargs
AttributeError: 'WordNetCorpusReader' object has no attribute '_LazyCorpusLoader__args'
INFO werkzeug 2020-07-10 10:24:47,793 - 127.0.0.1 - - [10/Jul/2020 10:24:47] "[31m[1mPOST /preprocess?steps=url&steps=stemming&steps=lemmatization&steps=stopwords&steps=unusual&uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 400 -
INFO vaishnavi 2020-07-10 10:24:47,981 - Requested to export pre-processed data.
DEBUG vaishnavi 2020-07-10 10:24:47,993 - Reading pre-processed datafile.
ERROR vaishnavi 2020-07-10 10:24:48,053 - Error while reading pre-processed datafile.
INFO werkzeug 2020-07-10 10:24:48,057 - 127.0.0.1 - - [10/Jul/2020 10:24:48] "[31m[1mPOST /preprocess/export?filepath=prep.xlsx&uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 400 -
INFO vaishnavi 2020-07-10 10:24:48,193 - Requested to cluster documents.
DEBUG vaishnavi 2020-07-10 10:24:48,197 - Reading datafile..
ERROR vaishnavi 2020-07-10 10:24:48,261 - Failed to read datafile
Traceback (most recent call last):
  File "C:\Users\Personnal\Documents\FinIQ\NLP_Project\Another\API\pre-processing-and-API\api.py", line 486, in post
    jsondata = ex.read_json(ex.get_recent_file(args['uname'] + '_' + fname + '_' + 'preprocess'))
  File "C:\Users\Personnal\Documents\FinIQ\NLP_Project\Another\API\pre-processing-and-API\extract.py", line 290, in get_recent_file
    return names[0]
IndexError: list index out of range
INFO werkzeug 2020-07-10 10:24:48,365 - 127.0.0.1 - - [10/Jul/2020 10:24:48] "[31m[1mPOST /clustering/kmeans?k=4&format=csv&uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 400 -
ERROR admin1 2020-07-10 10:24:50,044 - Exception occurred: AttributeError("'WordNetCorpusReader' object has no attribute '_LazyCorpusLoader__args'")
Traceback (most recent call last):
  File "C:\Users\Personnal\Documents\FinIQ\NLP_Project\Another\API\pre-processing-and-API\api.py", line 286, in post
    data = cf.preprocessing(text, args['steps'])
  File "C:\Users\Personnal\Documents\FinIQ\NLP_Project\Another\API\pre-processing-and-API\clean_file.py", line 246, in preprocessing
    text = apply_lemmatization(text)
  File "C:\Users\Personnal\Documents\FinIQ\NLP_Project\Another\API\pre-processing-and-API\clean_file.py", line 113, in apply_lemmatization
    tokens = [lemmatizer.lemmatize(w) for w in tokens]
  File "C:\Users\Personnal\Documents\FinIQ\NLP_Project\Another\API\pre-processing-and-API\clean_file.py", line 113, in <listcomp>
    tokens = [lemmatizer.lemmatize(w) for w in tokens]
  File "C:\Users\Personnal\AppData\Local\Programs\Python\Python38\lib\site-packages\nltk\stem\wordnet.py", line 38, in lemmatize
    lemmas = wordnet._morphy(word, pos)
  File "C:\Users\Personnal\AppData\Local\Programs\Python\Python38\lib\site-packages\nltk\corpus\util.py", line 120, in __getattr__
    self.__load()
  File "C:\Users\Personnal\AppData\Local\Programs\Python\Python38\lib\site-packages\nltk\corpus\util.py", line 94, in __load
    args, kwargs = self.__args, self.__kwargs
AttributeError: 'WordNetCorpusReader' object has no attribute '_LazyCorpusLoader__args'
INFO werkzeug 2020-07-10 10:24:50,204 - 127.0.0.1 - - [10/Jul/2020 10:24:50] "[31m[1mPOST /preprocess?steps=url&steps=stemming&steps=lemmatization&steps=stopwords&steps=unusual&uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 400 -
INFO admin1 2020-07-10 10:24:50,296 - Requested to export pre-processed data.
DEBUG admin1 2020-07-10 10:24:50,304 - Reading pre-processed datafile.
ERROR admin1 2020-07-10 10:24:50,368 - Error while reading pre-processed datafile.
INFO werkzeug 2020-07-10 10:24:50,376 - 127.0.0.1 - - [10/Jul/2020 10:24:50] "[31m[1mPOST /preprocess/export?filepath=prep.xlsx&uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 400 -
INFO admin1 2020-07-10 10:24:50,500 - Requested to cluster documents.
DEBUG admin1 2020-07-10 10:24:50,516 - Reading datafile..
ERROR admin1 2020-07-10 10:24:50,564 - Failed to read datafile
Traceback (most recent call last):
  File "C:\Users\Personnal\Documents\FinIQ\NLP_Project\Another\API\pre-processing-and-API\api.py", line 486, in post
    jsondata = ex.read_json(ex.get_recent_file(args['uname'] + '_' + fname + '_' + 'preprocess'))
  File "C:\Users\Personnal\Documents\FinIQ\NLP_Project\Another\API\pre-processing-and-API\extract.py", line 290, in get_recent_file
    return names[0]
IndexError: list index out of range
INFO werkzeug 2020-07-10 10:24:50,596 - 127.0.0.1 - - [10/Jul/2020 10:24:50] "[31m[1mPOST /clustering/kmeans?k=4&format=csv&uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 400 -
DEBUG ram 2020-07-10 10:25:04,707 - Pre-processed data
DEBUG ram 2020-07-10 10:25:04,715 - Made entry of pre-processed data in datafile successfully
INFO werkzeug 2020-07-10 10:25:04,715 - 127.0.0.1 - - [10/Jul/2020 10:25:04] "[37mPOST /preprocess?steps=url&steps=stemming&steps=lemmatization&steps=stopwords&steps=unusual&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 10:25:04,743 - Requested to export pre-processed data.
DEBUG ram 2020-07-10 10:25:04,747 - Reading pre-processed datafile.
DEBUG ram 2020-07-10 10:25:04,791 - Exporting pre-processed data to excel file.
INFO ram 2020-07-10 10:25:05,011 - Exported pre-processed data successfully.
INFO werkzeug 2020-07-10 10:25:05,011 - 127.0.0.1 - - [10/Jul/2020 10:25:05] "[37mPOST /preprocess/export?filepath=prep.xlsx&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 10:25:05,035 - Requested to cluster documents.
DEBUG ram 2020-07-10 10:25:05,035 - Reading datafile..
DEBUG ram 2020-07-10 10:25:05,039 - Calculating tf-idf
DEBUG ram 2020-07-10 10:25:05,135 - Calculating variance threshold
DEBUG ram 2020-07-10 10:25:05,155 - Applying PCA
DEBUG ram 2020-07-10 10:25:05,199 - Applying K-Means algorithm
DEBUG ram 2020-07-10 10:25:05,331 - Sorting clusters
DEBUG ram 2020-07-10 10:25:05,335 - Converting to JSON format
DEBUG ram 2020-07-10 10:25:05,339 - Exporting clustering results
DEBUG ram 2020-07-10 10:25:05,343 - Writting summary
DEBUG ram 2020-07-10 10:25:05,347 - Writting clustering information to datafile
DEBUG ram 2020-07-10 10:25:05,351 - Getting scatter plot for clustered data
ERROR ram 2020-07-10 10:25:05,562 - Exception occurred: ValueError('s must be a scalar, or the same size as x and y')
Traceback (most recent call last):
  File "C:\Users\Personnal\Documents\FinIQ\NLP_Project\Another\API\pre-processing-and-API\api.py", line 543, in post
    fig = kmeans.visualize_scatter(args['k'], ratio)
  File "C:\Users\Personnal\Documents\FinIQ\NLP_Project\Another\API\pre-processing-and-API\kmeans.py", line 43, in visualize_scatter
    plt.scatter(tfidf[:, 0], tfidf[:, 1], c=y_kmeans, s=sval, cmap='viridis')
  File "C:\Users\Personnal\AppData\Local\Programs\Python\Python38\lib\site-packages\matplotlib\pyplot.py", line 2811, in scatter
    __ret = gca().scatter(
  File "C:\Users\Personnal\AppData\Local\Programs\Python\Python38\lib\site-packages\matplotlib\__init__.py", line 1565, in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
  File "C:\Users\Personnal\AppData\Local\Programs\Python\Python38\lib\site-packages\matplotlib\cbook\deprecation.py", line 358, in wrapper
    return func(*args, **kwargs)
  File "C:\Users\Personnal\AppData\Local\Programs\Python\Python38\lib\site-packages\matplotlib\axes\_axes.py", line 4398, in scatter
    raise ValueError("s must be a scalar, or the same size as x and y")
ValueError: s must be a scalar, or the same size as x and y
INFO werkzeug 2020-07-10 10:25:05,706 - 127.0.0.1 - - [10/Jul/2020 10:25:05] "[31m[1mPOST /clustering/kmeans?k=4&format=csv&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 400 -
INFO ram 2020-07-10 10:32:12,387 - Requested to extract data.
DEBUG ram 2020-07-10 10:32:12,387 - Extracted links and ISINs from JSON object.
INFO ram 2020-07-10 10:32:20,147 - Made entry for extracted data in datafile successfully.
INFO werkzeug 2020-07-10 10:32:20,147 - 127.0.0.1 - - [10/Jul/2020 10:32:20] "[37mPOST /extract?filepath=ISINS_v3.xlsx&no_of_docs=9&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 10:32:20,183 - Requested to export extracted data.
INFO ram 2020-07-10 10:32:20,624 - Exported successfully
INFO werkzeug 2020-07-10 10:32:20,624 - 127.0.0.1 - - [10/Jul/2020 10:32:20] "[37mPOST /extract/export?filepath=extract.xlsx&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 10:32:20,648 - Requested to pre-process data.
DEBUG ram 2020-07-10 10:32:44,899 - Pre-processed data
DEBUG ram 2020-07-10 10:32:44,903 - Made entry of pre-processed data in datafile successfully
INFO werkzeug 2020-07-10 10:32:44,907 - 127.0.0.1 - - [10/Jul/2020 10:32:44] "[37mPOST /preprocess?steps=url&steps=stemming&steps=lemmatization&steps=stopwords&steps=unusual&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 10:32:44,935 - Requested to export pre-processed data.
DEBUG ram 2020-07-10 10:32:44,935 - Reading pre-processed datafile.
DEBUG ram 2020-07-10 10:32:44,943 - Exporting pre-processed data to excel file.
INFO ram 2020-07-10 10:32:45,131 - Exported pre-processed data successfully.
INFO werkzeug 2020-07-10 10:32:45,135 - 127.0.0.1 - - [10/Jul/2020 10:32:45] "[37mPOST /preprocess/export?filepath=prep.xlsx&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 10:32:45,163 - Requested to cluster documents.
DEBUG ram 2020-07-10 10:32:45,163 - Reading datafile..
DEBUG ram 2020-07-10 10:32:45,167 - Calculating tf-idf
DEBUG ram 2020-07-10 10:32:45,247 - Calculating variance threshold
DEBUG ram 2020-07-10 10:32:45,271 - Applying PCA
DEBUG ram 2020-07-10 10:32:45,319 - Applying K-Means algorithm
DEBUG ram 2020-07-10 10:32:45,459 - Sorting clusters
DEBUG ram 2020-07-10 10:32:45,463 - Converting to JSON format
DEBUG ram 2020-07-10 10:32:45,467 - Exporting clustering results
DEBUG ram 2020-07-10 10:32:45,471 - Writting summary
DEBUG ram 2020-07-10 10:32:45,475 - Writting clustering information to datafile
DEBUG ram 2020-07-10 10:32:45,479 - Getting scatter plot for clustered data
ERROR ram 2020-07-10 10:32:45,651 - Exception occurred: ValueError('s must be a scalar, or the same size as x and y')
Traceback (most recent call last):
  File "C:\Users\Personnal\Documents\FinIQ\NLP_Project\Another\API\pre-processing-and-API\api.py", line 543, in post
    fig = kmeans.visualize_scatter(args['k'], ratio)
  File "C:\Users\Personnal\Documents\FinIQ\NLP_Project\Another\API\pre-processing-and-API\kmeans.py", line 43, in visualize_scatter
    plt.scatter(tfidf[:, 0], tfidf[:, 1], c=y_kmeans, s=sval, cmap='viridis')
  File "C:\Users\Personnal\AppData\Local\Programs\Python\Python38\lib\site-packages\matplotlib\pyplot.py", line 2811, in scatter
    __ret = gca().scatter(
  File "C:\Users\Personnal\AppData\Local\Programs\Python\Python38\lib\site-packages\matplotlib\__init__.py", line 1565, in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
  File "C:\Users\Personnal\AppData\Local\Programs\Python\Python38\lib\site-packages\matplotlib\cbook\deprecation.py", line 358, in wrapper
    return func(*args, **kwargs)
  File "C:\Users\Personnal\AppData\Local\Programs\Python\Python38\lib\site-packages\matplotlib\axes\_axes.py", line 4398, in scatter
    raise ValueError("s must be a scalar, or the same size as x and y")
ValueError: s must be a scalar, or the same size as x and y
INFO werkzeug 2020-07-10 10:32:45,659 - 127.0.0.1 - - [10/Jul/2020 10:32:45] "[31m[1mPOST /clustering/kmeans?k=4&format=csv&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 400 -
INFO werkzeug 2020-07-10 10:36:22,354 -  * Detected change in 'C:\\Users\\Personnal\\Documents\\FinIQ\\NLP_Project\\Another\\API\\pre-processing-and-API\\kmeans.py', reloading
INFO werkzeug 2020-07-10 10:36:25,514 -  * Restarting with stat
WARNING werkzeug 2020-07-10 10:36:39,883 -  * Debugger is active!
INFO werkzeug 2020-07-10 10:36:39,923 -  * Debugger PIN: 240-565-176
INFO werkzeug 2020-07-10 10:36:39,987 -  * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
INFO ram 2020-07-10 10:36:54,020 - Requested to extract data.
DEBUG ram 2020-07-10 10:36:54,024 - Extracted links and ISINs from JSON object.
INFO ram 2020-07-10 10:37:00,547 - Made entry for extracted data in datafile successfully.
INFO werkzeug 2020-07-10 10:37:00,551 - 127.0.0.1 - - [10/Jul/2020 10:37:00] "[37mPOST /extract?filepath=ISINS_v3.xlsx&no_of_docs=9&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 10:37:00,579 - Requested to export extracted data.
INFO ram 2020-07-10 10:37:01,001 - Exported successfully
INFO werkzeug 2020-07-10 10:37:01,005 - 127.0.0.1 - - [10/Jul/2020 10:37:01] "[37mPOST /extract/export?filepath=extract.xlsx&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 10:37:01,037 - Requested to pre-process data.
DEBUG ram 2020-07-10 10:37:37,556 - Pre-processed data
DEBUG ram 2020-07-10 10:37:37,564 - Made entry of pre-processed data in datafile successfully
INFO werkzeug 2020-07-10 10:37:37,568 - 127.0.0.1 - - [10/Jul/2020 10:37:37] "[37mPOST /preprocess?steps=url&steps=stemming&steps=lemmatization&steps=stopwords&steps=unusual&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 10:37:37,600 - Requested to export pre-processed data.
DEBUG ram 2020-07-10 10:37:37,600 - Reading pre-processed datafile.
DEBUG ram 2020-07-10 10:37:37,708 - Exporting pre-processed data to excel file.
INFO ram 2020-07-10 10:37:37,915 - Exported pre-processed data successfully.
INFO werkzeug 2020-07-10 10:37:37,915 - 127.0.0.1 - - [10/Jul/2020 10:37:37] "[37mPOST /preprocess/export?filepath=prep.xlsx&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 10:37:37,947 - Requested to cluster documents.
DEBUG ram 2020-07-10 10:37:37,947 - Reading datafile..
DEBUG ram 2020-07-10 10:37:37,951 - Calculating tf-idf
DEBUG ram 2020-07-10 10:37:38,091 - Calculating variance threshold
DEBUG ram 2020-07-10 10:37:38,123 - Applying PCA
DEBUG ram 2020-07-10 10:37:38,179 - Applying K-Means algorithm
DEBUG ram 2020-07-10 10:37:38,347 - Sorting clusters
DEBUG ram 2020-07-10 10:37:38,351 - Converting to JSON format
DEBUG ram 2020-07-10 10:37:38,359 - Exporting clustering results
DEBUG ram 2020-07-10 10:37:38,363 - Writting summary
DEBUG ram 2020-07-10 10:37:38,367 - Writting clustering information to datafile
DEBUG ram 2020-07-10 10:37:38,371 - Getting scatter plot for clustered data
ERROR ram 2020-07-10 10:37:38,527 - Exception occurred: TypeError('only size-1 arrays can be converted to Python scalars')
Traceback (most recent call last):
  File "C:\Users\Personnal\Documents\FinIQ\NLP_Project\Another\API\pre-processing-and-API\api.py", line 543, in post
    fig = kmeans.visualize_scatter(args['k'], ratio)
  File "C:\Users\Personnal\Documents\FinIQ\NLP_Project\Another\API\pre-processing-and-API\kmeans.py", line 43, in visualize_scatter
    plt.scatter(tfidf[:, 0], tfidf[:, 1], c=y_kmeans, s=int(sval), cmap='viridis')
TypeError: only size-1 arrays can be converted to Python scalars
INFO werkzeug 2020-07-10 10:37:38,531 - 127.0.0.1 - - [10/Jul/2020 10:37:38] "[31m[1mPOST /clustering/kmeans?k=4&format=csv&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 400 -
INFO werkzeug 2020-07-10 10:38:37,046 -  * Detected change in 'C:\\Users\\Personnal\\Documents\\FinIQ\\NLP_Project\\Another\\API\\pre-processing-and-API\\kmeans.py', reloading
INFO werkzeug 2020-07-10 10:38:39,088 -  * Restarting with stat
WARNING werkzeug 2020-07-10 10:38:59,840 -  * Debugger is active!
INFO werkzeug 2020-07-10 10:38:59,936 -  * Debugger PIN: 240-565-176
INFO werkzeug 2020-07-10 10:39:00,032 -  * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
INFO werkzeug 2020-07-10 10:41:48,801 -  * Detected change in 'C:\\Users\\Personnal\\Documents\\FinIQ\\NLP_Project\\Another\\API\\pre-processing-and-API\\kmeans.py', reloading
INFO werkzeug 2020-07-10 10:41:49,200 -  * Restarting with stat
WARNING werkzeug 2020-07-10 10:41:54,632 -  * Debugger is active!
INFO werkzeug 2020-07-10 10:41:54,643 -  * Debugger PIN: 240-565-176
INFO werkzeug 2020-07-10 10:41:54,661 -  * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
INFO werkzeug 2020-07-10 10:42:25,539 -  * Detected change in 'C:\\Users\\Personnal\\Documents\\FinIQ\\NLP_Project\\Another\\API\\pre-processing-and-API\\kmeans.py', reloading
INFO werkzeug 2020-07-10 10:42:26,010 -  * Restarting with stat
WARNING werkzeug 2020-07-10 10:42:32,431 -  * Debugger is active!
INFO werkzeug 2020-07-10 10:42:32,454 -  * Debugger PIN: 240-565-176
INFO werkzeug 2020-07-10 10:42:32,483 -  * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
INFO werkzeug 2020-07-10 10:45:21,206 -  * Detected change in 'C:\\Users\\Personnal\\Documents\\FinIQ\\NLP_Project\\Another\\API\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-10 10:45:21,668 -  * Restarting with stat
INFO werkzeug 2020-07-10 10:52:43,693 -  * Restarting with stat
WARNING werkzeug 2020-07-10 10:52:49,164 -  * Debugger is active!
INFO werkzeug 2020-07-10 10:52:49,177 -  * Debugger PIN: 240-565-176
INFO werkzeug 2020-07-10 10:52:49,195 -  * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
INFO ram 2020-07-10 10:52:55,723 - Requested to extract data.
DEBUG ram 2020-07-10 10:52:55,724 - Extracted links and ISINs from JSON object.
INFO ram 2020-07-10 10:53:05,863 - Made entry for extracted data in datafile successfully.
INFO werkzeug 2020-07-10 10:53:05,865 - 127.0.0.1 - - [10/Jul/2020 10:53:05] "[37mPOST /extract?filepath=ISINS_v3.xlsx&no_of_docs=9&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 10:53:05,876 - Requested to export extracted data.
INFO ram 2020-07-10 10:53:06,085 - Exported successfully
INFO werkzeug 2020-07-10 10:53:06,086 - 127.0.0.1 - - [10/Jul/2020 10:53:06] "[37mPOST /extract/export?filepath=extract.xlsx&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 10:53:06,097 - Requested to pre-process data.
DEBUG ram 2020-07-10 10:53:19,049 - Pre-processed data
DEBUG ram 2020-07-10 10:53:19,051 - Made entry of pre-processed data in datafile successfully
INFO werkzeug 2020-07-10 10:53:19,052 - 127.0.0.1 - - [10/Jul/2020 10:53:19] "[37mPOST /preprocess?steps=url&steps=stemming&steps=lemmatization&steps=stopwords&steps=unusual&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 10:53:19,065 - Requested to export pre-processed data.
DEBUG ram 2020-07-10 10:53:19,065 - Reading pre-processed datafile.
DEBUG ram 2020-07-10 10:53:19,081 - Exporting pre-processed data to excel file.
INFO ram 2020-07-10 10:53:19,299 - Exported pre-processed data successfully.
INFO werkzeug 2020-07-10 10:53:19,300 - 127.0.0.1 - - [10/Jul/2020 10:53:19] "[37mPOST /preprocess/export?filepath=prep.xlsx&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 10:53:19,334 - Requested to cluster documents.
DEBUG ram 2020-07-10 10:53:19,334 - Reading datafile..
DEBUG ram 2020-07-10 10:53:19,335 - Calculating tf-idf
DEBUG ram 2020-07-10 10:53:19,366 - Calculating variance threshold
DEBUG ram 2020-07-10 10:53:19,374 - Applying PCA
DEBUG ram 2020-07-10 10:53:19,391 - Applying K-Means algorithm
DEBUG ram 2020-07-10 10:53:19,434 - Sorting clusters
DEBUG ram 2020-07-10 10:53:19,435 - Converting to JSON format
DEBUG ram 2020-07-10 10:53:19,437 - Exporting clustering results
DEBUG ram 2020-07-10 10:53:19,439 - Writting summary
DEBUG ram 2020-07-10 10:53:19,440 - Writting clustering information to datafile
DEBUG ram 2020-07-10 10:53:19,442 - Getting scatter plot for clustered data
ERROR ram 2020-07-10 10:53:19,442 - Exception occurred: NameError("name 'fig' is not defined")
Traceback (most recent call last):
  File "C:\Users\Personnal\Documents\FinIQ\NLP_Project\Another\API\pre-processing-and-API\api.py", line 540, in post
    canvas = FigureCanvas(fig)
NameError: name 'fig' is not defined
INFO werkzeug 2020-07-10 10:53:19,489 - 127.0.0.1 - - [10/Jul/2020 10:53:19] "[31m[1mPOST /clustering/kmeans?k=4&format=csv&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 400 -
INFO werkzeug 2020-07-10 11:13:07,591 -  * Detected change in 'C:\\Users\\Personnal\\Documents\\FinIQ\\NLP_Project\\Another\\API\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-10 11:13:08,327 -  * Restarting with stat
WARNING werkzeug 2020-07-10 11:13:31,306 -  * Debugger is active!
INFO werkzeug 2020-07-10 11:13:31,329 -  * Debugger PIN: 240-565-176
INFO werkzeug 2020-07-10 11:13:31,362 -  * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
INFO ram 2020-07-10 11:13:31,954 - Requested to extract data.
DEBUG ram 2020-07-10 11:13:31,954 - Extracted links and ISINs from JSON object.
INFO ram 2020-07-10 11:13:36,827 - Made entry for extracted data in datafile successfully.
INFO werkzeug 2020-07-10 11:13:36,828 - 127.0.0.1 - - [10/Jul/2020 11:13:36] "[37mPOST /extract?filepath=ISINS_v3.xlsx&no_of_docs=9&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:13:36,838 - Requested to export extracted data.
INFO ram 2020-07-10 11:13:37,036 - Exported successfully
INFO werkzeug 2020-07-10 11:13:37,037 - 127.0.0.1 - - [10/Jul/2020 11:13:37] "[37mPOST /extract/export?filepath=extract.xlsx&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:13:37,048 - Requested to pre-process data.
DEBUG ram 2020-07-10 11:13:50,062 - Pre-processed data
DEBUG ram 2020-07-10 11:13:50,064 - Made entry of pre-processed data in datafile successfully
INFO werkzeug 2020-07-10 11:13:50,065 - 127.0.0.1 - - [10/Jul/2020 11:13:50] "[37mPOST /preprocess?steps=url&steps=stemming&steps=lemmatization&steps=stopwords&steps=unusual&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:13:50,077 - Requested to export pre-processed data.
DEBUG ram 2020-07-10 11:13:50,077 - Reading pre-processed datafile.
DEBUG ram 2020-07-10 11:13:50,090 - Exporting pre-processed data to excel file.
INFO ram 2020-07-10 11:13:50,225 - Exported pre-processed data successfully.
INFO werkzeug 2020-07-10 11:13:50,226 - 127.0.0.1 - - [10/Jul/2020 11:13:50] "[37mPOST /preprocess/export?filepath=prep.xlsx&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:13:50,237 - Requested to cluster documents.
DEBUG ram 2020-07-10 11:13:50,238 - Reading datafile..
DEBUG ram 2020-07-10 11:13:50,239 - Calculating tf-idf
DEBUG ram 2020-07-10 11:13:50,283 - Calculating variance threshold
DEBUG ram 2020-07-10 11:13:50,295 - Applying PCA
DEBUG ram 2020-07-10 11:13:50,312 - Applying K-Means algorithm
DEBUG ram 2020-07-10 11:13:50,362 - Sorting clusters
DEBUG ram 2020-07-10 11:13:50,364 - Converting to JSON format
DEBUG ram 2020-07-10 11:13:50,365 - Exporting clustering results
DEBUG ram 2020-07-10 11:13:50,367 - Writting summary
DEBUG ram 2020-07-10 11:13:50,369 - Writting clustering information to datafile
DEBUG ram 2020-07-10 11:13:50,370 - Getting scatter plot for clustered data
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,186 - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,187 - findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,188 - findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,188 - findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,188 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,188 - findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,189 - findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,189 - findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,189 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,190 - findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,190 - findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,190 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,190 - findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,191 - findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,191 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,191 - findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,191 - findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,191 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,192 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,192 - findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,192 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,197 - findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,197 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,198 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,198 - findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,198 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,199 - findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,199 - findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,199 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,199 - findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,199 - findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,200 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,200 - findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,200 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,201 - findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,201 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,201 - findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,201 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,202 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,202 - findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal demi normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,202 - findfont: score(<Font 'Sanskrit Text' (Sanskr.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,202 - findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal black normal>) = 11.525
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,203 - findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,203 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,203 - findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,203 - findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,203 - findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,204 - findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,204 - findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,204 - findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,204 - findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,205 - findfont: score(<Font 'Utsaah' (utsaahb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,205 - findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,205 - findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,205 - findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,206 - findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,206 - findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,206 - findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,206 - findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,206 - findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,207 - findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,207 - findfont: score(<Font 'Corbel' (corbell.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,207 - findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,207 - findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,212 - findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,212 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,212 - findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,212 - findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,213 - findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,213 - findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,213 - findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,213 - findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,214 - findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,214 - findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,214 - findfont: score(<Font 'Candara' (Candarali.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,214 - findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal demi normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,215 - findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,215 - findfont: score(<Font 'Arial' (ariblk.ttf) normal normal black normal>) = 6.888636363636364
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,215 - findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,215 - findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,215 - findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,216 - findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,216 - findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,216 - findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,216 - findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,217 - findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,217 - findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,217 - findfont: score(<Font 'SketchFlow Print' (SketchFlow Print.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,217 - findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,217 - findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,218 - findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,218 - findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,218 - findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,218 - findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,219 - findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,219 - findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,219 - findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal roman normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,219 - findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal roman normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,219 - findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,220 - findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,220 - findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,220 - findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,220 - findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,221 - findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,221 - findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,221 - findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,222 - findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,222 - findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,222 - findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,222 - findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,222 - findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,223 - findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,228 - findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,228 - findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,228 - findfont: score(<Font 'Times New Roman' (times.ttf) normal normal roman normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,229 - findfont: score(<Font 'Utsaah' (utsaahb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,229 - findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,229 - findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,229 - findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal semibold normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,230 - findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,230 - findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,230 - findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,230 - findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,231 - findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,231 - findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,231 - findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,231 - findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,232 - findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,232 - findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,232 - findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,232 - findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal roman normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,233 - findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,233 - findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,233 - findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,233 - findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,234 - findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal bold condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,234 - findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,234 - findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,235 - findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,235 - findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,235 - findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,235 - findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,236 - findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,236 - findfont: score(<Font 'Utsaah' (utsaahi.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,236 - findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,237 - findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,237 - findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,237 - findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,237 - findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,237 - findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,243 - findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,243 - findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,243 - findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,244 - findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal medium condensed>) = 10.344999999999999
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,244 - findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,244 - findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,244 - findfont: score(<Font 'Aparajita' (aparajbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,244 - findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,245 - findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,245 - findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,245 - findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,245 - findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,246 - findfont: score(<Font 'Arial Unicode MS' (ARIALUNI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,246 - findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,246 - findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,246 - findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,246 - findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,247 - findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,247 - findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,247 - findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,247 - findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,247 - findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,248 - findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,248 - findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,248 - findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,248 - findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,248 - findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,249 - findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,249 - findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,249 - findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,249 - findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,250 - findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,250 - findfont: score(<Font 'Utsaah' (utsaah.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,250 - findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,250 - findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,251 - findfont: score(<Font 'SketchFlow Print' (SketchFlow Print.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,251 - findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,251 - findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,251 - findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,251 - findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,252 - findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,252 - findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,252 - findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,252 - findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,253 - findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,253 - findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,253 - findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,253 - findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,259 - findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,259 - findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,260 - findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,260 - findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,260 - findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,260 - findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,261 - findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal demi normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,261 - findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,261 - findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,261 - findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,262 - findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal heavy normal>) = 10.43
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,262 - findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,262 - findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,262 - findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,262 - findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,263 - findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,263 - findfont: score(<Font 'MT Extra' (mtextra.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,263 - findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,263 - findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,264 - findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,264 - findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,264 - findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,264 - findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,265 - findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,265 - findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,265 - findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,265 - findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,265 - findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,266 - findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal demi condensed>) = 10.44
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,266 - findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,266 - findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,266 - findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,267 - findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,267 - findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,267 - findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal black normal>) = 11.525
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,267 - findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,268 - findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,268 - findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,268 - findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,275 - findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,276 - findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,276 - findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,276 - findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,276 - findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal medium condensed>) = 10.344999999999999
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,277 - findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,277 - findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,277 - findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,277 - findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,278 - findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,278 - findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,278 - findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,278 - findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,280 - findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,280 - findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,280 - findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,280 - findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal bold condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,281 - findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,281 - findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,281 - findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,281 - findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,282 - findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,282 - findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,282 - findfont: score(<Font 'Segoe Marker' (SegoeMarker.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,282 - findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,283 - findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,283 - findfont: score(<Font 'Source Code Pro' (SourceCodePro-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,283 - findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,283 - findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal heavy normal>) = 11.43
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,283 - findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,284 - findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,284 - findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,284 - findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,284 - findfont: score(<Font 'Buxton Sketch' (BuxtonSketch.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,285 - findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,285 - findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,285 - findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,286 - findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,286 - findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,286 - findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,286 - findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,286 - findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,287 - findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,287 - findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal semibold normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,287 - findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,288 - findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,288 - findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,288 - findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal heavy normal>) = 11.43
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,288 - findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,289 - findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,289 - findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,289 - findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,289 - findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,290 - findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,290 - findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,290 - findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,291 - findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,291 - findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,291 - findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal medium normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,291 - findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,291 - findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,292 - findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,292 - findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,292 - findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,293 - findfont: score(<Font 'Aparajita' (aparaji.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,293 - findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,293 - findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,293 - findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,294 - findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,294 - findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,294 - findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal demi normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,294 - findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,295 - findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,295 - findfont: score(<Font 'Shivaji01' (Shivaji01.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,295 - findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,295 - findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,296 - findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,296 - findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,296 - findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,296 - findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,296 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,297 - findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,297 - findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,297 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,297 - findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,298 - findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,298 - findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,298 - findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,298 - findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,298 - findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,299 - findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,299 - findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,299 - findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,299 - findfont: score(<Font 'Aparajita' (aparajb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,300 - findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,300 - findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,300 - findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,300 - findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,300 - findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,301 - findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,301 - findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,301 - findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal bold condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,301 - findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,302 - findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,302 - findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,302 - findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,302 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,302 - findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,303 - findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,303 - findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,303 - findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,303 - findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal medium normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,304 - findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,304 - findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,304 - findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,304 - findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,304 - findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,305 - findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,305 - findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,305 - findfont: score(<Font 'Kokila' (kokilab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,305 - findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,305 - findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,305 - findfont: score(<Font 'Mangal' (mangal.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,305 - findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,305 - findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,306 - findfont: score(<Font 'Calibri' (calibril.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,306 - findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,306 - findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,306 - findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,306 - findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,306 - findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,306 - findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,306 - findfont: score(<Font 'Aparajita' (aparajb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,307 - findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,307 - findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,307 - findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,308 - findfont: score(<Font 'Utsaah' (utsaahi.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,308 - findfont: score(<Font 'Buxton Sketch' (BuxtonSketch.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,308 - findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,308 - findfont: score(<Font 'Aparajita' (aparaj.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,308 - findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,309 - findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,309 - findfont: score(<Font 'Kokila' (kokilai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,309 - findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,309 - findfont: score(<Font 'Source Code Pro' (SourceCodePro-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,310 - findfont: score(<Font 'TeamViewer13' (teamviewer13.otf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,310 - findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,310 - findfont: score(<Font 'Kokila' (kokilab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,310 - findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,310 - findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,310 - findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,310 - findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,311 - findfont: score(<Font 'Segoe Marker' (SegoeMarker.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,311 - findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,311 - findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,311 - findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,311 - findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,311 - findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,311 - findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,311 - findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,312 - findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,312 - findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal bold condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,312 - findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,312 - findfont: score(<Font 'Candara' (Candaral.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,312 - findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,312 - findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,312 - findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,312 - findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal demi normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,313 - findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal semibold normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,313 - findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,313 - findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,313 - findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,313 - findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,313 - findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,318 - findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,318 - findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,319 - findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,319 - findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,319 - findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,319 - findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,320 - findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,320 - findfont: score(<Font 'Corbel' (corbell.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,320 - findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,320 - findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,321 - findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,321 - findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal black normal>) = 11.525
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,321 - findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,321 - findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,322 - findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,322 - findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,322 - findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,322 - findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,323 - findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,323 - findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,323 - findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,323 - findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,323 - findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,324 - findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,324 - findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,324 - findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,324 - findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal demi normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,324 - findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,325 - findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,325 - findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,325 - findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,325 - findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,325 - findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,325 - findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,325 - findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,325 - findfont: score(<Font 'Utsaah' (utsaah.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,326 - findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,326 - findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,326 - findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,326 - findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,326 - findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,326 - findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,327 - findfont: score(<Font 'Kokila' (kokila.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,327 - findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,327 - findfont: score(<Font 'Mangal' (mangalb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,327 - findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,327 - findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,332 - findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,332 - findfont: score(<Font 'MT Extra' (mtextra.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,332 - findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,333 - findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,333 - findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,333 - findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,333 - findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,334 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,334 - findfont: score(<Font 'Shivaji05' (Shivaji05.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,334 - findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,334 - findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,335 - findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,335 - findfont: score(<Font 'Mangal' (mangal.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,335 - findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,336 - findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,336 - findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,336 - findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,337 - findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,337 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,337 - findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,337 - findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,338 - findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,338 - findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,338 - findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal demi condensed>) = 10.44
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,338 - findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,339 - findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,339 - findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,339 - findfont: score(<Font 'Shivaji02' (Shivaji02.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,340 - findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,340 - findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,340 - findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,340 - findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,341 - findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,341 - findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,341 - findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,341 - findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,342 - findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,342 - findfont: score(<Font 'Aparajita' (aparaj.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,342 - findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,342 - findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,342 - findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,343 - findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,343 - findfont: score(<Font 'Utsaah' (utsaahbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,343 - findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,347 - findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,348 - findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,348 - findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,348 - findfont: score(<Font 'Aparajita' (aparaji.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,348 - findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,349 - findfont: score(<Font 'Candara' (Candarali.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,349 - findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,349 - findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,349 - findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,350 - findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,350 - findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,350 - findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,350 - findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,350 - findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,351 - findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,351 - findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,351 - findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,352 - findfont: score(<Font 'Kokila' (kokila.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,352 - findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,352 - findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,353 - findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,353 - findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,354 - findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,354 - findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,354 - findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,355 - findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,355 - findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,356 - findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,356 - findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,356 - findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,356 - findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,357 - findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,357 - findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,357 - findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,357 - findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,358 - findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,358 - findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,358 - findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,364 - findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,364 - findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,364 - findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,364 - findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,365 - findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,365 - findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,365 - findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,365 - findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,366 - findfont: score(<Font 'TeamViewer13' (teamviewer13.otf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,366 - findfont: score(<Font 'Mangal' (mangalb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,366 - findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,366 - findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,366 - findfont: score(<Font 'Calibri' (calibril.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,367 - findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,367 - findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal black normal>) = 11.525
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,367 - findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,367 - findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,368 - findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,368 - findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,368 - findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,368 - findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,368 - findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,369 - findfont: score(<Font 'Kokila' (kokilai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,369 - findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,369 - findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,370 - findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,370 - findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,370 - findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,370 - findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,370 - findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,371 - findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,371 - findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,372 - findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,372 - findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,372 - findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,372 - findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,373 - findfont: score(<Font 'Aparajita' (aparajbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,373 - findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,373 - findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,373 - findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,378 - findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,378 - findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,378 - findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,378 - findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,379 - findfont: score(<Font 'Shivaji02' (Shivaji02.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,379 - findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,379 - findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,379 - findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,380 - findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,380 - findfont: score(<Font 'Shivaji01' (Shivaji01.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,380 - findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,380 - findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,381 - findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,381 - findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,381 - findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,381 - findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,382 - findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,382 - findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,382 - findfont: score(<Font 'Kokila' (kokilabi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,383 - findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,383 - findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,383 - findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,383 - findfont: score(<Font 'Kokila' (kokilabi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,384 - findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,384 - findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,384 - findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,384 - findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,384 - findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,385 - findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,385 - findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,385 - findfont: score(<Font 'Arial Unicode MS' (ARIALUNI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,385 - findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,386 - findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,386 - findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,386 - findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,387 - findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,387 - findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,387 - findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,387 - findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,388 - findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,388 - findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,393 - findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal roman normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,393 - findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,394 - findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,394 - findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,394 - findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,395 - findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,395 - findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,395 - findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,395 - findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,396 - findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,396 - findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,396 - findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,396 - findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,397 - findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,397 - findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,397 - findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal bold condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,398 - findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,398 - findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,398 - findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,398 - findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal bold condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,399 - findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,399 - findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,399 - findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,399 - findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,400 - findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,400 - findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,400 - findfont: score(<Font 'Utsaah' (utsaahbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,400 - findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,401 - findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,401 - findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,401 - findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal semibold normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,401 - findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,402 - findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,402 - findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,402 - findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,402 - findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,403 - findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,403 - findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,403 - findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,403 - findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,404 - findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal heavy normal>) = 10.43
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,409 - findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,410 - findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,411 - findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,411 - findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,411 - findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,411 - findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,411 - findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,412 - findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,412 - findfont: score(<Font 'Candara' (Candaral.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,412 - findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,412 - findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,413 - findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,413 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,413 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,413 - findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,414 - findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,414 - findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,414 - findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,414 - findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,415 - findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,415 - findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,415 - findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,415 - findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,416 - findfont: score(<Font 'Shivaji05' (Shivaji05.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,416 - findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,416 - findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,416 - findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,417 - findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,417 - findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,417 - findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,418 - findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,418 - findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,418 - findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,418 - findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,419 - findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,419 - findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,424 - findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,425 - findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,425 - findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,425 - findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,425 - findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,426 - findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,426 - findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,426 - findfont: score(<Font 'Times New Roman' (times.ttf) normal normal roman normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,427 - findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,427 - findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,427 - findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,427 - findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,428 - findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,428 - findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,428 - findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,428 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,429 - findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,429 - findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,429 - findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,429 - findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,430 - findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,430 - findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,430 - findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,430 - findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,431 - findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,431 - findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,431 - findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,432 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,432 - findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,432 - findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,432 - findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,432 - findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,433 - findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,433 - findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,433 - findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,433 - findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,434 - findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,434 - findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,434 - findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,434 - findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,435 - findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,435 - findfont: score(<Font 'Sanskrit Text' (Sanskr.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,435 - findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,435 - findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,436 - findfont: score(<Font 'Arial' (ariblk.ttf) normal normal black normal>) = 6.888636363636364
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,436 - findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,436 - findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,443 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,443 - findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,443 - findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,444 - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('C:\\Users\\Personnal\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,713 - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,713 - findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,713 - findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,714 - findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,714 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,714 - findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,715 - findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,715 - findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,715 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,720 - findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,720 - findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,721 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,721 - findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,721 - findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,722 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,722 - findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,722 - findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,722 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,723 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,723 - findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,723 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,724 - findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,724 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,724 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,724 - findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,724 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,725 - findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,725 - findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,725 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,726 - findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,726 - findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,726 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,726 - findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,727 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,727 - findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,727 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,728 - findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,728 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,728 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,728 - findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal demi normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,729 - findfont: score(<Font 'Sanskrit Text' (Sanskr.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,729 - findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal black normal>) = 11.525
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,729 - findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,729 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,730 - findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,730 - findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,730 - findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,730 - findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,731 - findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,735 - findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,736 - findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,736 - findfont: score(<Font 'Utsaah' (utsaahb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,736 - findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,737 - findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,737 - findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,737 - findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,737 - findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,738 - findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,738 - findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,738 - findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,738 - findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,739 - findfont: score(<Font 'Corbel' (corbell.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,739 - findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,739 - findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,739 - findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,740 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,740 - findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,740 - findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,740 - findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,740 - findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,741 - findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,741 - findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,741 - findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,741 - findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,742 - findfont: score(<Font 'Candara' (Candarali.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,742 - findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal demi normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,742 - findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,742 - findfont: score(<Font 'Arial' (ariblk.ttf) normal normal black normal>) = 6.888636363636364
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,743 - findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,743 - findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,743 - findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,743 - findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,744 - findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,744 - findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,744 - findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,744 - findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,744 - findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,781 - findfont: score(<Font 'SketchFlow Print' (SketchFlow Print.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,782 - findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,782 - findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,782 - findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,783 - findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,783 - findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,783 - findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,784 - findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,784 - findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,784 - findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal roman normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,785 - findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal roman normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,785 - findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,785 - findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,785 - findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,786 - findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,786 - findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,786 - findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,786 - findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,786 - findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,787 - findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,787 - findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,787 - findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,787 - findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,788 - findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,789 - findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,789 - findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,789 - findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,789 - findfont: score(<Font 'Times New Roman' (times.ttf) normal normal roman normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,790 - findfont: score(<Font 'Utsaah' (utsaahb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,790 - findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,790 - findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,790 - findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal semibold normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,791 - findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,791 - findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,795 - findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,796 - findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,796 - findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,796 - findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,800 - findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,800 - findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,800 - findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,800 - findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,801 - findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,801 - findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal roman normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,801 - findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,801 - findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,801 - findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,802 - findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,802 - findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal bold condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,802 - findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,802 - findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,803 - findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,803 - findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,803 - findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,803 - findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,804 - findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,804 - findfont: score(<Font 'Utsaah' (utsaahi.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,804 - findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,804 - findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,805 - findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,805 - findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,805 - findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,806 - findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,806 - findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,806 - findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,806 - findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,806 - findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal medium condensed>) = 10.344999999999999
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,807 - findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,807 - findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,807 - findfont: score(<Font 'Aparajita' (aparajbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,807 - findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,808 - findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,808 - findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,808 - findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,809 - findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,809 - findfont: score(<Font 'Arial Unicode MS' (ARIALUNI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,809 - findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,809 - findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,809 - findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,810 - findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,811 - findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,811 - findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,811 - findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,811 - findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,811 - findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,812 - findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,812 - findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,812 - findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,812 - findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,813 - findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,813 - findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,813 - findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,813 - findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,813 - findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,814 - findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,814 - findfont: score(<Font 'Utsaah' (utsaah.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,814 - findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,814 - findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,816 - findfont: score(<Font 'SketchFlow Print' (SketchFlow Print.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,817 - findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,817 - findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,817 - findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,818 - findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,818 - findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,818 - findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,818 - findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,819 - findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,819 - findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,819 - findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,819 - findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,820 - findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,820 - findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,820 - findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,821 - findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,821 - findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,821 - findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,822 - findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,822 - findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal demi normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,822 - findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,822 - findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,823 - findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,823 - findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal heavy normal>) = 10.43
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,823 - findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,824 - findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,824 - findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,824 - findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,824 - findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,825 - findfont: score(<Font 'MT Extra' (mtextra.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,825 - findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,825 - findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,826 - findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,826 - findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,826 - findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,826 - findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,832 - findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,832 - findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,832 - findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,833 - findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,833 - findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,833 - findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal demi condensed>) = 10.44
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,834 - findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,834 - findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,834 - findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,834 - findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,835 - findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,835 - findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal black normal>) = 11.525
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,835 - findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,835 - findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,836 - findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,836 - findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,836 - findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,836 - findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,837 - findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,837 - findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,837 - findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal medium condensed>) = 10.344999999999999
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,837 - findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,838 - findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,838 - findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,838 - findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,838 - findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,839 - findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,839 - findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,839 - findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,839 - findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,840 - findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,844 - findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,844 - findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal bold condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,845 - findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,845 - findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,845 - findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,845 - findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,846 - findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,846 - findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,846 - findfont: score(<Font 'Segoe Marker' (SegoeMarker.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,846 - findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,846 - findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,847 - findfont: score(<Font 'Source Code Pro' (SourceCodePro-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,847 - findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,847 - findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal heavy normal>) = 11.43
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,848 - findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,848 - findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,848 - findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,849 - findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,849 - findfont: score(<Font 'Buxton Sketch' (BuxtonSketch.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,849 - findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,849 - findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,849 - findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,850 - findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,850 - findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,850 - findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,851 - findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,851 - findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,851 - findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,852 - findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal semibold normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,852 - findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,852 - findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,852 - findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,852 - findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal heavy normal>) = 11.43
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,853 - findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,853 - findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,853 - findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,854 - findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,854 - findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,854 - findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,854 - findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,855 - findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,855 - findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,855 - findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,855 - findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal medium normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,856 - findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,856 - findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,856 - findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,861 - findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,862 - findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,862 - findfont: score(<Font 'Aparajita' (aparaji.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,862 - findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,863 - findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,863 - findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,863 - findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,863 - findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,864 - findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal demi normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,864 - findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,864 - findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,864 - findfont: score(<Font 'Shivaji01' (Shivaji01.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,865 - findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,865 - findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,865 - findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,865 - findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,866 - findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,866 - findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,866 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,866 - findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,867 - findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,867 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,867 - findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,867 - findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,868 - findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,868 - findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,868 - findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,868 - findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,869 - findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,869 - findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,869 - findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,869 - findfont: score(<Font 'Aparajita' (aparajb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,869 - findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,870 - findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,870 - findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,870 - findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,870 - findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,871 - findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,871 - findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,871 - findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal bold condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,871 - findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,872 - findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,873 - findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,873 - findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,873 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,873 - findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,874 - findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,874 - findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,874 - findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,874 - findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal medium normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,875 - findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,875 - findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,875 - findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,875 - findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,875 - findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,876 - findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,876 - findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,876 - findfont: score(<Font 'Kokila' (kokilab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,876 - findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,877 - findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,877 - findfont: score(<Font 'Mangal' (mangal.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,877 - findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,877 - findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,878 - findfont: score(<Font 'Calibri' (calibril.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,878 - findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,878 - findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,879 - findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,879 - findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,879 - findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,879 - findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,880 - findfont: score(<Font 'Aparajita' (aparajb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,880 - findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,880 - findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,880 - findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,881 - findfont: score(<Font 'Utsaah' (utsaahi.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,881 - findfont: score(<Font 'Buxton Sketch' (BuxtonSketch.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,881 - findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,881 - findfont: score(<Font 'Aparajita' (aparaj.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,883 - findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,883 - findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,883 - findfont: score(<Font 'Kokila' (kokilai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,883 - findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,884 - findfont: score(<Font 'Source Code Pro' (SourceCodePro-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,884 - findfont: score(<Font 'TeamViewer13' (teamviewer13.otf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,884 - findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,885 - findfont: score(<Font 'Kokila' (kokilab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,885 - findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,885 - findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,885 - findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,886 - findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,886 - findfont: score(<Font 'Segoe Marker' (SegoeMarker.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,886 - findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,886 - findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,887 - findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,887 - findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,887 - findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,888 - findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,888 - findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,888 - findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,889 - findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal bold condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,889 - findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,894 - findfont: score(<Font 'Candara' (Candaral.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,894 - findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,894 - findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,894 - findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,895 - findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal demi normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,895 - findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal semibold normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,895 - findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,895 - findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,896 - findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,896 - findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,896 - findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,897 - findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,897 - findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,897 - findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,897 - findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,897 - findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,898 - findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,898 - findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,898 - findfont: score(<Font 'Corbel' (corbell.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,899 - findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,899 - findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,899 - findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,899 - findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal black normal>) = 11.525
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,900 - findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,900 - findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,900 - findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,901 - findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,901 - findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,901 - findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,901 - findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,902 - findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,902 - findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,902 - findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,902 - findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,903 - findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,903 - findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,903 - findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,904 - findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal demi normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,904 - findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,904 - findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,904 - findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,905 - findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,905 - findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,905 - findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,906 - findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,906 - findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,906 - findfont: score(<Font 'Utsaah' (utsaah.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,906 - findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,907 - findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,907 - findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,907 - findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,908 - findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,908 - findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,908 - findfont: score(<Font 'Kokila' (kokila.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,908 - findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,909 - findfont: score(<Font 'Mangal' (mangalb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,909 - findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,909 - findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,909 - findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,910 - findfont: score(<Font 'MT Extra' (mtextra.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,910 - findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,910 - findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,911 - findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,911 - findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,911 - findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,911 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,912 - findfont: score(<Font 'Shivaji05' (Shivaji05.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,912 - findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,912 - findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,914 - findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,914 - findfont: score(<Font 'Mangal' (mangal.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,914 - findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,914 - findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,915 - findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,915 - findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,915 - findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,915 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,915 - findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,916 - findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,916 - findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,916 - findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,917 - findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal demi condensed>) = 10.44
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,917 - findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,917 - findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,917 - findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,918 - findfont: score(<Font 'Shivaji02' (Shivaji02.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,918 - findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,918 - findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,918 - findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,919 - findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,919 - findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,919 - findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,919 - findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,920 - findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,920 - findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,920 - findfont: score(<Font 'Aparajita' (aparaj.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,921 - findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,921 - findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,925 - findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,926 - findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,926 - findfont: score(<Font 'Utsaah' (utsaahbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,926 - findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,927 - findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,927 - findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,927 - findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,927 - findfont: score(<Font 'Aparajita' (aparaji.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,928 - findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,928 - findfont: score(<Font 'Candara' (Candarali.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,928 - findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,928 - findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,929 - findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,929 - findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,929 - findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,930 - findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,930 - findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,930 - findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,930 - findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,931 - findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,931 - findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,931 - findfont: score(<Font 'Kokila' (kokila.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,931 - findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,932 - findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,932 - findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,932 - findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,932 - findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,933 - findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,933 - findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,933 - findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,933 - findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,934 - findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,934 - findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,934 - findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,934 - findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,934 - findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,935 - findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,935 - findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,935 - findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,935 - findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,936 - findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,936 - findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,936 - findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,936 - findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,937 - findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,937 - findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,937 - findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,938 - findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,939 - findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,939 - findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,939 - findfont: score(<Font 'TeamViewer13' (teamviewer13.otf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,939 - findfont: score(<Font 'Mangal' (mangalb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,940 - findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,940 - findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,940 - findfont: score(<Font 'Calibri' (calibril.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,941 - findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,941 - findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal black normal>) = 11.525
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,941 - findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,941 - findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,942 - findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,942 - findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,942 - findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,942 - findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,943 - findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,943 - findfont: score(<Font 'Kokila' (kokilai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,943 - findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,943 - findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,944 - findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,944 - findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,944 - findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,944 - findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,945 - findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,945 - findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,945 - findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,945 - findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,946 - findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,946 - findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,946 - findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,946 - findfont: score(<Font 'Aparajita' (aparajbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,947 - findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,947 - findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,947 - findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,948 - findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,948 - findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,948 - findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,950 - findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,951 - findfont: score(<Font 'Shivaji02' (Shivaji02.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,951 - findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,951 - findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,952 - findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,952 - findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,952 - findfont: score(<Font 'Shivaji01' (Shivaji01.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,952 - findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,953 - findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,953 - findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,953 - findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,954 - findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,954 - findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,954 - findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,954 - findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,954 - findfont: score(<Font 'Kokila' (kokilabi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,955 - findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,955 - findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,955 - findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,956 - findfont: score(<Font 'Kokila' (kokilabi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,956 - findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,956 - findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,957 - findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,957 - findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,957 - findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,957 - findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,958 - findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,958 - findfont: score(<Font 'Arial Unicode MS' (ARIALUNI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,958 - findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,959 - findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,959 - findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,959 - findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,960 - findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,960 - findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,960 - findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,960 - findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,961 - findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,961 - findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,961 - findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal roman normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,961 - findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,962 - findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,962 - findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,962 - findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,962 - findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,963 - findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,963 - findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,963 - findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,963 - findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,964 - findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,964 - findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,964 - findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,964 - findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,965 - findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,965 - findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal bold condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,965 - findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,965 - findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,966 - findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,966 - findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal bold condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,966 - findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,967 - findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,967 - findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,967 - findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,967 - findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,968 - findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,968 - findfont: score(<Font 'Utsaah' (utsaahbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,968 - findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,969 - findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,969 - findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,969 - findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal semibold normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,969 - findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,970 - findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,970 - findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,970 - findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,971 - findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,971 - findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,971 - findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,971 - findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,972 - findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,972 - findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal heavy normal>) = 10.43
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,972 - findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,972 - findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,973 - findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,973 - findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,973 - findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,974 - findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,974 - findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,974 - findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,974 - findfont: score(<Font 'Candara' (Candaral.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,974 - findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,975 - findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,975 - findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,975 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,975 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,976 - findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,976 - findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,976 - findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,976 - findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,977 - findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,977 - findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,977 - findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,977 - findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,978 - findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,978 - findfont: score(<Font 'Shivaji05' (Shivaji05.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,978 - findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,978 - findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,979 - findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,979 - findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,979 - findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,979 - findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,980 - findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,980 - findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,980 - findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,980 - findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,981 - findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,981 - findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,981 - findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,982 - findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,982 - findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,982 - findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,982 - findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,983 - findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,983 - findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,983 - findfont: score(<Font 'Times New Roman' (times.ttf) normal normal roman normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,983 - findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,984 - findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,984 - findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,984 - findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,985 - findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,985 - findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,985 - findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,985 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,986 - findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,986 - findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,986 - findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,987 - findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,987 - findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,987 - findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,987 - findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,988 - findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,988 - findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,988 - findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,989 - findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,989 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,989 - findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,989 - findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,990 - findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,990 - findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,990 - findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,990 - findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,991 - findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,991 - findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,991 - findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,991 - findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,992 - findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,992 - findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,992 - findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,992 - findfont: score(<Font 'Sanskrit Text' (Sanskr.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,993 - findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,993 - findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,993 - findfont: score(<Font 'Arial' (ariblk.ttf) normal normal black normal>) = 6.888636363636364
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,993 - findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,994 - findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,994 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,994 - findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,994 - findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:13:53,995 - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\Personnal\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
INFO ram 2020-07-10 11:13:54,125 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:13:54,126 - 127.0.0.1 - - [10/Jul/2020 11:13:54] "[37mPOST /clustering/kmeans?k=4&format=csv&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:13:57,682 - Requested to get clustering details.
DEBUG ram 2020-07-10 11:13:57,682 - Reading datafile for clustered data
INFO ram 2020-07-10 11:13:57,683 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:13:57,686 - 127.0.0.1 - - [10/Jul/2020 11:13:57] "[37mGET /clustering/kmeans?uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:13:57,702 - Requested to get clustering summary.
DEBUG ram 2020-07-10 11:13:57,702 - Reading datafile for clustering summary
INFO ram 2020-07-10 11:13:57,703 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:13:57,705 - 127.0.0.1 - - [10/Jul/2020 11:13:57] "[37mGET /clustering/summary?uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:13:57,722 - Requested to cluster documents.
DEBUG ram 2020-07-10 11:13:57,722 - Reading datafile..
DEBUG ram 2020-07-10 11:13:57,724 - Calculating tf-idf
DEBUG ram 2020-07-10 11:13:57,762 - Calculating variance threshold
DEBUG ram 2020-07-10 11:13:57,769 - Applying PCA
DEBUG ram 2020-07-10 11:13:57,789 - Applying DBSCAN algorithm
DEBUG ram 2020-07-10 11:13:57,877 - Sorting clusters
DEBUG ram 2020-07-10 11:13:57,879 - Converting to JSON format
DEBUG ram 2020-07-10 11:13:57,881 - Exporting clustering results
DEBUG ram 2020-07-10 11:13:57,883 - Writting summary
DEBUG ram 2020-07-10 11:13:57,885 - Writting clustering information to datafile
DEBUG ram 2020-07-10 11:13:57,887 - Getting scatter plot for clustered data
INFO ram 2020-07-10 11:13:58,098 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:13:58,099 - 127.0.0.1 - - [10/Jul/2020 11:13:58] "[37mPOST /clustering/dbscan?eps=0.3&min=1&format=csv&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:14:00,855 - Requested to get clustering details.
DEBUG ram 2020-07-10 11:14:00,855 - Reading datafile for clustered data
INFO ram 2020-07-10 11:14:00,858 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:14:00,862 - 127.0.0.1 - - [10/Jul/2020 11:14:00] "[37mGET /clustering/dbscan?uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:14:00,886 - Requested to get clustering summary.
DEBUG ram 2020-07-10 11:14:00,887 - Reading datafile for clustering summary
INFO ram 2020-07-10 11:14:00,888 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:14:00,896 - 127.0.0.1 - - [10/Jul/2020 11:14:00] "[37mGET /clustering/summary?uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:14:01,081 - Requested to cluster documents.
DEBUG ram 2020-07-10 11:14:01,082 - Reading datafile..
DEBUG ram 2020-07-10 11:14:01,084 - Calculating tf-idf
DEBUG ram 2020-07-10 11:14:01,157 - Calculating variance threshold
DEBUG ram 2020-07-10 11:14:01,170 - Applying PCA
DEBUG ram 2020-07-10 11:14:01,250 - Applying Agglomerative algorithm
DEBUG ram 2020-07-10 11:14:02,491 - Sorting clusters
DEBUG ram 2020-07-10 11:14:02,493 - Converting to JSON format
DEBUG ram 2020-07-10 11:14:02,495 - Exporting clustering results
DEBUG ram 2020-07-10 11:14:02,496 - Writting summary
DEBUG ram 2020-07-10 11:14:02,498 - Writting clustering information to datafile
DEBUG ram 2020-07-10 11:14:02,499 - Getting scatter plot for clustered data
INFO ram 2020-07-10 11:14:02,647 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:14:02,648 - 127.0.0.1 - - [10/Jul/2020 11:14:02] "[37mPOST /clustering/agglomerative?k=5&format=csv&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:14:04,327 - Requested to get clustering details.
DEBUG ram 2020-07-10 11:14:04,327 - Reading datafile for clustered data
INFO ram 2020-07-10 11:14:04,329 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:14:04,333 - 127.0.0.1 - - [10/Jul/2020 11:14:04] "[37mGET /clustering/agglomerative?uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:14:04,367 - Requested to get clustering summary.
DEBUG ram 2020-07-10 11:14:04,368 - Reading datafile for clustering summary
INFO ram 2020-07-10 11:14:04,369 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:14:04,371 - 127.0.0.1 - - [10/Jul/2020 11:14:04] "[37mGET /clustering/summary?uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:14:04,409 - Requested to cluster documents.
DEBUG ram 2020-07-10 11:14:04,410 - Reading datafile..
DEBUG ram 2020-07-10 11:14:04,411 - Calculating tf-idf
DEBUG ram 2020-07-10 11:14:04,467 - Calculating variance threshold
DEBUG ram 2020-07-10 11:14:04,482 - Applying PCA
DEBUG ram 2020-07-10 11:14:04,507 - Applying Birch algorithm
DEBUG ram 2020-07-10 11:14:04,537 - Sorting clusters
DEBUG ram 2020-07-10 11:14:04,539 - Converting to JSON format
DEBUG ram 2020-07-10 11:14:04,540 - Exporting clustering results
DEBUG ram 2020-07-10 11:14:04,543 - Writting summary
DEBUG ram 2020-07-10 11:14:04,545 - Writting clustering information to datafile
DEBUG ram 2020-07-10 11:14:04,546 - Getting scatter plot for clustered data
INFO ram 2020-07-10 11:14:04,710 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:14:04,711 - 127.0.0.1 - - [10/Jul/2020 11:14:04] "[37mPOST /clustering/birch?k=5&format=csv&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:14:06,516 - Requested to get clustering details.
DEBUG ram 2020-07-10 11:14:06,517 - Reading datafile for clustered data
INFO ram 2020-07-10 11:14:06,518 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:14:06,521 - 127.0.0.1 - - [10/Jul/2020 11:14:06] "[37mGET /clustering/birch?uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:14:06,535 - Requested to get clustering summary.
DEBUG ram 2020-07-10 11:14:06,535 - Reading datafile for clustering summary
INFO ram 2020-07-10 11:14:06,536 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:14:06,538 - 127.0.0.1 - - [10/Jul/2020 11:14:06] "[37mGET /clustering/summary?uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 11:14:26,516 - Requested to extract data.
DEBUG admin1 2020-07-10 11:14:26,533 - Extracted links and ISINs from JSON object.
INFO vaishnavi 2020-07-10 11:14:28,214 - Requested to extract data.
DEBUG vaishnavi 2020-07-10 11:14:28,229 - Extracted links and ISINs from JSON object.
INFO ram 2020-07-10 11:14:29,379 - Requested to extract data.
DEBUG ram 2020-07-10 11:14:29,380 - Extracted links and ISINs from JSON object.
INFO ram 2020-07-10 11:14:35,747 - Made entry for extracted data in datafile successfully.
INFO werkzeug 2020-07-10 11:14:35,754 - 127.0.0.1 - - [10/Jul/2020 11:14:35] "[37mPOST /extract?filepath=ISINS_v3.xlsx&no_of_docs=9&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:14:35,912 - Requested to export extracted data.
INFO ram 2020-07-10 11:14:36,322 - Exported successfully
INFO werkzeug 2020-07-10 11:14:36,323 - 127.0.0.1 - - [10/Jul/2020 11:14:36] "[37mPOST /extract/export?filepath=extract.xlsx&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:14:36,333 - Requested to pre-process data.
INFO admin1 2020-07-10 11:14:38,616 - Made entry for extracted data in datafile successfully.
INFO werkzeug 2020-07-10 11:14:38,622 - 127.0.0.1 - - [10/Jul/2020 11:14:38] "[37mPOST /extract?filepath=ISINS_v3.xlsx&no_of_docs=15&uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 11:14:38,725 - Requested to export extracted data.
INFO vaishnavi 2020-07-10 11:14:40,086 - Made entry for extracted data in datafile successfully.
INFO werkzeug 2020-07-10 11:14:40,106 - 127.0.0.1 - - [10/Jul/2020 11:14:40] "[37mPOST /extract?filepath=ISINS_v3.xlsx&no_of_docs=15&uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO vaishnavi 2020-07-10 11:14:40,228 - Requested to export extracted data.
INFO admin1 2020-07-10 11:14:41,752 - Exported successfully
INFO werkzeug 2020-07-10 11:14:41,753 - 127.0.0.1 - - [10/Jul/2020 11:14:41] "[37mPOST /extract/export?filepath=extract.xlsx&uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 11:14:41,840 - Requested to pre-process data.
INFO vaishnavi 2020-07-10 11:14:42,648 - Exported successfully
INFO werkzeug 2020-07-10 11:14:42,649 - 127.0.0.1 - - [10/Jul/2020 11:14:42] "[37mPOST /extract/export?filepath=extract.xlsx&uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO vaishnavi 2020-07-10 11:14:42,778 - Requested to pre-process data.
DEBUG ram 2020-07-10 11:14:56,382 - Pre-processed data
DEBUG ram 2020-07-10 11:14:56,442 - Made entry of pre-processed data in datafile successfully
INFO werkzeug 2020-07-10 11:14:56,454 - 127.0.0.1 - - [10/Jul/2020 11:14:56] "[37mPOST /preprocess?steps=url&steps=stemming&steps=lemmatization&steps=stopwords&steps=unusual&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:14:56,664 - Requested to export pre-processed data.
DEBUG ram 2020-07-10 11:14:56,676 - Reading pre-processed datafile.
DEBUG ram 2020-07-10 11:14:57,010 - Exporting pre-processed data to excel file.
INFO ram 2020-07-10 11:14:59,848 - Exported pre-processed data successfully.
INFO werkzeug 2020-07-10 11:14:59,907 - 127.0.0.1 - - [10/Jul/2020 11:14:59] "[37mPOST /preprocess/export?filepath=prep.xlsx&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:15:00,058 - Requested to cluster documents.
DEBUG ram 2020-07-10 11:15:00,064 - Reading datafile..
DEBUG ram 2020-07-10 11:15:00,198 - Calculating tf-idf
DEBUG ram 2020-07-10 11:15:00,476 - Calculating variance threshold
DEBUG ram 2020-07-10 11:15:00,539 - Applying PCA
DEBUG ram 2020-07-10 11:15:00,659 - Applying K-Means algorithm
DEBUG ram 2020-07-10 11:15:01,386 - Sorting clusters
DEBUG ram 2020-07-10 11:15:01,444 - Converting to JSON format
DEBUG ram 2020-07-10 11:15:01,480 - Exporting clustering results
DEBUG ram 2020-07-10 11:15:01,506 - Writting summary
DEBUG ram 2020-07-10 11:15:01,558 - Writting clustering information to datafile
DEBUG ram 2020-07-10 11:15:01,618 - Getting scatter plot for clustered data
INFO ram 2020-07-10 11:15:03,531 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:15:03,555 - 127.0.0.1 - - [10/Jul/2020 11:15:03] "[37mPOST /clustering/kmeans?k=4&format=csv&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:15:05,955 - Requested to get clustering details.
DEBUG ram 2020-07-10 11:15:05,967 - Reading datafile for clustered data
INFO ram 2020-07-10 11:15:06,031 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:15:06,086 - 127.0.0.1 - - [10/Jul/2020 11:15:06] "[37mGET /clustering/kmeans?uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:15:06,412 - Requested to get clustering summary.
DEBUG ram 2020-07-10 11:15:06,424 - Reading datafile for clustering summary
INFO ram 2020-07-10 11:15:06,568 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:15:06,624 - 127.0.0.1 - - [10/Jul/2020 11:15:06] "[37mGET /clustering/summary?uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:15:06,799 - Requested to cluster documents.
DEBUG ram 2020-07-10 11:15:06,847 - Reading datafile..
DEBUG ram 2020-07-10 11:15:06,945 - Calculating tf-idf
DEBUG ram 2020-07-10 11:15:07,274 - Calculating variance threshold
DEBUG ram 2020-07-10 11:15:07,352 - Applying PCA
DEBUG ram 2020-07-10 11:15:07,576 - Applying DBSCAN algorithm
DEBUG ram 2020-07-10 11:15:07,639 - Sorting clusters
DEBUG ram 2020-07-10 11:15:07,658 - Converting to JSON format
DEBUG ram 2020-07-10 11:15:07,671 - Exporting clustering results
DEBUG ram 2020-07-10 11:15:07,724 - Writting summary
DEBUG ram 2020-07-10 11:15:07,726 - Writting clustering information to datafile
DEBUG ram 2020-07-10 11:15:07,780 - Getting scatter plot for clustered data
INFO ram 2020-07-10 11:15:09,072 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:15:09,109 - 127.0.0.1 - - [10/Jul/2020 11:15:09] "[37mPOST /clustering/dbscan?eps=0.3&min=1&format=csv&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:15:11,024 - Requested to get clustering details.
DEBUG ram 2020-07-10 11:15:11,036 - Reading datafile for clustered data
INFO ram 2020-07-10 11:15:11,343 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:15:11,424 - 127.0.0.1 - - [10/Jul/2020 11:15:11] "[37mGET /clustering/dbscan?uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:15:11,478 - Requested to get clustering summary.
DEBUG ram 2020-07-10 11:15:11,500 - Reading datafile for clustering summary
INFO ram 2020-07-10 11:15:11,731 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:15:11,816 - 127.0.0.1 - - [10/Jul/2020 11:15:11] "[37mGET /clustering/summary?uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:15:11,986 - Requested to cluster documents.
DEBUG ram 2020-07-10 11:15:11,999 - Reading datafile..
DEBUG ram 2020-07-10 11:15:12,300 - Calculating tf-idf
DEBUG ram 2020-07-10 11:15:12,564 - Calculating variance threshold
DEBUG ram 2020-07-10 11:15:12,733 - Applying PCA
DEBUG ram 2020-07-10 11:15:12,894 - Applying Agglomerative algorithm
DEBUG ram 2020-07-10 11:15:12,992 - Sorting clusters
DEBUG ram 2020-07-10 11:15:13,007 - Converting to JSON format
DEBUG ram 2020-07-10 11:15:13,014 - Exporting clustering results
DEBUG ram 2020-07-10 11:15:13,063 - Writting summary
DEBUG ram 2020-07-10 11:15:13,175 - Writting clustering information to datafile
DEBUG ram 2020-07-10 11:15:13,231 - Getting scatter plot for clustered data
INFO ram 2020-07-10 11:15:13,994 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:15:14,025 - 127.0.0.1 - - [10/Jul/2020 11:15:14] "[37mPOST /clustering/agglomerative?k=5&format=csv&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:15:16,139 - Requested to get clustering details.
DEBUG ram 2020-07-10 11:15:16,151 - Reading datafile for clustered data
INFO ram 2020-07-10 11:15:16,258 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:15:16,332 - 127.0.0.1 - - [10/Jul/2020 11:15:16] "[37mGET /clustering/agglomerative?uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:15:16,544 - Requested to get clustering summary.
DEBUG ram 2020-07-10 11:15:16,559 - Reading datafile for clustering summary
INFO ram 2020-07-10 11:15:16,714 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:15:16,750 - 127.0.0.1 - - [10/Jul/2020 11:15:16] "[37mGET /clustering/summary?uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:15:16,988 - Requested to cluster documents.
DEBUG ram 2020-07-10 11:15:17,006 - Reading datafile..
DEBUG ram 2020-07-10 11:15:17,289 - Calculating tf-idf
DEBUG ram 2020-07-10 11:15:17,661 - Calculating variance threshold
DEBUG ram 2020-07-10 11:15:17,777 - Applying PCA
DEBUG ram 2020-07-10 11:15:17,966 - Applying Birch algorithm
DEBUG ram 2020-07-10 11:15:18,066 - Sorting clusters
DEBUG ram 2020-07-10 11:15:18,088 - Converting to JSON format
DEBUG ram 2020-07-10 11:15:18,094 - Exporting clustering results
DEBUG ram 2020-07-10 11:15:18,138 - Writting summary
DEBUG ram 2020-07-10 11:15:18,244 - Writting clustering information to datafile
DEBUG ram 2020-07-10 11:15:18,292 - Getting scatter plot for clustered data
INFO ram 2020-07-10 11:15:19,409 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:15:19,428 - 127.0.0.1 - - [10/Jul/2020 11:15:19] "[37mPOST /clustering/birch?k=5&format=csv&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG admin1 2020-07-10 11:15:19,894 - Pre-processed data
DEBUG admin1 2020-07-10 11:15:19,930 - Made entry of pre-processed data in datafile successfully
INFO werkzeug 2020-07-10 11:15:19,936 - 127.0.0.1 - - [10/Jul/2020 11:15:19] "[37mPOST /preprocess?steps=url&steps=stemming&steps=lemmatization&steps=stopwords&steps=unusual&uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 11:15:20,056 - Requested to export pre-processed data.
DEBUG admin1 2020-07-10 11:15:20,062 - Reading pre-processed datafile.
DEBUG admin1 2020-07-10 11:15:20,163 - Exporting pre-processed data to excel file.
DEBUG vaishnavi 2020-07-10 11:15:20,507 - Pre-processed data
DEBUG vaishnavi 2020-07-10 11:15:20,510 - Made entry of pre-processed data in datafile successfully
INFO werkzeug 2020-07-10 11:15:20,512 - 127.0.0.1 - - [10/Jul/2020 11:15:20] "[37mPOST /preprocess?steps=url&steps=stemming&steps=lemmatization&steps=stopwords&steps=unusual&uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO vaishnavi 2020-07-10 11:15:20,653 - Requested to export pre-processed data.
DEBUG vaishnavi 2020-07-10 11:15:20,654 - Reading pre-processed datafile.
DEBUG vaishnavi 2020-07-10 11:15:20,728 - Exporting pre-processed data to excel file.
INFO admin1 2020-07-10 11:15:20,784 - Exported pre-processed data successfully.
INFO werkzeug 2020-07-10 11:15:20,785 - 127.0.0.1 - - [10/Jul/2020 11:15:20] "[37mPOST /preprocess/export?filepath=prep.xlsx&uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 11:15:20,886 - Requested to cluster documents.
DEBUG admin1 2020-07-10 11:15:20,886 - Reading datafile..
DEBUG admin1 2020-07-10 11:15:20,888 - Calculating tf-idf
DEBUG admin1 2020-07-10 11:15:21,013 - Calculating variance threshold
DEBUG admin1 2020-07-10 11:15:21,042 - Applying PCA
DEBUG admin1 2020-07-10 11:15:21,075 - Applying K-Means algorithm
DEBUG admin1 2020-07-10 11:15:21,273 - Sorting clusters
DEBUG admin1 2020-07-10 11:15:21,275 - Converting to JSON format
DEBUG admin1 2020-07-10 11:15:21,287 - Exporting clustering results
DEBUG admin1 2020-07-10 11:15:21,306 - Writting summary
DEBUG admin1 2020-07-10 11:15:21,314 - Writting clustering information to datafile
INFO vaishnavi 2020-07-10 11:15:21,321 - Exported pre-processed data successfully.
INFO werkzeug 2020-07-10 11:15:21,323 - 127.0.0.1 - - [10/Jul/2020 11:15:21] "[37mPOST /preprocess/export?filepath=prep.xlsx&uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG admin1 2020-07-10 11:15:21,324 - Getting scatter plot for clustered data
INFO vaishnavi 2020-07-10 11:15:21,369 - Requested to cluster documents.
DEBUG vaishnavi 2020-07-10 11:15:21,377 - Reading datafile..
DEBUG vaishnavi 2020-07-10 11:15:21,389 - Calculating tf-idf
INFO ram 2020-07-10 11:15:21,502 - Requested to get clustering details.
DEBUG ram 2020-07-10 11:15:21,518 - Reading datafile for clustered data
DEBUG vaishnavi 2020-07-10 11:15:21,543 - Calculating variance threshold
DEBUG vaishnavi 2020-07-10 11:15:21,571 - Applying PCA
INFO ram 2020-07-10 11:15:21,605 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:15:21,638 - 127.0.0.1 - - [10/Jul/2020 11:15:21] "[37mGET /clustering/birch?uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG vaishnavi 2020-07-10 11:15:21,667 - Applying K-Means algorithm
INFO ram 2020-07-10 11:15:21,710 - Requested to get clustering summary.
INFO admin1 2020-07-10 11:15:21,762 - Performed clustering successfully
DEBUG ram 2020-07-10 11:15:21,756 - Reading datafile for clustering summary
INFO werkzeug 2020-07-10 11:15:21,764 - 127.0.0.1 - - [10/Jul/2020 11:15:21] "[37mPOST /clustering/kmeans?k=4&format=csv&uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:15:21,766 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:15:21,769 - 127.0.0.1 - - [10/Jul/2020 11:15:21] "[37mGET /clustering/summary?uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG vaishnavi 2020-07-10 11:15:21,842 - Sorting clusters
DEBUG vaishnavi 2020-07-10 11:15:21,845 - Converting to JSON format
DEBUG vaishnavi 2020-07-10 11:15:21,847 - Exporting clustering results
DEBUG vaishnavi 2020-07-10 11:15:21,849 - Writting summary
DEBUG vaishnavi 2020-07-10 11:15:21,863 - Writting clustering information to datafile
DEBUG vaishnavi 2020-07-10 11:15:21,865 - Getting scatter plot for clustered data
INFO vaishnavi 2020-07-10 11:15:22,249 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:15:22,250 - 127.0.0.1 - - [10/Jul/2020 11:15:22] "[37mPOST /clustering/kmeans?k=4&format=csv&uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 11:15:24,536 - Requested to get clustering details.
DEBUG admin1 2020-07-10 11:15:24,536 - Reading datafile for clustered data
INFO admin1 2020-07-10 11:15:24,537 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:15:24,541 - 127.0.0.1 - - [10/Jul/2020 11:15:24] "[37mGET /clustering/kmeans?uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 11:15:24,665 - Requested to get clustering summary.
DEBUG admin1 2020-07-10 11:15:24,666 - Reading datafile for clustering summary
INFO admin1 2020-07-10 11:15:24,667 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:15:24,669 - 127.0.0.1 - - [10/Jul/2020 11:15:24] "[37mGET /clustering/summary?uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 11:15:24,745 - Requested to cluster documents.
DEBUG admin1 2020-07-10 11:15:24,746 - Reading datafile..
DEBUG admin1 2020-07-10 11:15:24,748 - Calculating tf-idf
DEBUG admin1 2020-07-10 11:15:24,881 - Calculating variance threshold
DEBUG admin1 2020-07-10 11:15:24,904 - Applying PCA
DEBUG admin1 2020-07-10 11:15:24,963 - Applying DBSCAN algorithm
INFO vaishnavi 2020-07-10 11:15:25,009 - Requested to get clustering details.
DEBUG vaishnavi 2020-07-10 11:15:25,010 - Reading datafile for clustered data
INFO vaishnavi 2020-07-10 11:15:25,011 - Get request for clustered data served successfully
DEBUG admin1 2020-07-10 11:15:25,042 - Sorting clusters
DEBUG admin1 2020-07-10 11:15:25,044 - Converting to JSON format
DEBUG admin1 2020-07-10 11:15:25,051 - Exporting clustering results
INFO werkzeug 2020-07-10 11:15:25,054 - 127.0.0.1 - - [10/Jul/2020 11:15:25] "[37mGET /clustering/kmeans?uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG admin1 2020-07-10 11:15:25,060 - Writting summary
DEBUG admin1 2020-07-10 11:15:25,062 - Writting clustering information to datafile
DEBUG admin1 2020-07-10 11:15:25,069 - Getting scatter plot for clustered data
INFO vaishnavi 2020-07-10 11:15:25,210 - Requested to get clustering summary.
DEBUG vaishnavi 2020-07-10 11:15:25,213 - Reading datafile for clustering summary
INFO vaishnavi 2020-07-10 11:15:25,219 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:15:25,257 - 127.0.0.1 - - [10/Jul/2020 11:15:25] "[37mGET /clustering/summary?uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO vaishnavi 2020-07-10 11:15:25,332 - Requested to cluster documents.
DEBUG vaishnavi 2020-07-10 11:15:25,334 - Reading datafile..
INFO admin1 2020-07-10 11:15:25,410 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:15:25,411 - 127.0.0.1 - - [10/Jul/2020 11:15:25] "[37mPOST /clustering/dbscan?eps=0.3&min=1&format=csv&uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG vaishnavi 2020-07-10 11:15:25,414 - Calculating tf-idf
DEBUG vaishnavi 2020-07-10 11:15:25,489 - Calculating variance threshold
DEBUG vaishnavi 2020-07-10 11:15:25,501 - Applying PCA
DEBUG vaishnavi 2020-07-10 11:15:25,525 - Applying DBSCAN algorithm
DEBUG vaishnavi 2020-07-10 11:15:25,544 - Sorting clusters
DEBUG vaishnavi 2020-07-10 11:15:25,546 - Converting to JSON format
DEBUG vaishnavi 2020-07-10 11:15:25,549 - Exporting clustering results
DEBUG vaishnavi 2020-07-10 11:15:25,551 - Writting summary
DEBUG vaishnavi 2020-07-10 11:15:25,553 - Writting clustering information to datafile
DEBUG vaishnavi 2020-07-10 11:15:25,555 - Getting scatter plot for clustered data
INFO vaishnavi 2020-07-10 11:15:25,755 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:15:25,756 - 127.0.0.1 - - [10/Jul/2020 11:15:25] "[37mPOST /clustering/dbscan?eps=0.3&min=1&format=csv&uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 11:15:27,993 - Requested to get clustering details.
DEBUG admin1 2020-07-10 11:15:27,994 - Reading datafile for clustered data
INFO admin1 2020-07-10 11:15:27,996 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:15:28,063 - 127.0.0.1 - - [10/Jul/2020 11:15:28] "[37mGET /clustering/dbscan?uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 11:15:28,161 - Requested to get clustering summary.
DEBUG admin1 2020-07-10 11:15:28,162 - Reading datafile for clustering summary
INFO admin1 2020-07-10 11:15:28,163 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:15:28,165 - 127.0.0.1 - - [10/Jul/2020 11:15:28] "[37mGET /clustering/summary?uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 11:15:28,213 - Requested to cluster documents.
DEBUG admin1 2020-07-10 11:15:28,213 - Reading datafile..
DEBUG admin1 2020-07-10 11:15:28,215 - Calculating tf-idf
DEBUG admin1 2020-07-10 11:15:28,355 - Calculating variance threshold
DEBUG admin1 2020-07-10 11:15:28,384 - Applying PCA
DEBUG admin1 2020-07-10 11:15:28,450 - Applying Agglomerative algorithm
DEBUG admin1 2020-07-10 11:15:28,476 - Sorting clusters
DEBUG admin1 2020-07-10 11:15:28,482 - Converting to JSON format
DEBUG admin1 2020-07-10 11:15:28,485 - Exporting clustering results
DEBUG admin1 2020-07-10 11:15:28,494 - Writting summary
DEBUG admin1 2020-07-10 11:15:28,512 - Writting clustering information to datafile
DEBUG admin1 2020-07-10 11:15:28,549 - Getting scatter plot for clustered data
INFO admin1 2020-07-10 11:15:28,954 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:15:28,956 - 127.0.0.1 - - [10/Jul/2020 11:15:28] "[37mPOST /clustering/agglomerative?k=5&format=csv&uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO vaishnavi 2020-07-10 11:15:29,000 - Requested to get clustering details.
DEBUG vaishnavi 2020-07-10 11:15:29,002 - Reading datafile for clustered data
INFO vaishnavi 2020-07-10 11:15:29,003 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:15:29,022 - 127.0.0.1 - - [10/Jul/2020 11:15:29] "[37mGET /clustering/dbscan?uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO vaishnavi 2020-07-10 11:15:29,086 - Requested to get clustering summary.
DEBUG vaishnavi 2020-07-10 11:15:29,086 - Reading datafile for clustering summary
INFO vaishnavi 2020-07-10 11:15:29,093 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:15:29,098 - 127.0.0.1 - - [10/Jul/2020 11:15:29] "[37mGET /clustering/summary?uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO vaishnavi 2020-07-10 11:15:29,181 - Requested to cluster documents.
DEBUG vaishnavi 2020-07-10 11:15:29,181 - Reading datafile..
DEBUG vaishnavi 2020-07-10 11:15:29,183 - Calculating tf-idf
DEBUG vaishnavi 2020-07-10 11:15:29,335 - Calculating variance threshold
DEBUG vaishnavi 2020-07-10 11:15:29,357 - Applying PCA
DEBUG vaishnavi 2020-07-10 11:15:29,439 - Applying Agglomerative algorithm
DEBUG vaishnavi 2020-07-10 11:15:29,455 - Sorting clusters
DEBUG vaishnavi 2020-07-10 11:15:29,457 - Converting to JSON format
DEBUG vaishnavi 2020-07-10 11:15:29,459 - Exporting clustering results
DEBUG vaishnavi 2020-07-10 11:15:29,461 - Writting summary
DEBUG vaishnavi 2020-07-10 11:15:29,463 - Writting clustering information to datafile
DEBUG vaishnavi 2020-07-10 11:15:29,474 - Getting scatter plot for clustered data
INFO vaishnavi 2020-07-10 11:15:29,859 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:15:29,861 - 127.0.0.1 - - [10/Jul/2020 11:15:29] "[37mPOST /clustering/agglomerative?k=5&format=csv&uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 11:15:31,909 - Requested to get clustering details.
DEBUG admin1 2020-07-10 11:15:31,909 - Reading datafile for clustered data
INFO admin1 2020-07-10 11:15:31,911 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:15:31,968 - 127.0.0.1 - - [10/Jul/2020 11:15:31] "[37mGET /clustering/agglomerative?uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 11:15:31,991 - Requested to get clustering summary.
DEBUG admin1 2020-07-10 11:15:31,991 - Reading datafile for clustering summary
INFO admin1 2020-07-10 11:15:31,992 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:15:31,995 - 127.0.0.1 - - [10/Jul/2020 11:15:31] "[37mGET /clustering/summary?uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 11:15:32,170 - Requested to cluster documents.
DEBUG admin1 2020-07-10 11:15:32,171 - Reading datafile..
DEBUG admin1 2020-07-10 11:15:32,173 - Calculating tf-idf
DEBUG admin1 2020-07-10 11:15:32,334 - Calculating variance threshold
DEBUG admin1 2020-07-10 11:15:32,367 - Applying PCA
DEBUG admin1 2020-07-10 11:15:32,409 - Applying Birch algorithm
DEBUG admin1 2020-07-10 11:15:32,429 - Sorting clusters
DEBUG admin1 2020-07-10 11:15:32,435 - Converting to JSON format
DEBUG admin1 2020-07-10 11:15:32,445 - Exporting clustering results
DEBUG admin1 2020-07-10 11:15:32,482 - Writting summary
DEBUG admin1 2020-07-10 11:15:32,533 - Writting clustering information to datafile
DEBUG admin1 2020-07-10 11:15:32,556 - Getting scatter plot for clustered data
INFO admin1 2020-07-10 11:15:32,895 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:15:32,899 - 127.0.0.1 - - [10/Jul/2020 11:15:32] "[37mPOST /clustering/birch?k=5&format=csv&uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO vaishnavi 2020-07-10 11:15:32,900 - Requested to get clustering details.
DEBUG vaishnavi 2020-07-10 11:15:32,901 - Reading datafile for clustered data
INFO vaishnavi 2020-07-10 11:15:32,902 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:15:32,906 - 127.0.0.1 - - [10/Jul/2020 11:15:32] "[37mGET /clustering/agglomerative?uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO vaishnavi 2020-07-10 11:15:33,122 - Requested to get clustering summary.
DEBUG vaishnavi 2020-07-10 11:15:33,123 - Reading datafile for clustering summary
INFO vaishnavi 2020-07-10 11:15:33,124 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:15:33,126 - 127.0.0.1 - - [10/Jul/2020 11:15:33] "[37mGET /clustering/summary?uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO vaishnavi 2020-07-10 11:15:33,145 - Requested to cluster documents.
DEBUG vaishnavi 2020-07-10 11:15:33,145 - Reading datafile..
DEBUG vaishnavi 2020-07-10 11:15:33,146 - Calculating tf-idf
DEBUG vaishnavi 2020-07-10 11:15:33,226 - Calculating variance threshold
DEBUG vaishnavi 2020-07-10 11:15:33,242 - Applying PCA
DEBUG vaishnavi 2020-07-10 11:15:33,279 - Applying Birch algorithm
DEBUG vaishnavi 2020-07-10 11:15:33,304 - Sorting clusters
DEBUG vaishnavi 2020-07-10 11:15:33,309 - Converting to JSON format
DEBUG vaishnavi 2020-07-10 11:15:33,312 - Exporting clustering results
DEBUG vaishnavi 2020-07-10 11:15:33,315 - Writting summary
DEBUG vaishnavi 2020-07-10 11:15:33,318 - Writting clustering information to datafile
DEBUG vaishnavi 2020-07-10 11:15:33,371 - Getting scatter plot for clustered data
INFO vaishnavi 2020-07-10 11:15:33,852 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:15:33,853 - 127.0.0.1 - - [10/Jul/2020 11:15:33] "[37mPOST /clustering/birch?k=5&format=csv&uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO vaishnavi 2020-07-10 11:15:36,823 - Requested to get clustering details.
DEBUG vaishnavi 2020-07-10 11:15:36,823 - Reading datafile for clustered data
INFO vaishnavi 2020-07-10 11:15:36,824 - Get request for clustered data served successfully
INFO admin1 2020-07-10 11:15:36,912 - Requested to get clustering details.
DEBUG admin1 2020-07-10 11:15:36,913 - Reading datafile for clustered data
INFO admin1 2020-07-10 11:15:36,915 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:15:36,929 - 127.0.0.1 - - [10/Jul/2020 11:15:36] "[37mGET /clustering/birch?uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO werkzeug 2020-07-10 11:15:36,939 - 127.0.0.1 - - [10/Jul/2020 11:15:36] "[37mGET /clustering/birch?uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 11:15:36,960 - Requested to get clustering summary.
DEBUG admin1 2020-07-10 11:15:36,963 - Reading datafile for clustering summary
INFO vaishnavi 2020-07-10 11:15:36,963 - Requested to get clustering summary.
DEBUG vaishnavi 2020-07-10 11:15:36,964 - Reading datafile for clustering summary
INFO admin1 2020-07-10 11:15:36,965 - Get request for clustering summary served successfully
INFO vaishnavi 2020-07-10 11:15:36,965 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:15:36,970 - 127.0.0.1 - - [10/Jul/2020 11:15:36] "[37mGET /clustering/summary?uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO werkzeug 2020-07-10 11:15:36,972 - 127.0.0.1 - - [10/Jul/2020 11:15:36] "[37mGET /clustering/summary?uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:16:45,202 - Requested to extract data.
DEBUG sita 2020-07-10 11:16:45,203 - Extracted links and ISINs from JSON object.
INFO admin1 2020-07-10 11:16:48,196 - Requested to extract data.
DEBUG admin1 2020-07-10 11:16:48,196 - Extracted links and ISINs from JSON object.
INFO vaishnavi 2020-07-10 11:16:49,337 - Requested to extract data.
DEBUG vaishnavi 2020-07-10 11:16:49,337 - Extracted links and ISINs from JSON object.
INFO ram 2020-07-10 11:16:50,586 - Requested to extract data.
DEBUG ram 2020-07-10 11:16:50,586 - Extracted links and ISINs from JSON object.
INFO sita 2020-07-10 11:16:57,218 - Made entry for extracted data in datafile successfully.
INFO werkzeug 2020-07-10 11:16:57,219 - 127.0.0.1 - - [10/Jul/2020 11:16:57] "[37mPOST /extract?filepath=ISINS_v3.xlsx&no_of_docs=15&uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:16:57,230 - Requested to export extracted data.
INFO sita 2020-07-10 11:16:57,912 - Exported successfully
INFO werkzeug 2020-07-10 11:16:57,914 - 127.0.0.1 - - [10/Jul/2020 11:16:57] "[37mPOST /extract/export?filepath=extract.xlsx&uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:16:57,924 - Requested to pre-process data.
INFO ram 2020-07-10 11:16:58,026 - Made entry for extracted data in datafile successfully.
INFO werkzeug 2020-07-10 11:16:58,044 - 127.0.0.1 - - [10/Jul/2020 11:16:58] "[37mPOST /extract?filepath=ISINS_v3.xlsx&no_of_docs=9&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:16:58,113 - Requested to export extracted data.
INFO admin1 2020-07-10 11:17:01,758 - Made entry for extracted data in datafile successfully.
INFO werkzeug 2020-07-10 11:17:01,759 - 127.0.0.1 - - [10/Jul/2020 11:17:01] "[37mPOST /extract?filepath=ISINS_v3.xlsx&no_of_docs=15&uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 11:17:01,911 - Requested to export extracted data.
INFO ram 2020-07-10 11:17:02,137 - Exported successfully
INFO werkzeug 2020-07-10 11:17:02,162 - 127.0.0.1 - - [10/Jul/2020 11:17:02] "[37mPOST /extract/export?filepath=extract.xlsx&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:17:02,313 - Requested to pre-process data.
INFO vaishnavi 2020-07-10 11:17:03,727 - Made entry for extracted data in datafile successfully.
INFO werkzeug 2020-07-10 11:17:03,739 - 127.0.0.1 - - [10/Jul/2020 11:17:03] "[37mPOST /extract?filepath=ISINS_v3.xlsx&no_of_docs=15&uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO vaishnavi 2020-07-10 11:17:03,863 - Requested to export extracted data.
INFO admin1 2020-07-10 11:17:07,589 - Exported successfully
INFO werkzeug 2020-07-10 11:17:07,631 - 127.0.0.1 - - [10/Jul/2020 11:17:07] "[37mPOST /extract/export?filepath=extract.xlsx&uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 11:17:07,764 - Requested to pre-process data.
INFO vaishnavi 2020-07-10 11:17:09,563 - Exported successfully
INFO werkzeug 2020-07-10 11:17:09,571 - 127.0.0.1 - - [10/Jul/2020 11:17:09] "[37mPOST /extract/export?filepath=extract.xlsx&uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO vaishnavi 2020-07-10 11:17:09,755 - Requested to pre-process data.
DEBUG ram 2020-07-10 11:17:33,109 - Pre-processed data
DEBUG ram 2020-07-10 11:17:33,295 - Made entry of pre-processed data in datafile successfully
INFO werkzeug 2020-07-10 11:17:33,331 - 127.0.0.1 - - [10/Jul/2020 11:17:33] "[37mPOST /preprocess?steps=url&steps=stemming&steps=lemmatization&steps=stopwords&steps=unusual&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:17:33,472 - Requested to export pre-processed data.
DEBUG ram 2020-07-10 11:17:33,478 - Reading pre-processed datafile.
DEBUG ram 2020-07-10 11:17:34,123 - Exporting pre-processed data to excel file.
INFO ram 2020-07-10 11:17:37,591 - Exported pre-processed data successfully.
INFO werkzeug 2020-07-10 11:17:37,657 - 127.0.0.1 - - [10/Jul/2020 11:17:37] "[37mPOST /preprocess/export?filepath=prep.xlsx&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:17:37,891 - Requested to cluster documents.
DEBUG ram 2020-07-10 11:17:37,915 - Reading datafile..
DEBUG ram 2020-07-10 11:17:38,214 - Calculating tf-idf
DEBUG ram 2020-07-10 11:17:38,767 - Calculating variance threshold
DEBUG ram 2020-07-10 11:17:38,856 - Applying PCA
DEBUG ram 2020-07-10 11:17:39,018 - Applying K-Means algorithm
DEBUG ram 2020-07-10 11:17:39,987 - Sorting clusters
DEBUG ram 2020-07-10 11:17:40,061 - Converting to JSON format
DEBUG ram 2020-07-10 11:17:40,165 - Exporting clustering results
DEBUG ram 2020-07-10 11:17:40,245 - Writting summary
DEBUG ram 2020-07-10 11:17:40,455 - Writting clustering information to datafile
DEBUG ram 2020-07-10 11:17:40,589 - Getting scatter plot for clustered data
INFO ram 2020-07-10 11:17:42,595 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:17:42,740 - 127.0.0.1 - - [10/Jul/2020 11:17:42] "[37mPOST /clustering/kmeans?k=4&format=csv&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG sita 2020-07-10 11:17:44,874 - Pre-processed data
DEBUG sita 2020-07-10 11:17:44,971 - Made entry of pre-processed data in datafile successfully
INFO werkzeug 2020-07-10 11:17:44,973 - 127.0.0.1 - - [10/Jul/2020 11:17:44] "[37mPOST /preprocess?steps=url&steps=stemming&steps=lemmatization&steps=stopwords&steps=unusual&uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:17:45,112 - Requested to export pre-processed data.
DEBUG sita 2020-07-10 11:17:45,149 - Reading pre-processed datafile.
DEBUG sita 2020-07-10 11:17:45,313 - Exporting pre-processed data to excel file.
INFO ram 2020-07-10 11:17:46,814 - Requested to get clustering details.
DEBUG ram 2020-07-10 11:17:46,854 - Reading datafile for clustered data
INFO ram 2020-07-10 11:17:46,886 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:17:46,948 - 127.0.0.1 - - [10/Jul/2020 11:17:46] "[37mGET /clustering/kmeans?uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:17:47,216 - Requested to get clustering summary.
DEBUG ram 2020-07-10 11:17:47,242 - Reading datafile for clustering summary
INFO ram 2020-07-10 11:17:47,621 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:17:47,737 - 127.0.0.1 - - [10/Jul/2020 11:17:47] "[37mGET /clustering/summary?uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:17:47,945 - Exported pre-processed data successfully.
INFO werkzeug 2020-07-10 11:17:47,958 - 127.0.0.1 - - [10/Jul/2020 11:17:47] "[37mPOST /preprocess/export?filepath=prep.xlsx&uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:17:47,957 - Requested to cluster documents.
DEBUG ram 2020-07-10 11:17:48,031 - Reading datafile..
INFO sita 2020-07-10 11:17:48,274 - Requested to cluster documents.
DEBUG sita 2020-07-10 11:17:48,292 - Reading datafile..
DEBUG ram 2020-07-10 11:17:48,695 - Calculating tf-idf
DEBUG sita 2020-07-10 11:17:48,776 - Calculating tf-idf
DEBUG ram 2020-07-10 11:17:49,063 - Calculating variance threshold
DEBUG ram 2020-07-10 11:17:49,172 - Applying PCA
DEBUG sita 2020-07-10 11:17:49,320 - Calculating variance threshold
DEBUG ram 2020-07-10 11:17:49,374 - Applying DBSCAN algorithm
DEBUG sita 2020-07-10 11:17:49,410 - Applying PCA
DEBUG ram 2020-07-10 11:17:49,446 - Sorting clusters
DEBUG ram 2020-07-10 11:17:49,466 - Converting to JSON format
DEBUG ram 2020-07-10 11:17:49,479 - Exporting clustering results
DEBUG ram 2020-07-10 11:17:49,573 - Writting summary
DEBUG sita 2020-07-10 11:17:49,686 - Applying K-Means algorithm
DEBUG ram 2020-07-10 11:17:49,685 - Writting clustering information to datafile
DEBUG ram 2020-07-10 11:17:49,806 - Getting scatter plot for clustered data
DEBUG sita 2020-07-10 11:17:50,643 - Sorting clusters
DEBUG sita 2020-07-10 11:17:50,686 - Converting to JSON format
DEBUG sita 2020-07-10 11:17:50,722 - Exporting clustering results
DEBUG sita 2020-07-10 11:17:50,932 - Writting summary
DEBUG sita 2020-07-10 11:17:51,068 - Writting clustering information to datafile
INFO ram 2020-07-10 11:17:51,068 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:17:51,121 - 127.0.0.1 - - [10/Jul/2020 11:17:51] "[37mPOST /clustering/dbscan?eps=0.3&min=1&format=csv&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG sita 2020-07-10 11:17:51,164 - Getting scatter plot for clustered data
INFO sita 2020-07-10 11:17:53,247 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:17:53,272 - 127.0.0.1 - - [10/Jul/2020 11:17:53] "[37mPOST /clustering/kmeans?k=4&format=csv&uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:17:53,305 - Requested to get clustering details.
DEBUG ram 2020-07-10 11:17:53,323 - Reading datafile for clustered data
INFO ram 2020-07-10 11:17:53,497 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:17:53,543 - 127.0.0.1 - - [10/Jul/2020 11:17:53] "[37mGET /clustering/dbscan?uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:17:53,730 - Requested to get clustering summary.
DEBUG ram 2020-07-10 11:17:53,736 - Reading datafile for clustering summary
INFO ram 2020-07-10 11:17:53,749 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:17:53,825 - 127.0.0.1 - - [10/Jul/2020 11:17:53] "[37mGET /clustering/summary?uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:17:54,004 - Requested to cluster documents.
DEBUG ram 2020-07-10 11:17:54,005 - Reading datafile..
DEBUG ram 2020-07-10 11:17:54,183 - Calculating tf-idf
DEBUG ram 2020-07-10 11:17:54,438 - Calculating variance threshold
DEBUG ram 2020-07-10 11:17:54,654 - Applying PCA
DEBUG ram 2020-07-10 11:17:54,825 - Applying Agglomerative algorithm
DEBUG ram 2020-07-10 11:17:54,936 - Sorting clusters
DEBUG ram 2020-07-10 11:17:54,949 - Converting to JSON format
DEBUG ram 2020-07-10 11:17:54,952 - Exporting clustering results
DEBUG ram 2020-07-10 11:17:55,045 - Writting summary
DEBUG ram 2020-07-10 11:17:55,089 - Writting clustering information to datafile
DEBUG ram 2020-07-10 11:17:55,136 - Getting scatter plot for clustered data
INFO sita 2020-07-10 11:17:55,571 - Requested to get clustering details.
DEBUG sita 2020-07-10 11:17:55,571 - Reading datafile for clustered data
INFO sita 2020-07-10 11:17:55,661 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:17:55,691 - 127.0.0.1 - - [10/Jul/2020 11:17:55] "[37mGET /clustering/kmeans?uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:17:55,952 - Requested to get clustering summary.
DEBUG sita 2020-07-10 11:17:55,952 - Reading datafile for clustering summary
INFO sita 2020-07-10 11:17:55,968 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:17:55,977 - 127.0.0.1 - - [10/Jul/2020 11:17:55] "[37mGET /clustering/summary?uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:17:56,154 - Requested to cluster documents.
DEBUG sita 2020-07-10 11:17:56,180 - Reading datafile..
DEBUG sita 2020-07-10 11:17:56,727 - Calculating tf-idf
INFO ram 2020-07-10 11:17:57,003 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:17:57,027 - 127.0.0.1 - - [10/Jul/2020 11:17:57] "[37mPOST /clustering/agglomerative?k=5&format=csv&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG sita 2020-07-10 11:17:57,123 - Calculating variance threshold
DEBUG sita 2020-07-10 11:17:57,187 - Applying PCA
DEBUG sita 2020-07-10 11:17:57,511 - Applying DBSCAN algorithm
DEBUG sita 2020-07-10 11:17:57,692 - Sorting clusters
DEBUG sita 2020-07-10 11:17:57,717 - Converting to JSON format
DEBUG sita 2020-07-10 11:17:57,728 - Exporting clustering results
DEBUG sita 2020-07-10 11:17:57,765 - Writting summary
DEBUG sita 2020-07-10 11:17:57,858 - Writting clustering information to datafile
DEBUG sita 2020-07-10 11:17:58,005 - Getting scatter plot for clustered data
INFO ram 2020-07-10 11:17:58,992 - Requested to get clustering details.
DEBUG ram 2020-07-10 11:17:58,992 - Reading datafile for clustered data
INFO ram 2020-07-10 11:17:58,993 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:17:59,097 - 127.0.0.1 - - [10/Jul/2020 11:17:59] "[37mGET /clustering/agglomerative?uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:17:59,251 - Requested to get clustering summary.
DEBUG ram 2020-07-10 11:17:59,308 - Reading datafile for clustering summary
INFO sita 2020-07-10 11:17:59,529 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:17:59,554 - 127.0.0.1 - - [10/Jul/2020 11:17:59] "[37mPOST /clustering/dbscan?eps=0.3&min=1&format=csv&uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:17:59,629 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:17:59,658 - 127.0.0.1 - - [10/Jul/2020 11:17:59] "[37mGET /clustering/summary?uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:17:59,911 - Requested to cluster documents.
DEBUG ram 2020-07-10 11:17:59,911 - Reading datafile..
DEBUG ram 2020-07-10 11:18:00,076 - Calculating tf-idf
DEBUG ram 2020-07-10 11:18:00,284 - Calculating variance threshold
DEBUG ram 2020-07-10 11:18:00,334 - Applying PCA
DEBUG ram 2020-07-10 11:18:00,492 - Applying Birch algorithm
DEBUG ram 2020-07-10 11:18:00,661 - Sorting clusters
DEBUG ram 2020-07-10 11:18:00,666 - Converting to JSON format
DEBUG ram 2020-07-10 11:18:00,698 - Exporting clustering results
DEBUG admin1 2020-07-10 11:18:00,961 - Pre-processed data
DEBUG ram 2020-07-10 11:18:00,989 - Writting summary
DEBUG admin1 2020-07-10 11:18:01,028 - Made entry of pre-processed data in datafile successfully
INFO werkzeug 2020-07-10 11:18:01,030 - 127.0.0.1 - - [10/Jul/2020 11:18:01] "[37mPOST /preprocess?steps=url&steps=stemming&steps=lemmatization&steps=stopwords&steps=unusual&uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG ram 2020-07-10 11:18:01,042 - Writting clustering information to datafile
DEBUG ram 2020-07-10 11:18:01,053 - Getting scatter plot for clustered data
INFO admin1 2020-07-10 11:18:01,145 - Requested to export pre-processed data.
DEBUG admin1 2020-07-10 11:18:01,152 - Reading pre-processed datafile.
DEBUG admin1 2020-07-10 11:18:01,361 - Exporting pre-processed data to excel file.
INFO ram 2020-07-10 11:18:01,894 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:18:01,895 - 127.0.0.1 - - [10/Jul/2020 11:18:01] "[37mPOST /clustering/birch?k=5&format=csv&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:18:02,362 - Requested to get clustering details.
DEBUG sita 2020-07-10 11:18:02,367 - Reading datafile for clustered data
INFO sita 2020-07-10 11:18:02,485 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:18:02,570 - 127.0.0.1 - - [10/Jul/2020 11:18:02] "[37mGET /clustering/dbscan?uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:18:02,694 - Requested to get clustering summary.
DEBUG sita 2020-07-10 11:18:02,695 - Reading datafile for clustering summary
INFO sita 2020-07-10 11:18:02,696 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:18:02,698 - 127.0.0.1 - - [10/Jul/2020 11:18:02] "[37mGET /clustering/summary?uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:18:02,752 - Requested to cluster documents.
DEBUG sita 2020-07-10 11:18:02,760 - Reading datafile..
DEBUG sita 2020-07-10 11:18:02,831 - Calculating tf-idf
DEBUG sita 2020-07-10 11:18:03,119 - Calculating variance threshold
DEBUG sita 2020-07-10 11:18:03,185 - Applying PCA
DEBUG sita 2020-07-10 11:18:03,392 - Applying Agglomerative algorithm
DEBUG sita 2020-07-10 11:18:03,489 - Sorting clusters
DEBUG sita 2020-07-10 11:18:03,504 - Converting to JSON format
DEBUG sita 2020-07-10 11:18:03,507 - Exporting clustering results
DEBUG sita 2020-07-10 11:18:03,587 - Writting summary
DEBUG sita 2020-07-10 11:18:03,706 - Writting clustering information to datafile
DEBUG sita 2020-07-10 11:18:03,742 - Getting scatter plot for clustered data
INFO admin1 2020-07-10 11:18:03,815 - Exported pre-processed data successfully.
INFO werkzeug 2020-07-10 11:18:03,817 - 127.0.0.1 - - [10/Jul/2020 11:18:03] "[37mPOST /preprocess/export?filepath=prep.xlsx&uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 11:18:03,964 - Requested to cluster documents.
DEBUG admin1 2020-07-10 11:18:03,964 - Reading datafile..
DEBUG admin1 2020-07-10 11:18:04,047 - Calculating tf-idf
DEBUG admin1 2020-07-10 11:18:04,460 - Calculating variance threshold
DEBUG admin1 2020-07-10 11:18:04,541 - Applying PCA
DEBUG vaishnavi 2020-07-10 11:18:04,572 - Pre-processed data
INFO ram 2020-07-10 11:18:04,590 - Requested to get clustering details.
DEBUG ram 2020-07-10 11:18:04,591 - Reading datafile for clustered data
DEBUG vaishnavi 2020-07-10 11:18:04,593 - Made entry of pre-processed data in datafile successfully
INFO werkzeug 2020-07-10 11:18:04,594 - 127.0.0.1 - - [10/Jul/2020 11:18:04] "[37mPOST /preprocess?steps=url&steps=stemming&steps=lemmatization&steps=stopwords&steps=unusual&uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:18:04,596 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:18:04,614 - 127.0.0.1 - - [10/Jul/2020 11:18:04] "[37mGET /clustering/birch?uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG admin1 2020-07-10 11:18:04,633 - Applying K-Means algorithm
INFO sita 2020-07-10 11:18:04,712 - Performed clustering successfully
INFO vaishnavi 2020-07-10 11:18:04,713 - Requested to export pre-processed data.
INFO werkzeug 2020-07-10 11:18:04,721 - 127.0.0.1 - - [10/Jul/2020 11:18:04] "[37mPOST /clustering/agglomerative?k=5&format=csv&uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG vaishnavi 2020-07-10 11:18:04,723 - Reading pre-processed datafile.
INFO ram 2020-07-10 11:18:04,724 - Requested to get clustering summary.
DEBUG ram 2020-07-10 11:18:04,734 - Reading datafile for clustering summary
INFO ram 2020-07-10 11:18:04,755 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:18:04,757 - 127.0.0.1 - - [10/Jul/2020 11:18:04] "[37mGET /clustering/summary?uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG vaishnavi 2020-07-10 11:18:04,793 - Exporting pre-processed data to excel file.
DEBUG admin1 2020-07-10 11:18:04,800 - Sorting clusters
DEBUG admin1 2020-07-10 11:18:04,836 - Converting to JSON format
DEBUG admin1 2020-07-10 11:18:04,838 - Exporting clustering results
DEBUG admin1 2020-07-10 11:18:04,842 - Writting summary
DEBUG admin1 2020-07-10 11:18:04,878 - Writting clustering information to datafile
DEBUG admin1 2020-07-10 11:18:04,880 - Getting scatter plot for clustered data
INFO vaishnavi 2020-07-10 11:18:05,082 - Exported pre-processed data successfully.
INFO werkzeug 2020-07-10 11:18:05,084 - 127.0.0.1 - - [10/Jul/2020 11:18:05] "[37mPOST /preprocess/export?filepath=prep.xlsx&uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO vaishnavi 2020-07-10 11:18:05,172 - Requested to cluster documents.
DEBUG vaishnavi 2020-07-10 11:18:05,176 - Reading datafile..
DEBUG vaishnavi 2020-07-10 11:18:05,201 - Calculating tf-idf
DEBUG vaishnavi 2020-07-10 11:18:05,561 - Calculating variance threshold
DEBUG vaishnavi 2020-07-10 11:18:05,648 - Applying PCA
INFO admin1 2020-07-10 11:18:05,649 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:18:05,662 - 127.0.0.1 - - [10/Jul/2020 11:18:05] "[37mPOST /clustering/kmeans?k=4&format=csv&uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG vaishnavi 2020-07-10 11:18:05,683 - Applying K-Means algorithm
DEBUG vaishnavi 2020-07-10 11:18:05,816 - Sorting clusters
DEBUG vaishnavi 2020-07-10 11:18:05,819 - Converting to JSON format
DEBUG vaishnavi 2020-07-10 11:18:05,821 - Exporting clustering results
DEBUG vaishnavi 2020-07-10 11:18:05,833 - Writting summary
DEBUG vaishnavi 2020-07-10 11:18:05,835 - Writting clustering information to datafile
DEBUG vaishnavi 2020-07-10 11:18:05,840 - Getting scatter plot for clustered data
INFO vaishnavi 2020-07-10 11:18:06,181 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:18:06,182 - 127.0.0.1 - - [10/Jul/2020 11:18:06] "[37mPOST /clustering/kmeans?k=4&format=csv&uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:18:07,923 - Requested to get clustering details.
DEBUG sita 2020-07-10 11:18:07,924 - Reading datafile for clustered data
INFO sita 2020-07-10 11:18:07,926 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:18:07,954 - 127.0.0.1 - - [10/Jul/2020 11:18:07] "[37mGET /clustering/agglomerative?uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:18:08,011 - Requested to get clustering summary.
DEBUG sita 2020-07-10 11:18:08,012 - Reading datafile for clustering summary
INFO sita 2020-07-10 11:18:08,013 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:18:08,015 - 127.0.0.1 - - [10/Jul/2020 11:18:08] "[37mGET /clustering/summary?uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:18:08,079 - Requested to cluster documents.
DEBUG sita 2020-07-10 11:18:08,080 - Reading datafile..
DEBUG sita 2020-07-10 11:18:08,086 - Calculating tf-idf
DEBUG sita 2020-07-10 11:18:08,193 - Calculating variance threshold
DEBUG sita 2020-07-10 11:18:08,220 - Applying PCA
DEBUG sita 2020-07-10 11:18:08,270 - Applying Birch algorithm
DEBUG sita 2020-07-10 11:18:08,293 - Sorting clusters
DEBUG sita 2020-07-10 11:18:08,295 - Converting to JSON format
DEBUG sita 2020-07-10 11:18:08,311 - Exporting clustering results
DEBUG sita 2020-07-10 11:18:08,326 - Writting summary
DEBUG sita 2020-07-10 11:18:08,348 - Writting clustering information to datafile
DEBUG sita 2020-07-10 11:18:08,406 - Getting scatter plot for clustered data
INFO sita 2020-07-10 11:18:08,767 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:18:08,773 - 127.0.0.1 - - [10/Jul/2020 11:18:08] "[37mPOST /clustering/birch?k=5&format=csv&uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 11:18:09,044 - Requested to get clustering details.
DEBUG admin1 2020-07-10 11:18:09,045 - Reading datafile for clustered data
INFO admin1 2020-07-10 11:18:09,047 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:18:09,097 - 127.0.0.1 - - [10/Jul/2020 11:18:09] "[37mGET /clustering/kmeans?uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 11:18:09,303 - Requested to get clustering summary.
DEBUG admin1 2020-07-10 11:18:09,303 - Reading datafile for clustering summary
INFO admin1 2020-07-10 11:18:09,304 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:18:09,306 - 127.0.0.1 - - [10/Jul/2020 11:18:09] "[37mGET /clustering/summary?uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 11:18:09,514 - Requested to cluster documents.
DEBUG admin1 2020-07-10 11:18:09,515 - Reading datafile..
DEBUG admin1 2020-07-10 11:18:09,516 - Calculating tf-idf
DEBUG admin1 2020-07-10 11:18:09,992 - Calculating variance threshold
DEBUG admin1 2020-07-10 11:18:10,043 - Applying PCA
DEBUG admin1 2020-07-10 11:18:10,143 - Applying DBSCAN algorithm
DEBUG admin1 2020-07-10 11:18:10,192 - Sorting clusters
DEBUG admin1 2020-07-10 11:18:10,195 - Converting to JSON format
DEBUG admin1 2020-07-10 11:18:10,198 - Exporting clustering results
DEBUG admin1 2020-07-10 11:18:10,201 - Writting summary
INFO vaishnavi 2020-07-10 11:18:10,215 - Requested to get clustering details.
DEBUG vaishnavi 2020-07-10 11:18:10,215 - Reading datafile for clustered data
INFO vaishnavi 2020-07-10 11:18:10,217 - Get request for clustered data served successfully
DEBUG admin1 2020-07-10 11:18:10,220 - Writting clustering information to datafile
DEBUG admin1 2020-07-10 11:18:10,222 - Getting scatter plot for clustered data
INFO werkzeug 2020-07-10 11:18:10,312 - 127.0.0.1 - - [10/Jul/2020 11:18:10] "[37mGET /clustering/kmeans?uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO vaishnavi 2020-07-10 11:18:10,534 - Requested to get clustering summary.
DEBUG vaishnavi 2020-07-10 11:18:10,534 - Reading datafile for clustering summary
INFO vaishnavi 2020-07-10 11:18:10,537 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:18:10,551 - 127.0.0.1 - - [10/Jul/2020 11:18:10] "[37mGET /clustering/summary?uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 11:18:10,767 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:18:10,768 - 127.0.0.1 - - [10/Jul/2020 11:18:10] "[37mPOST /clustering/dbscan?eps=0.3&min=1&format=csv&uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO vaishnavi 2020-07-10 11:18:10,808 - Requested to cluster documents.
DEBUG vaishnavi 2020-07-10 11:18:10,809 - Reading datafile..
DEBUG vaishnavi 2020-07-10 11:18:10,811 - Calculating tf-idf
DEBUG vaishnavi 2020-07-10 11:18:10,937 - Calculating variance threshold
DEBUG vaishnavi 2020-07-10 11:18:10,963 - Applying PCA
DEBUG vaishnavi 2020-07-10 11:18:10,999 - Applying DBSCAN algorithm
DEBUG vaishnavi 2020-07-10 11:18:11,022 - Sorting clusters
DEBUG vaishnavi 2020-07-10 11:18:11,030 - Converting to JSON format
DEBUG vaishnavi 2020-07-10 11:18:11,033 - Exporting clustering results
DEBUG vaishnavi 2020-07-10 11:18:11,043 - Writting summary
DEBUG vaishnavi 2020-07-10 11:18:11,088 - Writting clustering information to datafile
DEBUG vaishnavi 2020-07-10 11:18:11,146 - Getting scatter plot for clustered data
INFO vaishnavi 2020-07-10 11:18:11,485 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:18:11,487 - 127.0.0.1 - - [10/Jul/2020 11:18:11] "[37mPOST /clustering/dbscan?eps=0.3&min=1&format=csv&uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:18:14,382 - Requested to get clustering details.
DEBUG sita 2020-07-10 11:18:14,382 - Reading datafile for clustered data
INFO sita 2020-07-10 11:18:14,384 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:18:14,389 - 127.0.0.1 - - [10/Jul/2020 11:18:14] "[37mGET /clustering/birch?uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:18:14,447 - Requested to get clustering summary.
DEBUG sita 2020-07-10 11:18:14,447 - Reading datafile for clustering summary
INFO sita 2020-07-10 11:18:14,448 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:18:14,451 - 127.0.0.1 - - [10/Jul/2020 11:18:14] "[37mGET /clustering/summary?uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 11:18:14,601 - Requested to get clustering details.
DEBUG admin1 2020-07-10 11:18:14,602 - Reading datafile for clustered data
INFO admin1 2020-07-10 11:18:14,603 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:18:14,610 - 127.0.0.1 - - [10/Jul/2020 11:18:14] "[37mGET /clustering/dbscan?uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 11:18:14,902 - Requested to get clustering summary.
DEBUG admin1 2020-07-10 11:18:14,903 - Reading datafile for clustering summary
INFO admin1 2020-07-10 11:18:14,905 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:18:14,909 - 127.0.0.1 - - [10/Jul/2020 11:18:14] "[37mGET /clustering/summary?uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 11:18:14,999 - Requested to cluster documents.
DEBUG admin1 2020-07-10 11:18:15,000 - Reading datafile..
DEBUG admin1 2020-07-10 11:18:15,002 - Calculating tf-idf
INFO vaishnavi 2020-07-10 11:18:15,131 - Requested to get clustering details.
DEBUG vaishnavi 2020-07-10 11:18:15,133 - Reading datafile for clustered data
DEBUG admin1 2020-07-10 11:18:15,137 - Calculating variance threshold
INFO vaishnavi 2020-07-10 11:18:15,174 - Get request for clustered data served successfully
DEBUG admin1 2020-07-10 11:18:15,182 - Applying PCA
INFO werkzeug 2020-07-10 11:18:15,216 - 127.0.0.1 - - [10/Jul/2020 11:18:15] "[37mGET /clustering/dbscan?uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG admin1 2020-07-10 11:18:15,239 - Applying Agglomerative algorithm
DEBUG admin1 2020-07-10 11:18:15,302 - Sorting clusters
DEBUG admin1 2020-07-10 11:18:15,306 - Converting to JSON format
DEBUG admin1 2020-07-10 11:18:15,312 - Exporting clustering results
INFO vaishnavi 2020-07-10 11:18:15,317 - Requested to get clustering summary.
DEBUG vaishnavi 2020-07-10 11:18:15,318 - Reading datafile for clustering summary
INFO vaishnavi 2020-07-10 11:18:15,322 - Get request for clustering summary served successfully
DEBUG admin1 2020-07-10 11:18:15,324 - Writting summary
INFO werkzeug 2020-07-10 11:18:15,326 - 127.0.0.1 - - [10/Jul/2020 11:18:15] "[37mGET /clustering/summary?uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG admin1 2020-07-10 11:18:15,328 - Writting clustering information to datafile
DEBUG admin1 2020-07-10 11:18:15,331 - Getting scatter plot for clustered data
INFO vaishnavi 2020-07-10 11:18:15,394 - Requested to cluster documents.
DEBUG vaishnavi 2020-07-10 11:18:15,403 - Reading datafile..
DEBUG vaishnavi 2020-07-10 11:18:15,438 - Calculating tf-idf
DEBUG vaishnavi 2020-07-10 11:18:15,714 - Calculating variance threshold
DEBUG vaishnavi 2020-07-10 11:18:15,777 - Applying PCA
INFO admin1 2020-07-10 11:18:15,896 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:18:15,897 - 127.0.0.1 - - [10/Jul/2020 11:18:15] "[37mPOST /clustering/agglomerative?k=5&format=csv&uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG vaishnavi 2020-07-10 11:18:15,914 - Applying Agglomerative algorithm
DEBUG vaishnavi 2020-07-10 11:18:15,940 - Sorting clusters
DEBUG vaishnavi 2020-07-10 11:18:15,949 - Converting to JSON format
DEBUG vaishnavi 2020-07-10 11:18:15,956 - Exporting clustering results
DEBUG vaishnavi 2020-07-10 11:18:15,959 - Writting summary
DEBUG vaishnavi 2020-07-10 11:18:15,960 - Writting clustering information to datafile
DEBUG vaishnavi 2020-07-10 11:18:15,978 - Getting scatter plot for clustered data
INFO vaishnavi 2020-07-10 11:18:16,453 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:18:16,454 - 127.0.0.1 - - [10/Jul/2020 11:18:16] "[37mPOST /clustering/agglomerative?k=5&format=csv&uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 11:18:19,948 - Requested to get clustering details.
DEBUG admin1 2020-07-10 11:18:19,949 - Reading datafile for clustered data
INFO admin1 2020-07-10 11:18:19,950 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:18:19,962 - 127.0.0.1 - - [10/Jul/2020 11:18:19] "[37mGET /clustering/agglomerative?uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 11:18:20,013 - Requested to get clustering summary.
DEBUG admin1 2020-07-10 11:18:20,013 - Reading datafile for clustering summary
INFO admin1 2020-07-10 11:18:20,015 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:18:20,017 - 127.0.0.1 - - [10/Jul/2020 11:18:20] "[37mGET /clustering/summary?uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 11:18:20,065 - Requested to cluster documents.
DEBUG admin1 2020-07-10 11:18:20,066 - Reading datafile..
DEBUG admin1 2020-07-10 11:18:20,069 - Calculating tf-idf
DEBUG admin1 2020-07-10 11:18:20,233 - Calculating variance threshold
DEBUG admin1 2020-07-10 11:18:20,308 - Applying PCA
DEBUG admin1 2020-07-10 11:18:20,363 - Applying Birch algorithm
DEBUG admin1 2020-07-10 11:18:20,388 - Sorting clusters
DEBUG admin1 2020-07-10 11:18:20,393 - Converting to JSON format
DEBUG admin1 2020-07-10 11:18:20,397 - Exporting clustering results
DEBUG admin1 2020-07-10 11:18:20,402 - Writting summary
DEBUG admin1 2020-07-10 11:18:20,407 - Writting clustering information to datafile
DEBUG admin1 2020-07-10 11:18:20,414 - Getting scatter plot for clustered data
INFO vaishnavi 2020-07-10 11:18:20,518 - Requested to get clustering details.
DEBUG vaishnavi 2020-07-10 11:18:20,519 - Reading datafile for clustered data
INFO vaishnavi 2020-07-10 11:18:20,580 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:18:20,645 - 127.0.0.1 - - [10/Jul/2020 11:18:20] "[37mGET /clustering/agglomerative?uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 11:18:20,839 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:18:20,845 - 127.0.0.1 - - [10/Jul/2020 11:18:20] "[37mPOST /clustering/birch?k=5&format=csv&uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO vaishnavi 2020-07-10 11:18:20,879 - Requested to get clustering summary.
DEBUG vaishnavi 2020-07-10 11:18:20,879 - Reading datafile for clustering summary
INFO vaishnavi 2020-07-10 11:18:20,881 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:18:20,883 - 127.0.0.1 - - [10/Jul/2020 11:18:20] "[37mGET /clustering/summary?uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO vaishnavi 2020-07-10 11:18:20,962 - Requested to cluster documents.
DEBUG vaishnavi 2020-07-10 11:18:20,963 - Reading datafile..
DEBUG vaishnavi 2020-07-10 11:18:20,965 - Calculating tf-idf
DEBUG vaishnavi 2020-07-10 11:18:21,057 - Calculating variance threshold
DEBUG vaishnavi 2020-07-10 11:18:21,088 - Applying PCA
DEBUG vaishnavi 2020-07-10 11:18:21,122 - Applying Birch algorithm
DEBUG vaishnavi 2020-07-10 11:18:21,145 - Sorting clusters
DEBUG vaishnavi 2020-07-10 11:18:21,146 - Converting to JSON format
DEBUG vaishnavi 2020-07-10 11:18:21,149 - Exporting clustering results
DEBUG vaishnavi 2020-07-10 11:18:21,152 - Writting summary
DEBUG vaishnavi 2020-07-10 11:18:21,154 - Writting clustering information to datafile
DEBUG vaishnavi 2020-07-10 11:18:21,156 - Getting scatter plot for clustered data
INFO vaishnavi 2020-07-10 11:18:21,368 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:18:21,369 - 127.0.0.1 - - [10/Jul/2020 11:18:21] "[37mPOST /clustering/birch?k=5&format=csv&uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 11:18:23,738 - Requested to get clustering details.
DEBUG admin1 2020-07-10 11:18:23,738 - Reading datafile for clustered data
INFO admin1 2020-07-10 11:18:23,740 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:18:23,746 - 127.0.0.1 - - [10/Jul/2020 11:18:23] "[37mGET /clustering/birch?uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 11:18:23,885 - Requested to get clustering summary.
DEBUG admin1 2020-07-10 11:18:23,885 - Reading datafile for clustering summary
INFO admin1 2020-07-10 11:18:23,887 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:18:23,889 - 127.0.0.1 - - [10/Jul/2020 11:18:23] "[37mGET /clustering/summary?uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO vaishnavi 2020-07-10 11:18:25,203 - Requested to get clustering details.
DEBUG vaishnavi 2020-07-10 11:18:25,204 - Reading datafile for clustered data
INFO vaishnavi 2020-07-10 11:18:25,205 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:18:25,209 - 127.0.0.1 - - [10/Jul/2020 11:18:25] "[37mGET /clustering/birch?uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO vaishnavi 2020-07-10 11:18:25,228 - Requested to get clustering summary.
DEBUG vaishnavi 2020-07-10 11:18:25,229 - Reading datafile for clustering summary
INFO vaishnavi 2020-07-10 11:18:25,231 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:18:25,233 - 127.0.0.1 - - [10/Jul/2020 11:18:25] "[37mGET /clustering/summary?uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO werkzeug 2020-07-10 11:21:36,891 -  * Detected change in 'C:\\Users\\Personnal\\Documents\\FinIQ\\NLP_Project\\Another\\API\\pre-processing-and-API\\kmeans.py', reloading
INFO werkzeug 2020-07-10 11:21:37,759 -  * Restarting with stat
WARNING werkzeug 2020-07-10 11:21:45,768 -  * Debugger is active!
INFO werkzeug 2020-07-10 11:21:45,791 -  * Debugger PIN: 240-565-176
INFO werkzeug 2020-07-10 11:21:45,824 -  * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
INFO werkzeug 2020-07-10 11:23:49,163 -  * Detected change in 'C:\\Users\\Personnal\\Documents\\FinIQ\\NLP_Project\\Another\\API\\pre-processing-and-API\\birch.py', reloading
INFO werkzeug 2020-07-10 11:23:49,743 -  * Restarting with stat
WARNING werkzeug 2020-07-10 11:23:56,250 -  * Debugger is active!
INFO werkzeug 2020-07-10 11:23:56,282 -  * Debugger PIN: 240-565-176
INFO werkzeug 2020-07-10 11:23:56,405 -  * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
INFO werkzeug 2020-07-10 11:24:02,317 -  * Detected change in 'C:\\Users\\Personnal\\Documents\\FinIQ\\NLP_Project\\Another\\API\\pre-processing-and-API\\dbscan.py', reloading
INFO werkzeug 2020-07-10 11:24:02,702 -  * Restarting with stat
WARNING werkzeug 2020-07-10 11:24:07,444 -  * Debugger is active!
INFO werkzeug 2020-07-10 11:24:07,461 -  * Debugger PIN: 240-565-176
INFO werkzeug 2020-07-10 11:24:07,482 -  * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
INFO ram 2020-07-10 11:24:44,048 - Requested to extract data.
DEBUG ram 2020-07-10 11:24:44,048 - Extracted links and ISINs from JSON object.
INFO ram 2020-07-10 11:24:44,314 - Made entry for extracted data in datafile successfully.
INFO werkzeug 2020-07-10 11:24:44,315 - 127.0.0.1 - - [10/Jul/2020 11:24:44] "[37mPOST /extract?filepath=ISINS_v3.xlsx&no_of_docs=9&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:24:44,324 - Requested to export extracted data.
INFO ram 2020-07-10 11:24:44,479 - Exported successfully
INFO werkzeug 2020-07-10 11:24:44,480 - 127.0.0.1 - - [10/Jul/2020 11:24:44] "[37mPOST /extract/export?filepath=extract.xlsx&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:24:44,490 - Requested to pre-process data.
DEBUG ram 2020-07-10 11:24:44,491 - Pre-processed data
DEBUG ram 2020-07-10 11:24:44,492 - Made entry of pre-processed data in datafile successfully
INFO werkzeug 2020-07-10 11:24:44,494 - 127.0.0.1 - - [10/Jul/2020 11:24:44] "[37mPOST /preprocess?steps=url&steps=stemming&steps=lemmatization&steps=stopwords&steps=unusual&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:24:44,537 - Requested to export pre-processed data.
DEBUG ram 2020-07-10 11:24:44,537 - Reading pre-processed datafile.
DEBUG ram 2020-07-10 11:24:44,538 - Exporting pre-processed data to excel file.
INFO ram 2020-07-10 11:24:44,587 - Exported pre-processed data successfully.
INFO werkzeug 2020-07-10 11:24:44,588 - 127.0.0.1 - - [10/Jul/2020 11:24:44] "[37mPOST /preprocess/export?filepath=prep.xlsx&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:24:44,598 - Requested to cluster documents.
DEBUG ram 2020-07-10 11:24:44,598 - Reading datafile..
DEBUG ram 2020-07-10 11:24:44,599 - Calculating tf-idf
ERROR ram 2020-07-10 11:24:44,600 - Exception occurred: ValueError('empty vocabulary; perhaps the documents only contain stop words')
Traceback (most recent call last):
  File "C:\Users\Personnal\Documents\FinIQ\NLP_Project\Another\API\pre-processing-and-API\api.py", line 503, in post
    df = cf.tfidf(text)
  File "C:\Users\Personnal\Documents\FinIQ\NLP_Project\Another\API\pre-processing-and-API\clean_file.py", line 167, in tfidf
    vectors = vectorizer.fit_transform(text)
  File "C:\Users\Personnal\AppData\Local\Programs\Python\Python38\lib\site-packages\sklearn\feature_extraction\text.py", line 1840, in fit_transform
    X = super().fit_transform(raw_documents)
  File "C:\Users\Personnal\AppData\Local\Programs\Python\Python38\lib\site-packages\sklearn\feature_extraction\text.py", line 1198, in fit_transform
    vocabulary, X = self._count_vocab(raw_documents,
  File "C:\Users\Personnal\AppData\Local\Programs\Python\Python38\lib\site-packages\sklearn\feature_extraction\text.py", line 1129, in _count_vocab
    raise ValueError("empty vocabulary; perhaps the documents only"
ValueError: empty vocabulary; perhaps the documents only contain stop words
INFO werkzeug 2020-07-10 11:24:44,604 - 127.0.0.1 - - [10/Jul/2020 11:24:44] "[31m[1mPOST /clustering/kmeans?k=4&format=csv&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 400 -
INFO werkzeug 2020-07-10 11:25:12,285 -  * Detected change in 'C:\\Users\\Personnal\\Documents\\FinIQ\\NLP_Project\\Another\\API\\pre-processing-and-API\\dbscan.py', reloading
INFO werkzeug 2020-07-10 11:25:12,672 -  * Restarting with stat
WARNING werkzeug 2020-07-10 11:25:17,868 -  * Debugger is active!
INFO werkzeug 2020-07-10 11:25:17,884 -  * Debugger PIN: 240-565-176
INFO werkzeug 2020-07-10 11:25:17,904 -  * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
INFO werkzeug 2020-07-10 11:26:10,778 -  * Detected change in 'C:\\Users\\Personnal\\Documents\\FinIQ\\NLP_Project\\Another\\API\\pre-processing-and-API\\kmeans.py', reloading
INFO werkzeug 2020-07-10 11:26:11,480 -  * Restarting with stat
WARNING werkzeug 2020-07-10 11:26:19,833 -  * Debugger is active!
INFO werkzeug 2020-07-10 11:26:19,848 -  * Debugger PIN: 240-565-176
INFO werkzeug 2020-07-10 11:26:19,866 -  * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
INFO werkzeug 2020-07-10 11:26:21,601 -  * Detected change in 'C:\\Users\\Personnal\\Documents\\FinIQ\\NLP_Project\\Another\\API\\pre-processing-and-API\\agglomerative.py', reloading
INFO werkzeug 2020-07-10 11:26:22,033 -  * Restarting with stat
WARNING werkzeug 2020-07-10 11:26:29,571 -  * Debugger is active!
INFO werkzeug 2020-07-10 11:26:29,590 -  * Debugger PIN: 240-565-176
INFO werkzeug 2020-07-10 11:26:29,638 -  * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
INFO sita 2020-07-10 11:30:01,571 - Requested to extract data.
DEBUG sita 2020-07-10 11:30:01,586 - Extracted links and ISINs from JSON object.
INFO sita 2020-07-10 11:30:24,058 - Made entry for extracted data in datafile successfully.
INFO werkzeug 2020-07-10 11:30:24,060 - 127.0.0.1 - - [10/Jul/2020 11:30:24] "[37mPOST /extract?filepath=ISINS_v3.xlsx&no_of_docs=15&uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:30:24,072 - Requested to export extracted data.
INFO sita 2020-07-10 11:30:24,195 - Exported successfully
INFO werkzeug 2020-07-10 11:30:24,197 - 127.0.0.1 - - [10/Jul/2020 11:30:24] "[37mPOST /extract/export?filepath=extract.xlsx&uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:30:24,208 - Requested to pre-process data.
DEBUG sita 2020-07-10 11:30:24,209 - Pre-processed data
DEBUG sita 2020-07-10 11:30:24,211 - Made entry of pre-processed data in datafile successfully
INFO werkzeug 2020-07-10 11:30:24,212 - 127.0.0.1 - - [10/Jul/2020 11:30:24] "[37mPOST /preprocess?steps=url&steps=stemming&steps=lemmatization&steps=stopwords&steps=unusual&uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:30:24,223 - Requested to export pre-processed data.
DEBUG sita 2020-07-10 11:30:24,223 - Reading pre-processed datafile.
DEBUG sita 2020-07-10 11:30:24,225 - Exporting pre-processed data to excel file.
INFO sita 2020-07-10 11:30:24,336 - Exported pre-processed data successfully.
INFO werkzeug 2020-07-10 11:30:24,337 - 127.0.0.1 - - [10/Jul/2020 11:30:24] "[37mPOST /preprocess/export?filepath=prep.xlsx&uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:30:24,349 - Requested to cluster documents.
DEBUG sita 2020-07-10 11:30:24,349 - Reading datafile..
DEBUG sita 2020-07-10 11:30:24,351 - Calculating tf-idf
ERROR sita 2020-07-10 11:30:24,352 - Exception occurred: ValueError('empty vocabulary; perhaps the documents only contain stop words')
Traceback (most recent call last):
  File "C:\Users\Personnal\Documents\FinIQ\NLP_Project\Another\API\pre-processing-and-API\api.py", line 503, in post
    df = cf.tfidf(text)
  File "C:\Users\Personnal\Documents\FinIQ\NLP_Project\Another\API\pre-processing-and-API\clean_file.py", line 167, in tfidf
    vectors = vectorizer.fit_transform(text)
  File "C:\Users\Personnal\AppData\Local\Programs\Python\Python38\lib\site-packages\sklearn\feature_extraction\text.py", line 1840, in fit_transform
    X = super().fit_transform(raw_documents)
  File "C:\Users\Personnal\AppData\Local\Programs\Python\Python38\lib\site-packages\sklearn\feature_extraction\text.py", line 1198, in fit_transform
    vocabulary, X = self._count_vocab(raw_documents,
  File "C:\Users\Personnal\AppData\Local\Programs\Python\Python38\lib\site-packages\sklearn\feature_extraction\text.py", line 1129, in _count_vocab
    raise ValueError("empty vocabulary; perhaps the documents only"
ValueError: empty vocabulary; perhaps the documents only contain stop words
INFO werkzeug 2020-07-10 11:30:24,356 - 127.0.0.1 - - [10/Jul/2020 11:30:24] "[31m[1mPOST /clustering/kmeans?k=4&format=csv&uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 400 -
INFO werkzeug 2020-07-10 11:30:43,594 -  * Restarting with stat
WARNING werkzeug 2020-07-10 11:30:49,456 -  * Debugger is active!
INFO werkzeug 2020-07-10 11:30:49,469 -  * Debugger PIN: 240-565-176
INFO werkzeug 2020-07-10 11:30:49,487 -  * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
INFO sita 2020-07-10 11:31:01,991 - Requested to extract data.
DEBUG sita 2020-07-10 11:31:01,991 - Extracted links and ISINs from JSON object.
INFO sita 2020-07-10 11:31:17,318 - Made entry for extracted data in datafile successfully.
INFO werkzeug 2020-07-10 11:31:17,319 - 127.0.0.1 - - [10/Jul/2020 11:31:17] "[37mPOST /extract?filepath=ISINS_v3.xlsx&no_of_docs=15&uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:31:17,330 - Requested to export extracted data.
INFO sita 2020-07-10 11:31:17,604 - Exported successfully
INFO werkzeug 2020-07-10 11:31:17,605 - 127.0.0.1 - - [10/Jul/2020 11:31:17] "[37mPOST /extract/export?filepath=extract.xlsx&uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:31:17,616 - Requested to pre-process data.
DEBUG sita 2020-07-10 11:31:35,088 - Pre-processed data
DEBUG sita 2020-07-10 11:31:35,090 - Made entry of pre-processed data in datafile successfully
INFO werkzeug 2020-07-10 11:31:35,091 - 127.0.0.1 - - [10/Jul/2020 11:31:35] "[37mPOST /preprocess?steps=url&steps=stemming&steps=lemmatization&steps=stopwords&steps=unusual&uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:31:35,103 - Requested to export pre-processed data.
DEBUG sita 2020-07-10 11:31:35,104 - Reading pre-processed datafile.
DEBUG sita 2020-07-10 11:31:35,167 - Exporting pre-processed data to excel file.
INFO sita 2020-07-10 11:31:35,297 - Exported pre-processed data successfully.
INFO werkzeug 2020-07-10 11:31:35,298 - 127.0.0.1 - - [10/Jul/2020 11:31:35] "[37mPOST /preprocess/export?filepath=prep.xlsx&uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:31:35,309 - Requested to cluster documents.
DEBUG sita 2020-07-10 11:31:35,309 - Reading datafile..
DEBUG sita 2020-07-10 11:31:35,310 - Calculating tf-idf
DEBUG sita 2020-07-10 11:31:35,512 - Calculating variance threshold
DEBUG sita 2020-07-10 11:31:35,607 - Applying PCA
DEBUG sita 2020-07-10 11:31:35,786 - Applying K-Means algorithm
DEBUG sita 2020-07-10 11:31:36,012 - Sorting clusters
DEBUG sita 2020-07-10 11:31:36,033 - Converting to JSON format
DEBUG sita 2020-07-10 11:31:36,053 - Exporting clustering results
DEBUG sita 2020-07-10 11:31:36,054 - Writting summary
DEBUG sita 2020-07-10 11:31:36,056 - Writting clustering information to datafile
DEBUG sita 2020-07-10 11:31:36,057 - Getting scatter plot for clustered data
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,281 - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,282 - findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,282 - findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,282 - findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,282 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,283 - findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,283 - findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,283 - findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,283 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,284 - findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,284 - findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,284 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,284 - findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,285 - findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,285 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,285 - findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,285 - findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,286 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,286 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,286 - findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,287 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,287 - findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,287 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,287 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,288 - findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,288 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,288 - findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,288 - findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,289 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,289 - findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,289 - findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,289 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,290 - findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,290 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,290 - findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,291 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,291 - findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,291 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,291 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,292 - findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal demi normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,292 - findfont: score(<Font 'Sanskrit Text' (Sanskr.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,292 - findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal black normal>) = 11.525
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,293 - findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,293 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,293 - findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,293 - findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,294 - findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,294 - findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,294 - findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,294 - findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,295 - findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,295 - findfont: score(<Font 'Utsaah' (utsaahb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,295 - findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,296 - findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,296 - findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,296 - findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,296 - findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,297 - findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,297 - findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,297 - findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,297 - findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,298 - findfont: score(<Font 'Corbel' (corbell.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,298 - findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,298 - findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,298 - findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,299 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,299 - findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,299 - findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,299 - findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,300 - findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,300 - findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,300 - findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,300 - findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,301 - findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,301 - findfont: score(<Font 'Candara' (Candarali.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,301 - findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal demi normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,301 - findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,302 - findfont: score(<Font 'Arial' (ariblk.ttf) normal normal black normal>) = 6.888636363636364
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,302 - findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,302 - findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,302 - findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,303 - findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,303 - findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,303 - findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,303 - findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,304 - findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,304 - findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,304 - findfont: score(<Font 'SketchFlow Print' (SketchFlow Print.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,304 - findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,305 - findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,305 - findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,305 - findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,305 - findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,306 - findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,306 - findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,306 - findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,306 - findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal roman normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,307 - findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal roman normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,307 - findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,307 - findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,307 - findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,308 - findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,308 - findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,308 - findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,308 - findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,309 - findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,309 - findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,309 - findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,309 - findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,310 - findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,310 - findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,310 - findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,310 - findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,311 - findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,311 - findfont: score(<Font 'Times New Roman' (times.ttf) normal normal roman normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,311 - findfont: score(<Font 'Utsaah' (utsaahb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,311 - findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,312 - findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,312 - findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal semibold normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,312 - findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,313 - findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,313 - findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,313 - findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,313 - findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,314 - findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,314 - findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,314 - findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,314 - findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,314 - findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,315 - findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,315 - findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal roman normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,315 - findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,315 - findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,316 - findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,316 - findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,316 - findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal bold condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,316 - findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,317 - findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,317 - findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,317 - findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,318 - findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,318 - findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,318 - findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,318 - findfont: score(<Font 'Utsaah' (utsaahi.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,319 - findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,319 - findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,319 - findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,319 - findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,320 - findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,320 - findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,320 - findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,321 - findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,321 - findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,321 - findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal medium condensed>) = 10.344999999999999
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,321 - findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,322 - findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,322 - findfont: score(<Font 'Aparajita' (aparajbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,322 - findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,322 - findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,323 - findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,323 - findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,323 - findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,323 - findfont: score(<Font 'Arial Unicode MS' (ARIALUNI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,324 - findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,324 - findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,324 - findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,324 - findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,325 - findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,325 - findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,325 - findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,326 - findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,326 - findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,326 - findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,326 - findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,327 - findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,327 - findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,327 - findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,327 - findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,328 - findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,328 - findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,328 - findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,328 - findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,329 - findfont: score(<Font 'Utsaah' (utsaah.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,329 - findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,329 - findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,330 - findfont: score(<Font 'SketchFlow Print' (SketchFlow Print.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,330 - findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,330 - findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,330 - findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,331 - findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,331 - findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,331 - findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,331 - findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,332 - findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,332 - findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,332 - findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,332 - findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,332 - findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,333 - findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,333 - findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,333 - findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,333 - findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,334 - findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,334 - findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,334 - findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal demi normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,334 - findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,334 - findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,335 - findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,335 - findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal heavy normal>) = 10.43
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,335 - findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,336 - findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,336 - findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,336 - findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,336 - findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,337 - findfont: score(<Font 'MT Extra' (mtextra.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,337 - findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,337 - findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,337 - findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,338 - findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,338 - findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,338 - findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,338 - findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,339 - findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,339 - findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,339 - findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,339 - findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,340 - findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal demi condensed>) = 10.44
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,340 - findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,340 - findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,340 - findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,341 - findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,341 - findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,341 - findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal black normal>) = 11.525
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,341 - findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,342 - findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,342 - findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,342 - findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,342 - findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,343 - findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,343 - findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,343 - findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,343 - findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal medium condensed>) = 10.344999999999999
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,344 - findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,344 - findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,344 - findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,344 - findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,345 - findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,345 - findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,345 - findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,345 - findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,345 - findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,346 - findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,346 - findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,346 - findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal bold condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,346 - findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,347 - findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,347 - findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,347 - findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,347 - findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,348 - findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,348 - findfont: score(<Font 'Segoe Marker' (SegoeMarker.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,348 - findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,348 - findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,349 - findfont: score(<Font 'Source Code Pro' (SourceCodePro-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,349 - findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,349 - findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal heavy normal>) = 11.43
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,349 - findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,350 - findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,350 - findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,350 - findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,350 - findfont: score(<Font 'Buxton Sketch' (BuxtonSketch.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,351 - findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,351 - findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,351 - findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,351 - findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,351 - findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,352 - findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,352 - findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,352 - findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,352 - findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,353 - findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal semibold normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,353 - findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,353 - findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,353 - findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,354 - findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal heavy normal>) = 11.43
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,354 - findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,354 - findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,354 - findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,355 - findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,355 - findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,355 - findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,355 - findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,356 - findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,356 - findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,356 - findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,356 - findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal medium normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,357 - findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,357 - findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,357 - findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,357 - findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,358 - findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,358 - findfont: score(<Font 'Aparajita' (aparaji.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,358 - findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,358 - findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,359 - findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,359 - findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,359 - findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,359 - findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal demi normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,360 - findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,360 - findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,360 - findfont: score(<Font 'Shivaji01' (Shivaji01.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,360 - findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,360 - findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,361 - findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,361 - findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,361 - findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,361 - findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,362 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,362 - findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,362 - findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,363 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,363 - findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,363 - findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,363 - findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,364 - findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,364 - findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,364 - findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,364 - findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,365 - findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,365 - findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,365 - findfont: score(<Font 'Aparajita' (aparajb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,365 - findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,366 - findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,366 - findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,366 - findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,367 - findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,367 - findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,367 - findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,367 - findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal bold condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,368 - findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,368 - findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,368 - findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,368 - findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,368 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,369 - findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,369 - findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,369 - findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,370 - findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,370 - findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal medium normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,370 - findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,370 - findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,370 - findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,371 - findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,371 - findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,371 - findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,372 - findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,372 - findfont: score(<Font 'Kokila' (kokilab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,372 - findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,372 - findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,373 - findfont: score(<Font 'Mangal' (mangal.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,373 - findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,373 - findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,373 - findfont: score(<Font 'Calibri' (calibril.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,373 - findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,374 - findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,374 - findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,374 - findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,374 - findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,375 - findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,375 - findfont: score(<Font 'Aparajita' (aparajb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,375 - findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,375 - findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,376 - findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,376 - findfont: score(<Font 'Utsaah' (utsaahi.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,376 - findfont: score(<Font 'Buxton Sketch' (BuxtonSketch.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,376 - findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,377 - findfont: score(<Font 'Aparajita' (aparaj.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,377 - findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,377 - findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,377 - findfont: score(<Font 'Kokila' (kokilai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,378 - findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,378 - findfont: score(<Font 'Source Code Pro' (SourceCodePro-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,379 - findfont: score(<Font 'TeamViewer13' (teamviewer13.otf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,379 - findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,379 - findfont: score(<Font 'Kokila' (kokilab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,379 - findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,379 - findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,380 - findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,380 - findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,380 - findfont: score(<Font 'Segoe Marker' (SegoeMarker.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,380 - findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,381 - findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,381 - findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,381 - findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,381 - findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,381 - findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,382 - findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,382 - findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,382 - findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal bold condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,382 - findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,383 - findfont: score(<Font 'Candara' (Candaral.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,383 - findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,383 - findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,383 - findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,384 - findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal demi normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,384 - findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal semibold normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,384 - findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,384 - findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,385 - findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,385 - findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,385 - findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,385 - findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,385 - findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,386 - findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,386 - findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,386 - findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,386 - findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,387 - findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,387 - findfont: score(<Font 'Corbel' (corbell.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,387 - findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,387 - findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,388 - findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,388 - findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal black normal>) = 11.525
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,388 - findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,388 - findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,389 - findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,389 - findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,389 - findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,390 - findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,390 - findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,390 - findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,391 - findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,391 - findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,392 - findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,392 - findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,392 - findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,392 - findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,393 - findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal demi normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,393 - findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,393 - findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,394 - findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,394 - findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,394 - findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,394 - findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,395 - findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,395 - findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,396 - findfont: score(<Font 'Utsaah' (utsaah.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,396 - findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,397 - findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,397 - findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,397 - findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,397 - findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,398 - findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,398 - findfont: score(<Font 'Kokila' (kokila.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,398 - findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,399 - findfont: score(<Font 'Mangal' (mangalb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,399 - findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,399 - findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,399 - findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,401 - findfont: score(<Font 'MT Extra' (mtextra.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,402 - findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,402 - findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,402 - findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,402 - findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,403 - findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,403 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,403 - findfont: score(<Font 'Shivaji05' (Shivaji05.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,403 - findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,404 - findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,404 - findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,404 - findfont: score(<Font 'Mangal' (mangal.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,404 - findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,405 - findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,405 - findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,405 - findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,405 - findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,420 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,420 - findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,421 - findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,421 - findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,421 - findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,422 - findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal demi condensed>) = 10.44
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,422 - findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,422 - findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,422 - findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,423 - findfont: score(<Font 'Shivaji02' (Shivaji02.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,423 - findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,423 - findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,424 - findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,424 - findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,424 - findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,424 - findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,425 - findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,425 - findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,425 - findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,425 - findfont: score(<Font 'Aparajita' (aparaj.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,426 - findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,426 - findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,426 - findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,426 - findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,427 - findfont: score(<Font 'Utsaah' (utsaahbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,427 - findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,427 - findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,427 - findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,428 - findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,428 - findfont: score(<Font 'Aparajita' (aparaji.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,428 - findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,428 - findfont: score(<Font 'Candara' (Candarali.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,429 - findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,429 - findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,429 - findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,429 - findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,430 - findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,430 - findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,430 - findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,430 - findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,431 - findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,431 - findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,431 - findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,431 - findfont: score(<Font 'Kokila' (kokila.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,432 - findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,432 - findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,432 - findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,432 - findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,433 - findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,433 - findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,433 - findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,433 - findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,434 - findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,434 - findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,434 - findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,434 - findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,435 - findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,435 - findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,435 - findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,435 - findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,435 - findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,436 - findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,436 - findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,436 - findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,437 - findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,437 - findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,437 - findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,437 - findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,438 - findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,438 - findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,438 - findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,438 - findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,438 - findfont: score(<Font 'TeamViewer13' (teamviewer13.otf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,439 - findfont: score(<Font 'Mangal' (mangalb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,439 - findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,439 - findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,440 - findfont: score(<Font 'Calibri' (calibril.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,440 - findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,440 - findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal black normal>) = 11.525
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,441 - findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,441 - findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,441 - findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,441 - findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,442 - findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,442 - findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,442 - findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,442 - findfont: score(<Font 'Kokila' (kokilai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,443 - findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,443 - findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,443 - findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,443 - findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,444 - findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,444 - findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,444 - findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,444 - findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,445 - findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,445 - findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,445 - findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,446 - findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,446 - findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,446 - findfont: score(<Font 'Aparajita' (aparajbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,447 - findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,447 - findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,447 - findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,448 - findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,448 - findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,448 - findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,449 - findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,449 - findfont: score(<Font 'Shivaji02' (Shivaji02.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,449 - findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,450 - findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,450 - findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,450 - findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,451 - findfont: score(<Font 'Shivaji01' (Shivaji01.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,451 - findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,451 - findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,452 - findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,452 - findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,452 - findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,454 - findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,459 - findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,459 - findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,460 - findfont: score(<Font 'Kokila' (kokilabi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,461 - findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,462 - findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,464 - findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,465 - findfont: score(<Font 'Kokila' (kokilabi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,468 - findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,469 - findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,480 - findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,482 - findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,490 - findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,491 - findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,496 - findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,496 - findfont: score(<Font 'Arial Unicode MS' (ARIALUNI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,497 - findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,497 - findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,497 - findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,498 - findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,498 - findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,499 - findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,499 - findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,500 - findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,514 - findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,514 - findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,514 - findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal roman normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,515 - findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,515 - findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,515 - findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,515 - findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,516 - findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,516 - findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,516 - findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,517 - findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,517 - findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,518 - findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,518 - findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,518 - findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,519 - findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,519 - findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,519 - findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal bold condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,519 - findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,519 - findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,520 - findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,520 - findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal bold condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,520 - findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,521 - findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,521 - findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,521 - findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,521 - findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,533 - findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,535 - findfont: score(<Font 'Utsaah' (utsaahbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,535 - findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,536 - findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,536 - findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,536 - findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal semibold normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,537 - findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,537 - findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,537 - findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,538 - findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,538 - findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,538 - findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,538 - findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,539 - findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,539 - findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,539 - findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal heavy normal>) = 10.43
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,539 - findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,539 - findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,540 - findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,540 - findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,540 - findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,540 - findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,541 - findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,541 - findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,541 - findfont: score(<Font 'Candara' (Candaral.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,541 - findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,541 - findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,542 - findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,542 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,542 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,542 - findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,543 - findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,543 - findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,543 - findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,544 - findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,544 - findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,544 - findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,544 - findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,544 - findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,545 - findfont: score(<Font 'Shivaji05' (Shivaji05.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,545 - findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,545 - findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,546 - findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,546 - findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,546 - findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,546 - findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,546 - findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,547 - findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,547 - findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,547 - findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,547 - findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,548 - findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,548 - findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,548 - findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,548 - findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,553 - findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,554 - findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,554 - findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,555 - findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,555 - findfont: score(<Font 'Times New Roman' (times.ttf) normal normal roman normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,555 - findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,556 - findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,556 - findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,556 - findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,556 - findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,557 - findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,557 - findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,557 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,558 - findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,558 - findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,558 - findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,559 - findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,559 - findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,559 - findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,559 - findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,560 - findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,560 - findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,560 - findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,561 - findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,561 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,561 - findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,562 - findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,562 - findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,562 - findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,563 - findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,563 - findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,563 - findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,564 - findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,564 - findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,564 - findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,564 - findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,565 - findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,565 - findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,565 - findfont: score(<Font 'Sanskrit Text' (Sanskr.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,566 - findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,566 - findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,566 - findfont: score(<Font 'Arial' (ariblk.ttf) normal normal black normal>) = 6.888636363636364
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,567 - findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,567 - findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,567 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,567 - findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,568 - findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,568 - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('C:\\Users\\Personnal\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,704 - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,704 - findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,705 - findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,705 - findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,705 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,705 - findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,706 - findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,706 - findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,707 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,707 - findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,708 - findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,710 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,711 - findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,711 - findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,712 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,712 - findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,713 - findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,713 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,713 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,714 - findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,714 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,714 - findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,715 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,715 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,715 - findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,716 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,716 - findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,716 - findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,717 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,717 - findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,717 - findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,718 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,718 - findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,718 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,718 - findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,719 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,719 - findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,720 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,720 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,720 - findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal demi normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,721 - findfont: score(<Font 'Sanskrit Text' (Sanskr.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,721 - findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal black normal>) = 11.525
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,721 - findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,722 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,722 - findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,722 - findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,723 - findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,723 - findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,723 - findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,723 - findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,724 - findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,724 - findfont: score(<Font 'Utsaah' (utsaahb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,724 - findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,725 - findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,725 - findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,725 - findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,725 - findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,726 - findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,726 - findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,726 - findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,726 - findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,727 - findfont: score(<Font 'Corbel' (corbell.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,727 - findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,727 - findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,728 - findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,728 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,728 - findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,728 - findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,729 - findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,729 - findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,729 - findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,730 - findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,730 - findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,730 - findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,730 - findfont: score(<Font 'Candara' (Candarali.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,731 - findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal demi normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,731 - findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,731 - findfont: score(<Font 'Arial' (ariblk.ttf) normal normal black normal>) = 6.888636363636364
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,731 - findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,731 - findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,732 - findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,732 - findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,732 - findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,732 - findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,733 - findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,733 - findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,733 - findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,733 - findfont: score(<Font 'SketchFlow Print' (SketchFlow Print.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,734 - findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,734 - findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,734 - findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,734 - findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,735 - findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,735 - findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,735 - findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,735 - findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,736 - findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal roman normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,736 - findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal roman normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,736 - findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,736 - findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,737 - findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,737 - findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,737 - findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,737 - findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,753 - findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,753 - findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,754 - findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,754 - findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,755 - findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,755 - findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,756 - findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,756 - findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,757 - findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,757 - findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,757 - findfont: score(<Font 'Times New Roman' (times.ttf) normal normal roman normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,758 - findfont: score(<Font 'Utsaah' (utsaahb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,758 - findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,758 - findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,758 - findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal semibold normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,759 - findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,759 - findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,759 - findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,759 - findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,760 - findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,760 - findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,760 - findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,761 - findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,761 - findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,761 - findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,762 - findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,762 - findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal roman normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,762 - findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,762 - findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,763 - findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,763 - findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,763 - findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal bold condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,763 - findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,764 - findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,764 - findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,764 - findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,765 - findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,765 - findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,765 - findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,765 - findfont: score(<Font 'Utsaah' (utsaahi.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,766 - findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,766 - findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,767 - findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,767 - findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,767 - findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,768 - findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,768 - findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,768 - findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,769 - findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,769 - findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal medium condensed>) = 10.344999999999999
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,769 - findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,770 - findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,770 - findfont: score(<Font 'Aparajita' (aparajbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,770 - findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,770 - findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,771 - findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,771 - findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,771 - findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,772 - findfont: score(<Font 'Arial Unicode MS' (ARIALUNI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,772 - findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,772 - findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,773 - findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,773 - findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,773 - findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,774 - findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,774 - findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,774 - findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,775 - findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,775 - findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,775 - findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,776 - findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,776 - findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,776 - findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,777 - findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,777 - findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,777 - findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,777 - findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,778 - findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,778 - findfont: score(<Font 'Utsaah' (utsaah.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,778 - findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,779 - findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,779 - findfont: score(<Font 'SketchFlow Print' (SketchFlow Print.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,779 - findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,780 - findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,780 - findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,780 - findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,781 - findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,781 - findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,782 - findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,782 - findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,782 - findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,783 - findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,783 - findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,783 - findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,783 - findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,784 - findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,784 - findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,784 - findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,785 - findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,785 - findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,785 - findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal demi normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,786 - findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,786 - findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,786 - findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,786 - findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal heavy normal>) = 10.43
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,790 - findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,791 - findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,791 - findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,792 - findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,792 - findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,793 - findfont: score(<Font 'MT Extra' (mtextra.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,793 - findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,793 - findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,794 - findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,794 - findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,794 - findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,794 - findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,795 - findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,796 - findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,796 - findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,797 - findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,799 - findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,799 - findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal demi condensed>) = 10.44
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,800 - findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,801 - findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,802 - findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,808 - findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,808 - findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,809 - findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal black normal>) = 11.525
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,809 - findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,809 - findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,810 - findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,810 - findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,810 - findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,810 - findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,811 - findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,811 - findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,811 - findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal medium condensed>) = 10.344999999999999
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,811 - findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,812 - findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,812 - findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,812 - findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,813 - findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,813 - findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,813 - findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,814 - findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,814 - findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,814 - findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,814 - findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,815 - findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal bold condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,815 - findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,815 - findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,816 - findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,816 - findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,816 - findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,816 - findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,817 - findfont: score(<Font 'Segoe Marker' (SegoeMarker.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,817 - findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,817 - findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,818 - findfont: score(<Font 'Source Code Pro' (SourceCodePro-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,818 - findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,818 - findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal heavy normal>) = 11.43
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,819 - findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,819 - findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,819 - findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,820 - findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,820 - findfont: score(<Font 'Buxton Sketch' (BuxtonSketch.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,820 - findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,820 - findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,821 - findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,821 - findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,821 - findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,821 - findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,822 - findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,822 - findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,822 - findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,822 - findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal semibold normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,823 - findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,823 - findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,823 - findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,823 - findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal heavy normal>) = 11.43
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,823 - findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,824 - findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,824 - findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,824 - findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,824 - findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,825 - findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,825 - findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,825 - findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,825 - findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,825 - findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,826 - findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal medium normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,826 - findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,826 - findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,826 - findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,827 - findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,827 - findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,827 - findfont: score(<Font 'Aparajita' (aparaji.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,827 - findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,827 - findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,828 - findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,828 - findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,828 - findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,828 - findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal demi normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,829 - findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,829 - findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,829 - findfont: score(<Font 'Shivaji01' (Shivaji01.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,829 - findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,830 - findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,830 - findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,830 - findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,830 - findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,831 - findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,831 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,831 - findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,831 - findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,837 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,837 - findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,838 - findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,838 - findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,838 - findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,839 - findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,840 - findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,841 - findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,841 - findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,841 - findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,841 - findfont: score(<Font 'Aparajita' (aparajb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,842 - findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,842 - findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,842 - findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,842 - findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,843 - findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,843 - findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,843 - findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,843 - findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal bold condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,844 - findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,844 - findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,844 - findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,844 - findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,845 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,845 - findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,845 - findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,846 - findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,846 - findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,846 - findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal medium normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,847 - findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,847 - findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,847 - findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,847 - findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,848 - findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,848 - findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,848 - findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,849 - findfont: score(<Font 'Kokila' (kokilab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,849 - findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,849 - findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,850 - findfont: score(<Font 'Mangal' (mangal.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,850 - findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,851 - findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,851 - findfont: score(<Font 'Calibri' (calibril.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,851 - findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,852 - findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,852 - findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,852 - findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,853 - findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,853 - findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,853 - findfont: score(<Font 'Aparajita' (aparajb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,854 - findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,854 - findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,854 - findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,855 - findfont: score(<Font 'Utsaah' (utsaahi.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,855 - findfont: score(<Font 'Buxton Sketch' (BuxtonSketch.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,855 - findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,856 - findfont: score(<Font 'Aparajita' (aparaj.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,856 - findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,856 - findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,857 - findfont: score(<Font 'Kokila' (kokilai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,857 - findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,857 - findfont: score(<Font 'Source Code Pro' (SourceCodePro-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,858 - findfont: score(<Font 'TeamViewer13' (teamviewer13.otf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,858 - findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,858 - findfont: score(<Font 'Kokila' (kokilab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,859 - findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,859 - findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,859 - findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,859 - findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,860 - findfont: score(<Font 'Segoe Marker' (SegoeMarker.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,860 - findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,860 - findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,861 - findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,861 - findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,861 - findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,862 - findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,862 - findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,862 - findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,863 - findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal bold condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,863 - findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,863 - findfont: score(<Font 'Candara' (Candaral.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,864 - findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,864 - findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,864 - findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,864 - findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal demi normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,865 - findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal semibold normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,865 - findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,865 - findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,865 - findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,866 - findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,866 - findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,867 - findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,867 - findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,867 - findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,868 - findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,868 - findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,869 - findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,869 - findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,869 - findfont: score(<Font 'Corbel' (corbell.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,870 - findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,870 - findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,871 - findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,871 - findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal black normal>) = 11.525
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,871 - findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,878 - findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,883 - findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,884 - findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,884 - findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,885 - findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,885 - findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,885 - findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,886 - findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,886 - findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,886 - findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,887 - findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,887 - findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,887 - findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,888 - findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal demi normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,888 - findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,888 - findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,888 - findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,889 - findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,889 - findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,889 - findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,890 - findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,890 - findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,890 - findfont: score(<Font 'Utsaah' (utsaah.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,891 - findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,891 - findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,891 - findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,892 - findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,892 - findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,892 - findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,893 - findfont: score(<Font 'Kokila' (kokila.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,893 - findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,893 - findfont: score(<Font 'Mangal' (mangalb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,894 - findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,894 - findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,894 - findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,895 - findfont: score(<Font 'MT Extra' (mtextra.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,895 - findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,896 - findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,896 - findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,896 - findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,897 - findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,897 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,898 - findfont: score(<Font 'Shivaji05' (Shivaji05.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,898 - findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,898 - findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,899 - findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,899 - findfont: score(<Font 'Mangal' (mangal.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,899 - findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,900 - findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,900 - findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,900 - findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,900 - findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,901 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,901 - findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,901 - findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,902 - findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,902 - findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,902 - findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal demi condensed>) = 10.44
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,903 - findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,903 - findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,903 - findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,903 - findfont: score(<Font 'Shivaji02' (Shivaji02.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,904 - findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,904 - findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,904 - findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,904 - findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,905 - findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,905 - findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,905 - findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,906 - findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,906 - findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,907 - findfont: score(<Font 'Aparajita' (aparaj.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,907 - findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,908 - findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,908 - findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,908 - findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,909 - findfont: score(<Font 'Utsaah' (utsaahbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,909 - findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,909 - findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,910 - findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,910 - findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,910 - findfont: score(<Font 'Aparajita' (aparaji.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,910 - findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,911 - findfont: score(<Font 'Candara' (Candarali.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,911 - findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,911 - findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,912 - findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,912 - findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,912 - findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,913 - findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,913 - findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,913 - findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,913 - findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,914 - findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,914 - findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,914 - findfont: score(<Font 'Kokila' (kokila.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,915 - findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,915 - findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,915 - findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,915 - findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,916 - findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,944 - findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,944 - findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,944 - findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,953 - findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,955 - findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,957 - findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,963 - findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,965 - findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,968 - findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,972 - findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,972 - findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,973 - findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,973 - findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,974 - findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,974 - findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,974 - findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,975 - findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,975 - findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,975 - findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,976 - findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,976 - findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,976 - findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,977 - findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,977 - findfont: score(<Font 'TeamViewer13' (teamviewer13.otf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,977 - findfont: score(<Font 'Mangal' (mangalb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,978 - findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,978 - findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,978 - findfont: score(<Font 'Calibri' (calibril.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,979 - findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,979 - findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal black normal>) = 11.525
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,979 - findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,980 - findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,980 - findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,980 - findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,981 - findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,981 - findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,981 - findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,982 - findfont: score(<Font 'Kokila' (kokilai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,982 - findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,982 - findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,983 - findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,983 - findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,983 - findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,984 - findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,984 - findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,985 - findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,985 - findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,985 - findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,986 - findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,986 - findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,987 - findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,987 - findfont: score(<Font 'Aparajita' (aparajbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,987 - findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,988 - findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,988 - findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,988 - findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,989 - findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,989 - findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,989 - findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,989 - findfont: score(<Font 'Shivaji02' (Shivaji02.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,990 - findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,990 - findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,990 - findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,991 - findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,991 - findfont: score(<Font 'Shivaji01' (Shivaji01.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,991 - findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,992 - findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,992 - findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,992 - findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,992 - findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,993 - findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,993 - findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,993 - findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,994 - findfont: score(<Font 'Kokila' (kokilabi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,994 - findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,994 - findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,995 - findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,995 - findfont: score(<Font 'Kokila' (kokilabi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,995 - findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,996 - findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,996 - findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,996 - findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,997 - findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,997 - findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,997 - findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,997 - findfont: score(<Font 'Arial Unicode MS' (ARIALUNI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,998 - findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,998 - findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,998 - findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,998 - findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,999 - findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:36,999 - findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,023 - findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,023 - findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,023 - findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,024 - findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,024 - findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal roman normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,024 - findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,025 - findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,025 - findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,026 - findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,026 - findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,026 - findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,026 - findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,027 - findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,027 - findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,028 - findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,028 - findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,028 - findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,028 - findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,029 - findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,029 - findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal bold condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,030 - findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,030 - findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,030 - findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,031 - findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal bold condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,031 - findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,031 - findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,032 - findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,032 - findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,032 - findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,033 - findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,033 - findfont: score(<Font 'Utsaah' (utsaahbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,033 - findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,034 - findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,034 - findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,034 - findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal semibold normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,035 - findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,035 - findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,035 - findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,035 - findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,036 - findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,036 - findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,036 - findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,036 - findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,037 - findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,037 - findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal heavy normal>) = 10.43
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,037 - findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,038 - findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,038 - findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,038 - findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,038 - findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,038 - findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,039 - findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,039 - findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,039 - findfont: score(<Font 'Candara' (Candaral.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,039 - findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,040 - findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,040 - findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,040 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,041 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,041 - findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,041 - findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,041 - findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,041 - findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,042 - findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,042 - findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,042 - findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,042 - findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,043 - findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,043 - findfont: score(<Font 'Shivaji05' (Shivaji05.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,043 - findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,043 - findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,044 - findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,044 - findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,044 - findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,044 - findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,045 - findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,045 - findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,045 - findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,045 - findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,046 - findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,046 - findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,046 - findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,046 - findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,047 - findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,047 - findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,047 - findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,047 - findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,048 - findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,048 - findfont: score(<Font 'Times New Roman' (times.ttf) normal normal roman normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,048 - findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,048 - findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,049 - findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,049 - findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,049 - findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,049 - findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,050 - findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,050 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,050 - findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,050 - findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,051 - findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,051 - findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,051 - findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,051 - findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,052 - findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,052 - findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,052 - findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,052 - findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,053 - findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,053 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,053 - findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,053 - findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,054 - findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,054 - findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,054 - findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,054 - findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,062 - findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,062 - findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,063 - findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,063 - findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,063 - findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,064 - findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,064 - findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,064 - findfont: score(<Font 'Sanskrit Text' (Sanskr.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,065 - findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,065 - findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,065 - findfont: score(<Font 'Arial' (ariblk.ttf) normal normal black normal>) = 6.888636363636364
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,066 - findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,066 - findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,066 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,066 - findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,067 - findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:31:37,067 - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\Personnal\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
INFO sita 2020-07-10 11:31:37,352 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:31:37,355 - 127.0.0.1 - - [10/Jul/2020 11:31:37] "[37mPOST /clustering/kmeans?k=4&format=csv&uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:32:35,419 - Requested to extract data.
DEBUG sita 2020-07-10 11:32:35,420 - Extracted links and ISINs from JSON object.
INFO sita 2020-07-10 11:32:49,093 - Made entry for extracted data in datafile successfully.
INFO werkzeug 2020-07-10 11:32:49,095 - 127.0.0.1 - - [10/Jul/2020 11:32:49] "[37mPOST /extract?filepath=ISINS_v3.xlsx&no_of_docs=15&uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:32:49,106 - Requested to export extracted data.
INFO sita 2020-07-10 11:32:49,286 - Exported successfully
INFO werkzeug 2020-07-10 11:32:49,288 - 127.0.0.1 - - [10/Jul/2020 11:32:49] "[37mPOST /extract/export?filepath=extract.xlsx&uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:32:49,299 - Requested to pre-process data.
DEBUG sita 2020-07-10 11:33:03,430 - Pre-processed data
DEBUG sita 2020-07-10 11:33:03,432 - Made entry of pre-processed data in datafile successfully
INFO werkzeug 2020-07-10 11:33:03,433 - 127.0.0.1 - - [10/Jul/2020 11:33:03] "[37mPOST /preprocess?steps=url&steps=stemming&steps=lemmatization&steps=stopwords&steps=unusual&uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:33:03,446 - Requested to export pre-processed data.
DEBUG sita 2020-07-10 11:33:03,447 - Reading pre-processed datafile.
DEBUG sita 2020-07-10 11:33:03,464 - Exporting pre-processed data to excel file.
INFO sita 2020-07-10 11:33:03,566 - Exported pre-processed data successfully.
INFO werkzeug 2020-07-10 11:33:03,567 - 127.0.0.1 - - [10/Jul/2020 11:33:03] "[37mPOST /preprocess/export?filepath=prep.xlsx&uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:33:03,578 - Requested to cluster documents.
DEBUG sita 2020-07-10 11:33:03,578 - Reading datafile..
DEBUG sita 2020-07-10 11:33:03,580 - Calculating tf-idf
DEBUG sita 2020-07-10 11:33:03,627 - Calculating variance threshold
DEBUG sita 2020-07-10 11:33:03,640 - Applying PCA
DEBUG sita 2020-07-10 11:33:03,660 - Applying K-Means algorithm
DEBUG sita 2020-07-10 11:33:03,715 - Sorting clusters
DEBUG sita 2020-07-10 11:33:03,716 - Converting to JSON format
DEBUG sita 2020-07-10 11:33:03,719 - Exporting clustering results
DEBUG sita 2020-07-10 11:33:03,720 - Writting summary
DEBUG sita 2020-07-10 11:33:03,722 - Writting clustering information to datafile
DEBUG sita 2020-07-10 11:33:03,724 - Getting scatter plot for clustered data
INFO sita 2020-07-10 11:33:03,900 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:33:03,901 - 127.0.0.1 - - [10/Jul/2020 11:33:03] "[37mPOST /clustering/kmeans?k=4&format=csv&uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:33:04,035 - Requested to get clustering details.
DEBUG sita 2020-07-10 11:33:04,035 - Reading datafile for clustered data
INFO sita 2020-07-10 11:33:04,036 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:33:04,038 - 127.0.0.1 - - [10/Jul/2020 11:33:04] "[37mGET /clustering/kmeans?uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:33:04,050 - Requested to get clustering summary.
DEBUG sita 2020-07-10 11:33:04,050 - Reading datafile for clustering summary
INFO sita 2020-07-10 11:33:04,051 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:33:04,052 - 127.0.0.1 - - [10/Jul/2020 11:33:04] "[37mGET /clustering/summary?uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:33:04,064 - Requested to cluster documents.
DEBUG sita 2020-07-10 11:33:04,065 - Reading datafile..
DEBUG sita 2020-07-10 11:33:04,066 - Calculating tf-idf
DEBUG sita 2020-07-10 11:33:04,105 - Calculating variance threshold
DEBUG sita 2020-07-10 11:33:04,113 - Applying PCA
DEBUG sita 2020-07-10 11:33:04,127 - Applying DBSCAN algorithm
DEBUG sita 2020-07-10 11:33:04,162 - Sorting clusters
DEBUG sita 2020-07-10 11:33:04,164 - Converting to JSON format
DEBUG sita 2020-07-10 11:33:04,166 - Exporting clustering results
DEBUG sita 2020-07-10 11:33:04,167 - Writting summary
DEBUG sita 2020-07-10 11:33:04,169 - Writting clustering information to datafile
DEBUG sita 2020-07-10 11:33:04,171 - Getting scatter plot for clustered data
INFO sita 2020-07-10 11:33:04,296 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:33:04,297 - 127.0.0.1 - - [10/Jul/2020 11:33:04] "[37mPOST /clustering/dbscan?eps=0.3&min=1&format=csv&uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:33:04,345 - Requested to get clustering details.
DEBUG sita 2020-07-10 11:33:04,346 - Reading datafile for clustered data
INFO sita 2020-07-10 11:33:04,346 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:33:04,349 - 127.0.0.1 - - [10/Jul/2020 11:33:04] "[37mGET /clustering/dbscan?uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:33:04,361 - Requested to get clustering summary.
DEBUG sita 2020-07-10 11:33:04,361 - Reading datafile for clustering summary
INFO sita 2020-07-10 11:33:04,362 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:33:04,363 - 127.0.0.1 - - [10/Jul/2020 11:33:04] "[37mGET /clustering/summary?uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:33:04,378 - Requested to cluster documents.
DEBUG sita 2020-07-10 11:33:04,378 - Reading datafile..
DEBUG sita 2020-07-10 11:33:04,379 - Calculating tf-idf
DEBUG sita 2020-07-10 11:33:04,423 - Calculating variance threshold
DEBUG sita 2020-07-10 11:33:04,436 - Applying PCA
DEBUG sita 2020-07-10 11:33:04,458 - Applying Agglomerative algorithm
DEBUG sita 2020-07-10 11:33:04,753 - Sorting clusters
DEBUG sita 2020-07-10 11:33:04,755 - Converting to JSON format
DEBUG sita 2020-07-10 11:33:04,756 - Exporting clustering results
DEBUG sita 2020-07-10 11:33:04,758 - Writting summary
DEBUG sita 2020-07-10 11:33:04,760 - Writting clustering information to datafile
DEBUG sita 2020-07-10 11:33:04,761 - Getting scatter plot for clustered data
INFO sita 2020-07-10 11:33:04,916 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:33:04,917 - 127.0.0.1 - - [10/Jul/2020 11:33:04] "[37mPOST /clustering/agglomerative?k=5&format=csv&uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:33:05,062 - Requested to get clustering details.
DEBUG sita 2020-07-10 11:33:05,062 - Reading datafile for clustered data
INFO sita 2020-07-10 11:33:05,063 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:33:05,068 - 127.0.0.1 - - [10/Jul/2020 11:33:05] "[37mGET /clustering/agglomerative?uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:33:05,197 - Requested to get clustering summary.
DEBUG sita 2020-07-10 11:33:05,218 - Reading datafile for clustering summary
INFO sita 2020-07-10 11:33:05,247 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:33:05,255 - 127.0.0.1 - - [10/Jul/2020 11:33:05] "[37mGET /clustering/summary?uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:33:05,328 - Requested to cluster documents.
DEBUG sita 2020-07-10 11:33:05,334 - Reading datafile..
DEBUG sita 2020-07-10 11:33:05,336 - Calculating tf-idf
DEBUG sita 2020-07-10 11:33:05,418 - Calculating variance threshold
DEBUG sita 2020-07-10 11:33:05,438 - Applying PCA
DEBUG sita 2020-07-10 11:33:05,477 - Applying Birch algorithm
DEBUG sita 2020-07-10 11:33:05,512 - Sorting clusters
DEBUG sita 2020-07-10 11:33:05,514 - Converting to JSON format
DEBUG sita 2020-07-10 11:33:05,517 - Exporting clustering results
DEBUG sita 2020-07-10 11:33:05,519 - Writting summary
DEBUG sita 2020-07-10 11:33:05,528 - Writting clustering information to datafile
DEBUG sita 2020-07-10 11:33:05,530 - Getting scatter plot for clustered data
INFO sita 2020-07-10 11:33:05,783 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:33:05,784 - 127.0.0.1 - - [10/Jul/2020 11:33:05] "[37mPOST /clustering/birch?k=5&format=csv&uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:33:05,855 - Requested to get clustering details.
DEBUG sita 2020-07-10 11:33:05,856 - Reading datafile for clustered data
INFO sita 2020-07-10 11:33:05,857 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:33:05,863 - 127.0.0.1 - - [10/Jul/2020 11:33:05] "[37mGET /clustering/birch?uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:33:05,893 - Requested to get clustering summary.
DEBUG sita 2020-07-10 11:33:05,893 - Reading datafile for clustering summary
INFO sita 2020-07-10 11:33:05,894 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:33:05,896 - 127.0.0.1 - - [10/Jul/2020 11:33:05] "[37mGET /clustering/summary?uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:38:17,105 - Requested to extract data.
DEBUG sita 2020-07-10 11:38:17,105 - Extracted links and ISINs from JSON object.
INFO admin1 2020-07-10 11:38:18,135 - Requested to extract data.
DEBUG admin1 2020-07-10 11:38:18,186 - Extracted links and ISINs from JSON object.
INFO ram 2020-07-10 11:38:19,321 - Requested to extract data.
DEBUG ram 2020-07-10 11:38:19,347 - Extracted links and ISINs from JSON object.
INFO vaishnavi 2020-07-10 11:38:22,691 - Requested to extract data.
DEBUG vaishnavi 2020-07-10 11:38:22,741 - Extracted links and ISINs from JSON object.
INFO ram 2020-07-10 11:38:32,008 - Made entry for extracted data in datafile successfully.
INFO werkzeug 2020-07-10 11:38:32,009 - 127.0.0.1 - - [10/Jul/2020 11:38:32] "[37mPOST /extract?filepath=ISINS_v3.xlsx&no_of_docs=9&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:38:32,019 - Requested to export extracted data.
INFO ram 2020-07-10 11:38:32,398 - Exported successfully
INFO werkzeug 2020-07-10 11:38:32,399 - 127.0.0.1 - - [10/Jul/2020 11:38:32] "[37mPOST /extract/export?filepath=extract.xlsx&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:38:32,410 - Requested to pre-process data.
DEBUG ram 2020-07-10 11:38:42,627 - Pre-processed data
DEBUG ram 2020-07-10 11:38:42,629 - Made entry of pre-processed data in datafile successfully
INFO werkzeug 2020-07-10 11:38:42,630 - 127.0.0.1 - - [10/Jul/2020 11:38:42] "[37mPOST /preprocess?steps=url&steps=stemming&steps=lemmatization&steps=stopwords&steps=unusual&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:38:42,642 - Requested to export pre-processed data.
DEBUG ram 2020-07-10 11:38:42,642 - Reading pre-processed datafile.
DEBUG ram 2020-07-10 11:38:42,659 - Exporting pre-processed data to excel file.
INFO ram 2020-07-10 11:38:42,728 - Exported pre-processed data successfully.
INFO werkzeug 2020-07-10 11:38:42,730 - 127.0.0.1 - - [10/Jul/2020 11:38:42] "[37mPOST /preprocess/export?filepath=prep.xlsx&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:38:42,740 - Requested to cluster documents.
DEBUG ram 2020-07-10 11:38:42,740 - Reading datafile..
DEBUG ram 2020-07-10 11:38:42,741 - Calculating tf-idf
DEBUG ram 2020-07-10 11:38:42,775 - Calculating variance threshold
DEBUG ram 2020-07-10 11:38:42,783 - Applying PCA
DEBUG ram 2020-07-10 11:38:42,801 - Applying K-Means algorithm
DEBUG ram 2020-07-10 11:38:42,846 - Sorting clusters
DEBUG ram 2020-07-10 11:38:42,847 - Converting to JSON format
DEBUG ram 2020-07-10 11:38:42,847 - Exporting clustering results
DEBUG ram 2020-07-10 11:38:42,849 - Writting summary
DEBUG ram 2020-07-10 11:38:42,850 - Writting clustering information to datafile
DEBUG ram 2020-07-10 11:38:42,852 - Getting scatter plot for clustered data
INFO ram 2020-07-10 11:38:43,007 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:38:43,007 - 127.0.0.1 - - [10/Jul/2020 11:38:43] "[37mPOST /clustering/kmeans?k=4&format=csv&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:38:55,718 - Made entry for extracted data in datafile successfully.
INFO werkzeug 2020-07-10 11:38:55,719 - 127.0.0.1 - - [10/Jul/2020 11:38:55] "[37mPOST /extract?filepath=ISINS_v3.xlsx&no_of_docs=15&uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:38:55,730 - Requested to export extracted data.
INFO sita 2020-07-10 11:38:55,937 - Exported successfully
INFO werkzeug 2020-07-10 11:38:55,939 - 127.0.0.1 - - [10/Jul/2020 11:38:55] "[37mPOST /extract/export?filepath=extract.xlsx&uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:38:55,951 - Requested to pre-process data.
INFO vaishnavi 2020-07-10 11:38:57,750 - Made entry for extracted data in datafile successfully.
INFO werkzeug 2020-07-10 11:38:57,767 - 127.0.0.1 - - [10/Jul/2020 11:38:57] "[37mPOST /extract?filepath=ISINS_v3.xlsx&no_of_docs=15&uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO vaishnavi 2020-07-10 11:38:57,812 - Requested to export extracted data.
INFO vaishnavi 2020-07-10 11:39:01,139 - Exported successfully
INFO werkzeug 2020-07-10 11:39:01,140 - 127.0.0.1 - - [10/Jul/2020 11:39:01] "[37mPOST /extract/export?filepath=extract.xlsx&uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO vaishnavi 2020-07-10 11:39:01,239 - Requested to pre-process data.
INFO admin1 2020-07-10 11:39:02,160 - Made entry for extracted data in datafile successfully.
INFO werkzeug 2020-07-10 11:39:02,203 - 127.0.0.1 - - [10/Jul/2020 11:39:02] "[37mPOST /extract?filepath=ISINS_v3.xlsx&no_of_docs=15&uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 11:39:02,472 - Requested to export extracted data.
INFO admin1 2020-07-10 11:39:06,679 - Exported successfully
INFO werkzeug 2020-07-10 11:39:06,686 - 127.0.0.1 - - [10/Jul/2020 11:39:06] "[37mPOST /extract/export?filepath=extract.xlsx&uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 11:39:06,950 - Requested to pre-process data.
DEBUG sita 2020-07-10 11:39:36,627 - Pre-processed data
DEBUG sita 2020-07-10 11:39:36,742 - Made entry of pre-processed data in datafile successfully
INFO werkzeug 2020-07-10 11:39:36,772 - 127.0.0.1 - - [10/Jul/2020 11:39:36] "[37mPOST /preprocess?steps=url&steps=stemming&steps=lemmatization&steps=stopwords&steps=unusual&uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:39:36,942 - Requested to export pre-processed data.
DEBUG sita 2020-07-10 11:39:36,972 - Reading pre-processed datafile.
DEBUG sita 2020-07-10 11:39:37,110 - Exporting pre-processed data to excel file.
INFO sita 2020-07-10 11:39:39,824 - Exported pre-processed data successfully.
INFO werkzeug 2020-07-10 11:39:39,837 - 127.0.0.1 - - [10/Jul/2020 11:39:39] "[37mPOST /preprocess/export?filepath=prep.xlsx&uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:39:39,959 - Requested to cluster documents.
DEBUG sita 2020-07-10 11:39:39,971 - Reading datafile..
DEBUG sita 2020-07-10 11:39:40,372 - Calculating tf-idf
DEBUG sita 2020-07-10 11:39:40,764 - Calculating variance threshold
DEBUG sita 2020-07-10 11:39:40,870 - Applying PCA
DEBUG sita 2020-07-10 11:39:41,122 - Applying K-Means algorithm
DEBUG sita 2020-07-10 11:39:41,874 - Sorting clusters
DEBUG sita 2020-07-10 11:39:41,876 - Converting to JSON format
DEBUG sita 2020-07-10 11:39:41,878 - Exporting clustering results
DEBUG sita 2020-07-10 11:39:41,923 - Writting summary
DEBUG sita 2020-07-10 11:39:42,026 - Writting clustering information to datafile
DEBUG sita 2020-07-10 11:39:42,081 - Getting scatter plot for clustered data
DEBUG vaishnavi 2020-07-10 11:39:43,368 - Pre-processed data
DEBUG vaishnavi 2020-07-10 11:39:43,426 - Made entry of pre-processed data in datafile successfully
INFO werkzeug 2020-07-10 11:39:43,463 - 127.0.0.1 - - [10/Jul/2020 11:39:43] "[37mPOST /preprocess?steps=url&steps=stemming&steps=lemmatization&steps=stopwords&steps=unusual&uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO vaishnavi 2020-07-10 11:39:43,602 - Requested to export pre-processed data.
INFO sita 2020-07-10 11:39:43,609 - Performed clustering successfully
DEBUG vaishnavi 2020-07-10 11:39:43,615 - Reading pre-processed datafile.
INFO werkzeug 2020-07-10 11:39:43,632 - 127.0.0.1 - - [10/Jul/2020 11:39:43] "[37mPOST /clustering/kmeans?k=4&format=csv&uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG vaishnavi 2020-07-10 11:39:43,754 - Exporting pre-processed data to excel file.
INFO sita 2020-07-10 11:39:43,809 - Requested to get clustering details.
DEBUG sita 2020-07-10 11:39:43,821 - Reading datafile for clustered data
INFO sita 2020-07-10 11:39:43,863 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:39:43,893 - 127.0.0.1 - - [10/Jul/2020 11:39:43] "[37mGET /clustering/kmeans?uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:39:43,992 - Requested to get clustering summary.
DEBUG sita 2020-07-10 11:39:43,992 - Reading datafile for clustering summary
INFO sita 2020-07-10 11:39:44,005 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:39:44,020 - 127.0.0.1 - - [10/Jul/2020 11:39:44] "[37mGET /clustering/summary?uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:39:44,130 - Requested to cluster documents.
DEBUG sita 2020-07-10 11:39:44,136 - Reading datafile..
DEBUG sita 2020-07-10 11:39:44,226 - Calculating tf-idf
DEBUG sita 2020-07-10 11:39:44,533 - Calculating variance threshold
DEBUG sita 2020-07-10 11:39:44,559 - Applying PCA
DEBUG sita 2020-07-10 11:39:44,749 - Applying DBSCAN algorithm
DEBUG sita 2020-07-10 11:39:44,791 - Sorting clusters
DEBUG sita 2020-07-10 11:39:44,810 - Converting to JSON format
DEBUG sita 2020-07-10 11:39:44,817 - Exporting clustering results
DEBUG sita 2020-07-10 11:39:44,854 - Writting summary
DEBUG sita 2020-07-10 11:39:44,896 - Writting clustering information to datafile
DEBUG sita 2020-07-10 11:39:44,937 - Getting scatter plot for clustered data
INFO sita 2020-07-10 11:39:45,318 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:39:45,319 - 127.0.0.1 - - [10/Jul/2020 11:39:45] "[37mPOST /clustering/dbscan?eps=0.3&min=1&format=csv&uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:39:45,442 - Requested to get clustering details.
DEBUG sita 2020-07-10 11:39:45,448 - Reading datafile for clustered data
INFO vaishnavi 2020-07-10 11:39:45,454 - Exported pre-processed data successfully.
INFO werkzeug 2020-07-10 11:39:45,460 - 127.0.0.1 - - [10/Jul/2020 11:39:45] "[37mPOST /preprocess/export?filepath=prep.xlsx&uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:39:45,473 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:39:45,516 - 127.0.0.1 - - [10/Jul/2020 11:39:45] "[37mGET /clustering/dbscan?uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO vaishnavi 2020-07-10 11:39:45,560 - Requested to cluster documents.
DEBUG vaishnavi 2020-07-10 11:39:45,572 - Reading datafile..
INFO sita 2020-07-10 11:39:45,615 - Requested to get clustering summary.
DEBUG sita 2020-07-10 11:39:45,621 - Reading datafile for clustering summary
INFO sita 2020-07-10 11:39:45,740 - Get request for clustering summary served successfully
DEBUG vaishnavi 2020-07-10 11:39:45,754 - Calculating tf-idf
INFO werkzeug 2020-07-10 11:39:45,783 - 127.0.0.1 - - [10/Jul/2020 11:39:45] "[37mGET /clustering/summary?uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:39:45,834 - Requested to cluster documents.
DEBUG sita 2020-07-10 11:39:45,834 - Reading datafile..
DEBUG sita 2020-07-10 11:39:45,842 - Calculating tf-idf
DEBUG vaishnavi 2020-07-10 11:39:45,918 - Calculating variance threshold
DEBUG vaishnavi 2020-07-10 11:39:46,046 - Applying PCA
DEBUG sita 2020-07-10 11:39:46,118 - Calculating variance threshold
DEBUG vaishnavi 2020-07-10 11:39:46,202 - Applying K-Means algorithm
DEBUG sita 2020-07-10 11:39:46,210 - Applying PCA
DEBUG sita 2020-07-10 11:39:46,407 - Applying Agglomerative algorithm
DEBUG sita 2020-07-10 11:39:46,539 - Sorting clusters
DEBUG sita 2020-07-10 11:39:46,555 - Converting to JSON format
DEBUG sita 2020-07-10 11:39:46,570 - Exporting clustering results
DEBUG vaishnavi 2020-07-10 11:39:46,578 - Sorting clusters
DEBUG vaishnavi 2020-07-10 11:39:46,602 - Converting to JSON format
DEBUG sita 2020-07-10 11:39:46,602 - Writting summary
DEBUG vaishnavi 2020-07-10 11:39:46,611 - Exporting clustering results
DEBUG sita 2020-07-10 11:39:46,636 - Writting clustering information to datafile
DEBUG vaishnavi 2020-07-10 11:39:46,649 - Writting summary
DEBUG sita 2020-07-10 11:39:46,666 - Getting scatter plot for clustered data
DEBUG vaishnavi 2020-07-10 11:39:46,682 - Writting clustering information to datafile
DEBUG vaishnavi 2020-07-10 11:39:46,734 - Getting scatter plot for clustered data
DEBUG admin1 2020-07-10 11:39:46,830 - Pre-processed data
DEBUG admin1 2020-07-10 11:39:46,880 - Made entry of pre-processed data in datafile successfully
INFO werkzeug 2020-07-10 11:39:46,884 - 127.0.0.1 - - [10/Jul/2020 11:39:46] "[37mPOST /preprocess?steps=url&steps=stemming&steps=lemmatization&steps=stopwords&steps=unusual&uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 11:39:46,918 - Requested to export pre-processed data.
DEBUG admin1 2020-07-10 11:39:46,922 - Reading pre-processed datafile.
INFO sita 2020-07-10 11:39:46,980 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:39:46,981 - 127.0.0.1 - - [10/Jul/2020 11:39:46] "[37mPOST /clustering/agglomerative?k=5&format=csv&uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG admin1 2020-07-10 11:39:47,024 - Exporting pre-processed data to excel file.
INFO sita 2020-07-10 11:39:47,094 - Requested to get clustering details.
INFO vaishnavi 2020-07-10 11:39:47,140 - Performed clustering successfully
DEBUG sita 2020-07-10 11:39:47,140 - Reading datafile for clustered data
INFO werkzeug 2020-07-10 11:39:47,141 - 127.0.0.1 - - [10/Jul/2020 11:39:47] "[37mPOST /clustering/kmeans?k=4&format=csv&uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:39:47,143 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:39:47,150 - 127.0.0.1 - - [10/Jul/2020 11:39:47] "[37mGET /clustering/agglomerative?uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:39:47,171 - Requested to get clustering summary.
DEBUG sita 2020-07-10 11:39:47,171 - Reading datafile for clustering summary
INFO sita 2020-07-10 11:39:47,173 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:39:47,175 - 127.0.0.1 - - [10/Jul/2020 11:39:47] "[37mGET /clustering/summary?uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:39:47,207 - Requested to cluster documents.
DEBUG sita 2020-07-10 11:39:47,208 - Reading datafile..
DEBUG sita 2020-07-10 11:39:47,209 - Calculating tf-idf
DEBUG sita 2020-07-10 11:39:47,275 - Calculating variance threshold
DEBUG sita 2020-07-10 11:39:47,289 - Applying PCA
DEBUG sita 2020-07-10 11:39:47,319 - Applying Birch algorithm
DEBUG sita 2020-07-10 11:39:47,338 - Sorting clusters
DEBUG sita 2020-07-10 11:39:47,341 - Converting to JSON format
DEBUG sita 2020-07-10 11:39:47,343 - Exporting clustering results
DEBUG sita 2020-07-10 11:39:47,345 - Writting summary
DEBUG sita 2020-07-10 11:39:47,346 - Writting clustering information to datafile
DEBUG sita 2020-07-10 11:39:47,349 - Getting scatter plot for clustered data
INFO admin1 2020-07-10 11:39:47,437 - Exported pre-processed data successfully.
INFO werkzeug 2020-07-10 11:39:47,439 - 127.0.0.1 - - [10/Jul/2020 11:39:47] "[37mPOST /preprocess/export?filepath=prep.xlsx&uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 11:39:47,544 - Requested to cluster documents.
INFO sita 2020-07-10 11:39:47,544 - Performed clustering successfully
DEBUG admin1 2020-07-10 11:39:47,544 - Reading datafile..
INFO werkzeug 2020-07-10 11:39:47,545 - 127.0.0.1 - - [10/Jul/2020 11:39:47] "[37mPOST /clustering/birch?k=5&format=csv&uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG admin1 2020-07-10 11:39:47,547 - Calculating tf-idf
INFO sita 2020-07-10 11:39:47,620 - Requested to get clustering details.
DEBUG admin1 2020-07-10 11:39:47,624 - Calculating variance threshold
DEBUG sita 2020-07-10 11:39:47,625 - Reading datafile for clustered data
DEBUG admin1 2020-07-10 11:39:47,641 - Applying PCA
INFO sita 2020-07-10 11:39:47,641 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:39:47,666 - 127.0.0.1 - - [10/Jul/2020 11:39:47] "[37mGET /clustering/birch?uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG admin1 2020-07-10 11:39:47,674 - Applying K-Means algorithm
INFO sita 2020-07-10 11:39:47,706 - Requested to get clustering summary.
DEBUG sita 2020-07-10 11:39:47,714 - Reading datafile for clustering summary
INFO sita 2020-07-10 11:39:47,732 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:39:47,750 - 127.0.0.1 - - [10/Jul/2020 11:39:47] "[37mGET /clustering/summary?uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG admin1 2020-07-10 11:39:47,755 - Sorting clusters
DEBUG admin1 2020-07-10 11:39:47,757 - Converting to JSON format
DEBUG admin1 2020-07-10 11:39:47,760 - Exporting clustering results
DEBUG admin1 2020-07-10 11:39:47,763 - Writting summary
DEBUG admin1 2020-07-10 11:39:47,765 - Writting clustering information to datafile
DEBUG admin1 2020-07-10 11:39:47,767 - Getting scatter plot for clustered data
INFO admin1 2020-07-10 11:39:48,099 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:39:48,100 - 127.0.0.1 - - [10/Jul/2020 11:39:48] "[37mPOST /clustering/kmeans?k=4&format=csv&uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 11:40:03,572 - Requested to extract data.
DEBUG admin1 2020-07-10 11:40:03,572 - Extracted links and ISINs from JSON object.
INFO sita 2020-07-10 11:40:05,160 - Requested to extract data.
DEBUG sita 2020-07-10 11:40:05,160 - Extracted links and ISINs from JSON object.
INFO vaishnavi 2020-07-10 11:40:06,531 - Requested to extract data.
DEBUG vaishnavi 2020-07-10 11:40:06,537 - Extracted links and ISINs from JSON object.
INFO ram 2020-07-10 11:40:07,171 - Requested to extract data.
DEBUG ram 2020-07-10 11:40:07,172 - Extracted links and ISINs from JSON object.
INFO ram 2020-07-10 11:40:15,203 - Made entry for extracted data in datafile successfully.
INFO werkzeug 2020-07-10 11:40:15,215 - 127.0.0.1 - - [10/Jul/2020 11:40:15] "[37mPOST /extract?filepath=ISINS_v3.xlsx&no_of_docs=9&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:40:15,286 - Requested to export extracted data.
INFO ram 2020-07-10 11:40:15,969 - Exported successfully
INFO werkzeug 2020-07-10 11:40:15,970 - 127.0.0.1 - - [10/Jul/2020 11:40:15] "[37mPOST /extract/export?filepath=extract.xlsx&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:40:15,981 - Requested to pre-process data.
INFO admin1 2020-07-10 11:40:17,036 - Made entry for extracted data in datafile successfully.
INFO werkzeug 2020-07-10 11:40:17,056 - 127.0.0.1 - - [10/Jul/2020 11:40:17] "[37mPOST /extract?filepath=ISINS_v3.xlsx&no_of_docs=15&uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 11:40:17,217 - Requested to export extracted data.
INFO sita 2020-07-10 11:40:17,971 - Made entry for extracted data in datafile successfully.
INFO werkzeug 2020-07-10 11:40:17,995 - 127.0.0.1 - - [10/Jul/2020 11:40:17] "[37mPOST /extract?filepath=ISINS_v3.xlsx&no_of_docs=15&uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:40:18,167 - Requested to export extracted data.
INFO admin1 2020-07-10 11:40:20,457 - Exported successfully
INFO werkzeug 2020-07-10 11:40:20,458 - 127.0.0.1 - - [10/Jul/2020 11:40:20] "[37mPOST /extract/export?filepath=extract.xlsx&uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 11:40:20,543 - Requested to pre-process data.
INFO sita 2020-07-10 11:40:21,822 - Exported successfully
INFO werkzeug 2020-07-10 11:40:21,906 - 127.0.0.1 - - [10/Jul/2020 11:40:21] "[37mPOST /extract/export?filepath=extract.xlsx&uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:40:22,078 - Requested to pre-process data.
INFO vaishnavi 2020-07-10 11:40:22,498 - Made entry for extracted data in datafile successfully.
INFO werkzeug 2020-07-10 11:40:22,528 - 127.0.0.1 - - [10/Jul/2020 11:40:22] "[37mPOST /extract?filepath=ISINS_v3.xlsx&no_of_docs=15&uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO vaishnavi 2020-07-10 11:40:22,730 - Requested to export extracted data.
INFO vaishnavi 2020-07-10 11:40:30,292 - Exported successfully
INFO werkzeug 2020-07-10 11:40:30,317 - 127.0.0.1 - - [10/Jul/2020 11:40:30] "[37mPOST /extract/export?filepath=extract.xlsx&uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO vaishnavi 2020-07-10 11:40:30,513 - Requested to pre-process data.
DEBUG ram 2020-07-10 11:40:38,534 - Pre-processed data
DEBUG ram 2020-07-10 11:40:38,628 - Made entry of pre-processed data in datafile successfully
INFO werkzeug 2020-07-10 11:40:38,682 - 127.0.0.1 - - [10/Jul/2020 11:40:38] "[37mPOST /preprocess?steps=url&steps=stemming&steps=lemmatization&steps=stopwords&steps=unusual&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:40:39,041 - Requested to export pre-processed data.
DEBUG ram 2020-07-10 11:40:39,089 - Reading pre-processed datafile.
DEBUG ram 2020-07-10 11:40:39,808 - Exporting pre-processed data to excel file.
INFO ram 2020-07-10 11:40:43,404 - Exported pre-processed data successfully.
INFO werkzeug 2020-07-10 11:40:43,410 - 127.0.0.1 - - [10/Jul/2020 11:40:43] "[37mPOST /preprocess/export?filepath=prep.xlsx&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:40:43,726 - Requested to cluster documents.
DEBUG ram 2020-07-10 11:40:43,822 - Reading datafile..
DEBUG ram 2020-07-10 11:40:44,303 - Calculating tf-idf
DEBUG ram 2020-07-10 11:40:44,714 - Calculating variance threshold
DEBUG ram 2020-07-10 11:40:44,826 - Applying PCA
DEBUG ram 2020-07-10 11:40:45,007 - Applying K-Means algorithm
DEBUG ram 2020-07-10 11:40:45,852 - Sorting clusters
DEBUG ram 2020-07-10 11:40:45,900 - Converting to JSON format
DEBUG ram 2020-07-10 11:40:45,949 - Exporting clustering results
DEBUG ram 2020-07-10 11:40:46,002 - Writting summary
DEBUG ram 2020-07-10 11:40:46,054 - Writting clustering information to datafile
DEBUG ram 2020-07-10 11:40:46,215 - Getting scatter plot for clustered data
INFO ram 2020-07-10 11:40:48,879 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:40:48,891 - 127.0.0.1 - - [10/Jul/2020 11:40:48] "[37mPOST /clustering/kmeans?k=4&format=csv&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:40:49,249 - Requested to get clustering details.
DEBUG ram 2020-07-10 11:40:49,300 - Reading datafile for clustered data
INFO ram 2020-07-10 11:40:49,760 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:40:49,944 - 127.0.0.1 - - [10/Jul/2020 11:40:49] "[37mGET /clustering/kmeans?uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:40:50,117 - Requested to get clustering summary.
DEBUG ram 2020-07-10 11:40:50,149 - Reading datafile for clustering summary
INFO ram 2020-07-10 11:40:50,906 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:40:51,122 - 127.0.0.1 - - [10/Jul/2020 11:40:51] "[37mGET /clustering/summary?uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:40:51,452 - Requested to cluster documents.
DEBUG ram 2020-07-10 11:40:51,470 - Reading datafile..
DEBUG ram 2020-07-10 11:40:52,132 - Calculating tf-idf
DEBUG ram 2020-07-10 11:40:52,534 - Calculating variance threshold
DEBUG ram 2020-07-10 11:40:52,584 - Applying PCA
DEBUG ram 2020-07-10 11:40:52,736 - Applying DBSCAN algorithm
DEBUG ram 2020-07-10 11:40:52,781 - Sorting clusters
DEBUG ram 2020-07-10 11:40:52,794 - Converting to JSON format
DEBUG ram 2020-07-10 11:40:52,851 - Exporting clustering results
DEBUG ram 2020-07-10 11:40:53,051 - Writting summary
DEBUG ram 2020-07-10 11:40:53,195 - Writting clustering information to datafile
DEBUG ram 2020-07-10 11:40:53,312 - Getting scatter plot for clustered data
INFO ram 2020-07-10 11:40:55,082 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:40:55,112 - 127.0.0.1 - - [10/Jul/2020 11:40:55] "[37mPOST /clustering/dbscan?eps=0.3&min=1&format=csv&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:40:55,289 - Requested to get clustering details.
DEBUG ram 2020-07-10 11:40:55,289 - Reading datafile for clustered data
INFO ram 2020-07-10 11:40:55,594 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:40:55,737 - 127.0.0.1 - - [10/Jul/2020 11:40:55] "[37mGET /clustering/dbscan?uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:40:56,000 - Requested to get clustering summary.
DEBUG ram 2020-07-10 11:40:56,019 - Reading datafile for clustering summary
INFO ram 2020-07-10 11:40:56,644 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:40:56,672 - 127.0.0.1 - - [10/Jul/2020 11:40:56] "[37mGET /clustering/summary?uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:40:56,821 - Requested to cluster documents.
DEBUG ram 2020-07-10 11:40:56,875 - Reading datafile..
DEBUG ram 2020-07-10 11:40:57,797 - Calculating tf-idf
DEBUG ram 2020-07-10 11:40:58,149 - Calculating variance threshold
DEBUG ram 2020-07-10 11:40:58,236 - Applying PCA
DEBUG ram 2020-07-10 11:40:58,519 - Applying Agglomerative algorithm
DEBUG ram 2020-07-10 11:40:58,707 - Sorting clusters
DEBUG ram 2020-07-10 11:40:58,727 - Converting to JSON format
DEBUG ram 2020-07-10 11:40:58,807 - Exporting clustering results
DEBUG ram 2020-07-10 11:40:58,928 - Writting summary
DEBUG ram 2020-07-10 11:40:59,009 - Writting clustering information to datafile
DEBUG ram 2020-07-10 11:40:59,100 - Getting scatter plot for clustered data
INFO ram 2020-07-10 11:41:00,378 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:41:00,414 - 127.0.0.1 - - [10/Jul/2020 11:41:00] "[37mPOST /clustering/agglomerative?k=5&format=csv&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:41:00,715 - Requested to get clustering details.
DEBUG ram 2020-07-10 11:41:00,741 - Reading datafile for clustered data
INFO ram 2020-07-10 11:41:01,407 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:41:01,518 - 127.0.0.1 - - [10/Jul/2020 11:41:01] "[37mGET /clustering/agglomerative?uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:41:01,742 - Requested to get clustering summary.
DEBUG ram 2020-07-10 11:41:01,742 - Reading datafile for clustering summary
INFO ram 2020-07-10 11:41:02,259 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:41:02,510 - 127.0.0.1 - - [10/Jul/2020 11:41:02] "[37mGET /clustering/summary?uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:41:02,862 - Requested to cluster documents.
DEBUG ram 2020-07-10 11:41:02,881 - Reading datafile..
DEBUG ram 2020-07-10 11:41:03,416 - Calculating tf-idf
DEBUG ram 2020-07-10 11:41:03,921 - Calculating variance threshold
DEBUG ram 2020-07-10 11:41:04,119 - Applying PCA
DEBUG ram 2020-07-10 11:41:04,278 - Applying Birch algorithm
DEBUG ram 2020-07-10 11:41:04,542 - Sorting clusters
DEBUG ram 2020-07-10 11:41:04,602 - Converting to JSON format
DEBUG ram 2020-07-10 11:41:04,623 - Exporting clustering results
DEBUG ram 2020-07-10 11:41:04,728 - Writting summary
DEBUG ram 2020-07-10 11:41:04,882 - Writting clustering information to datafile
DEBUG ram 2020-07-10 11:41:04,952 - Getting scatter plot for clustered data
DEBUG admin1 2020-07-10 11:41:06,159 - Pre-processed data
INFO ram 2020-07-10 11:41:06,320 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:41:06,327 - 127.0.0.1 - - [10/Jul/2020 11:41:06] "[37mPOST /clustering/birch?k=5&format=csv&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG admin1 2020-07-10 11:41:06,328 - Made entry of pre-processed data in datafile successfully
INFO werkzeug 2020-07-10 11:41:06,335 - 127.0.0.1 - - [10/Jul/2020 11:41:06] "[37mPOST /preprocess?steps=url&steps=stemming&steps=lemmatization&steps=stopwords&steps=unusual&uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 11:41:06,418 - Requested to export pre-processed data.
DEBUG admin1 2020-07-10 11:41:06,443 - Reading pre-processed datafile.
INFO ram 2020-07-10 11:41:06,449 - Requested to get clustering details.
DEBUG ram 2020-07-10 11:41:06,487 - Reading datafile for clustered data
INFO ram 2020-07-10 11:41:06,830 - Get request for clustered data served successfully
DEBUG admin1 2020-07-10 11:41:06,936 - Exporting pre-processed data to excel file.
INFO werkzeug 2020-07-10 11:41:07,004 - 127.0.0.1 - - [10/Jul/2020 11:41:07] "[37mGET /clustering/birch?uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:41:07,116 - Requested to get clustering summary.
DEBUG ram 2020-07-10 11:41:07,144 - Reading datafile for clustering summary
INFO ram 2020-07-10 11:41:07,483 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:41:07,567 - 127.0.0.1 - - [10/Jul/2020 11:41:07] "[37mGET /clustering/summary?uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG sita 2020-07-10 11:41:07,920 - Pre-processed data
DEBUG sita 2020-07-10 11:41:07,970 - Made entry of pre-processed data in datafile successfully
INFO werkzeug 2020-07-10 11:41:07,983 - 127.0.0.1 - - [10/Jul/2020 11:41:07] "[37mPOST /preprocess?steps=url&steps=stemming&steps=lemmatization&steps=stopwords&steps=unusual&uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:41:08,071 - Requested to export pre-processed data.
DEBUG sita 2020-07-10 11:41:08,089 - Reading pre-processed datafile.
DEBUG sita 2020-07-10 11:41:08,211 - Exporting pre-processed data to excel file.
INFO admin1 2020-07-10 11:41:08,704 - Exported pre-processed data successfully.
INFO werkzeug 2020-07-10 11:41:08,717 - 127.0.0.1 - - [10/Jul/2020 11:41:08] "[37mPOST /preprocess/export?filepath=prep.xlsx&uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 11:41:08,863 - Requested to cluster documents.
DEBUG admin1 2020-07-10 11:41:08,882 - Reading datafile..
DEBUG admin1 2020-07-10 11:41:08,889 - Calculating tf-idf
DEBUG admin1 2020-07-10 11:41:09,090 - Calculating variance threshold
DEBUG admin1 2020-07-10 11:41:09,147 - Applying PCA
DEBUG admin1 2020-07-10 11:41:09,320 - Applying K-Means algorithm
DEBUG admin1 2020-07-10 11:41:09,703 - Sorting clusters
DEBUG admin1 2020-07-10 11:41:09,716 - Converting to JSON format
DEBUG admin1 2020-07-10 11:41:09,730 - Exporting clustering results
DEBUG admin1 2020-07-10 11:41:09,778 - Writting summary
DEBUG admin1 2020-07-10 11:41:09,808 - Writting clustering information to datafile
DEBUG admin1 2020-07-10 11:41:09,842 - Getting scatter plot for clustered data
INFO sita 2020-07-10 11:41:09,985 - Exported pre-processed data successfully.
INFO werkzeug 2020-07-10 11:41:09,986 - 127.0.0.1 - - [10/Jul/2020 11:41:09] "[37mPOST /preprocess/export?filepath=prep.xlsx&uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:41:10,056 - Requested to cluster documents.
DEBUG sita 2020-07-10 11:41:10,073 - Reading datafile..
DEBUG sita 2020-07-10 11:41:10,169 - Calculating tf-idf
DEBUG sita 2020-07-10 11:41:10,584 - Calculating variance threshold
INFO admin1 2020-07-10 11:41:10,642 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:41:10,656 - 127.0.0.1 - - [10/Jul/2020 11:41:10] "[37mPOST /clustering/kmeans?k=4&format=csv&uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG sita 2020-07-10 11:41:10,727 - Applying PCA
INFO admin1 2020-07-10 11:41:10,829 - Requested to get clustering details.
DEBUG admin1 2020-07-10 11:41:10,868 - Reading datafile for clustered data
DEBUG sita 2020-07-10 11:41:10,895 - Applying K-Means algorithm
INFO admin1 2020-07-10 11:41:10,924 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:41:11,057 - 127.0.0.1 - - [10/Jul/2020 11:41:11] "[37mGET /clustering/kmeans?uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 11:41:11,172 - Requested to get clustering summary.
DEBUG admin1 2020-07-10 11:41:11,178 - Reading datafile for clustering summary
INFO admin1 2020-07-10 11:41:11,204 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:41:11,243 - 127.0.0.1 - - [10/Jul/2020 11:41:11] "[37mGET /clustering/summary?uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG sita 2020-07-10 11:41:11,247 - Sorting clusters
DEBUG sita 2020-07-10 11:41:11,256 - Converting to JSON format
DEBUG sita 2020-07-10 11:41:11,278 - Exporting clustering results
DEBUG sita 2020-07-10 11:41:11,280 - Writting summary
DEBUG sita 2020-07-10 11:41:11,325 - Writting clustering information to datafile
INFO admin1 2020-07-10 11:41:11,331 - Requested to cluster documents.
DEBUG admin1 2020-07-10 11:41:11,343 - Reading datafile..
DEBUG sita 2020-07-10 11:41:11,368 - Getting scatter plot for clustered data
DEBUG admin1 2020-07-10 11:41:11,403 - Calculating tf-idf
DEBUG admin1 2020-07-10 11:41:11,798 - Calculating variance threshold
DEBUG admin1 2020-07-10 11:41:11,853 - Applying PCA
DEBUG admin1 2020-07-10 11:41:12,037 - Applying DBSCAN algorithm
DEBUG admin1 2020-07-10 11:41:12,152 - Sorting clusters
DEBUG admin1 2020-07-10 11:41:12,166 - Converting to JSON format
DEBUG admin1 2020-07-10 11:41:12,188 - Exporting clustering results
DEBUG admin1 2020-07-10 11:41:12,228 - Writting summary
DEBUG vaishnavi 2020-07-10 11:41:12,235 - Pre-processed data
DEBUG admin1 2020-07-10 11:41:12,259 - Writting clustering information to datafile
DEBUG vaishnavi 2020-07-10 11:41:12,259 - Made entry of pre-processed data in datafile successfully
INFO werkzeug 2020-07-10 11:41:12,276 - 127.0.0.1 - - [10/Jul/2020 11:41:12] "[37mPOST /preprocess?steps=url&steps=stemming&steps=lemmatization&steps=stopwords&steps=unusual&uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG admin1 2020-07-10 11:41:12,280 - Getting scatter plot for clustered data
INFO vaishnavi 2020-07-10 11:41:12,326 - Requested to export pre-processed data.
DEBUG vaishnavi 2020-07-10 11:41:12,332 - Reading pre-processed datafile.
INFO sita 2020-07-10 11:41:12,383 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:41:12,386 - 127.0.0.1 - - [10/Jul/2020 11:41:12] "[37mPOST /clustering/kmeans?k=4&format=csv&uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG vaishnavi 2020-07-10 11:41:12,435 - Exporting pre-processed data to excel file.
INFO admin1 2020-07-10 11:41:12,544 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:41:12,545 - 127.0.0.1 - - [10/Jul/2020 11:41:12] "[37mPOST /clustering/dbscan?eps=0.3&min=1&format=csv&uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:41:12,545 - Requested to get clustering details.
DEBUG sita 2020-07-10 11:41:12,546 - Reading datafile for clustered data
INFO sita 2020-07-10 11:41:12,549 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:41:12,554 - 127.0.0.1 - - [10/Jul/2020 11:41:12] "[37mGET /clustering/kmeans?uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:41:12,578 - Requested to get clustering summary.
DEBUG sita 2020-07-10 11:41:12,579 - Reading datafile for clustering summary
INFO sita 2020-07-10 11:41:12,580 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:41:12,582 - 127.0.0.1 - - [10/Jul/2020 11:41:12] "[37mGET /clustering/summary?uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:41:12,597 - Requested to cluster documents.
DEBUG sita 2020-07-10 11:41:12,597 - Reading datafile..
DEBUG sita 2020-07-10 11:41:12,600 - Calculating tf-idf
INFO admin1 2020-07-10 11:41:12,610 - Requested to get clustering details.
DEBUG admin1 2020-07-10 11:41:12,612 - Reading datafile for clustered data
DEBUG sita 2020-07-10 11:41:12,670 - Calculating variance threshold
INFO admin1 2020-07-10 11:41:12,671 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:41:12,685 - 127.0.0.1 - - [10/Jul/2020 11:41:12] "[37mGET /clustering/dbscan?uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG sita 2020-07-10 11:41:12,687 - Applying PCA
DEBUG sita 2020-07-10 11:41:12,717 - Applying DBSCAN algorithm
INFO admin1 2020-07-10 11:41:12,727 - Requested to get clustering summary.
DEBUG admin1 2020-07-10 11:41:12,729 - Reading datafile for clustering summary
DEBUG sita 2020-07-10 11:41:12,735 - Sorting clusters
DEBUG sita 2020-07-10 11:41:12,738 - Converting to JSON format
DEBUG sita 2020-07-10 11:41:12,740 - Exporting clustering results
INFO admin1 2020-07-10 11:41:12,742 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:41:12,745 - 127.0.0.1 - - [10/Jul/2020 11:41:12] "[37mGET /clustering/summary?uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG sita 2020-07-10 11:41:12,745 - Writting summary
DEBUG sita 2020-07-10 11:41:12,748 - Writting clustering information to datafile
DEBUG sita 2020-07-10 11:41:12,750 - Getting scatter plot for clustered data
INFO admin1 2020-07-10 11:41:12,783 - Requested to cluster documents.
DEBUG admin1 2020-07-10 11:41:12,792 - Reading datafile..
DEBUG admin1 2020-07-10 11:41:12,876 - Calculating tf-idf
INFO sita 2020-07-10 11:41:12,947 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:41:12,951 - 127.0.0.1 - - [10/Jul/2020 11:41:12] "[37mPOST /clustering/dbscan?eps=0.3&min=1&format=csv&uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:41:13,015 - Requested to get clustering details.
DEBUG sita 2020-07-10 11:41:13,016 - Reading datafile for clustered data
DEBUG admin1 2020-07-10 11:41:13,020 - Calculating variance threshold
DEBUG admin1 2020-07-10 11:41:13,033 - Applying PCA
INFO sita 2020-07-10 11:41:13,044 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:41:13,056 - 127.0.0.1 - - [10/Jul/2020 11:41:13] "[37mGET /clustering/dbscan?uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG admin1 2020-07-10 11:41:13,060 - Applying Agglomerative algorithm
DEBUG admin1 2020-07-10 11:41:13,076 - Sorting clusters
DEBUG admin1 2020-07-10 11:41:13,078 - Converting to JSON format
DEBUG admin1 2020-07-10 11:41:13,082 - Exporting clustering results
INFO sita 2020-07-10 11:41:13,083 - Requested to get clustering summary.
DEBUG sita 2020-07-10 11:41:13,083 - Reading datafile for clustering summary
DEBUG admin1 2020-07-10 11:41:13,085 - Writting summary
INFO sita 2020-07-10 11:41:13,086 - Get request for clustering summary served successfully
DEBUG admin1 2020-07-10 11:41:13,087 - Writting clustering information to datafile
INFO werkzeug 2020-07-10 11:41:13,091 - 127.0.0.1 - - [10/Jul/2020 11:41:13] "[37mGET /clustering/summary?uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG admin1 2020-07-10 11:41:13,090 - Getting scatter plot for clustered data
INFO sita 2020-07-10 11:41:13,123 - Requested to cluster documents.
INFO vaishnavi 2020-07-10 11:41:13,126 - Exported pre-processed data successfully.
INFO werkzeug 2020-07-10 11:41:13,152 - 127.0.0.1 - - [10/Jul/2020 11:41:13] "[37mPOST /preprocess/export?filepath=prep.xlsx&uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG sita 2020-07-10 11:41:13,141 - Reading datafile..
INFO vaishnavi 2020-07-10 11:41:13,206 - Requested to cluster documents.
DEBUG vaishnavi 2020-07-10 11:41:13,207 - Reading datafile..
INFO admin1 2020-07-10 11:41:13,293 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:41:13,294 - 127.0.0.1 - - [10/Jul/2020 11:41:13] "[37mPOST /clustering/agglomerative?k=5&format=csv&uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG sita 2020-07-10 11:41:13,293 - Calculating tf-idf
DEBUG vaishnavi 2020-07-10 11:41:13,312 - Calculating tf-idf
INFO admin1 2020-07-10 11:41:13,399 - Requested to get clustering details.
DEBUG sita 2020-07-10 11:41:13,410 - Calculating variance threshold
DEBUG admin1 2020-07-10 11:41:13,422 - Reading datafile for clustered data
DEBUG sita 2020-07-10 11:41:13,457 - Applying PCA
DEBUG vaishnavi 2020-07-10 11:41:13,461 - Calculating variance threshold
INFO admin1 2020-07-10 11:41:13,484 - Get request for clustered data served successfully
DEBUG vaishnavi 2020-07-10 11:41:13,500 - Applying PCA
INFO werkzeug 2020-07-10 11:41:13,513 - 127.0.0.1 - - [10/Jul/2020 11:41:13] "[37mGET /clustering/agglomerative?uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG sita 2020-07-10 11:41:13,516 - Applying Agglomerative algorithm
DEBUG sita 2020-07-10 11:41:13,542 - Sorting clusters
DEBUG sita 2020-07-10 11:41:13,548 - Converting to JSON format
DEBUG sita 2020-07-10 11:41:13,552 - Exporting clustering results
INFO admin1 2020-07-10 11:41:13,553 - Requested to get clustering summary.
DEBUG admin1 2020-07-10 11:41:13,554 - Reading datafile for clustering summary
DEBUG sita 2020-07-10 11:41:13,555 - Writting summary
INFO admin1 2020-07-10 11:41:13,558 - Get request for clustering summary served successfully
DEBUG vaishnavi 2020-07-10 11:41:13,560 - Applying K-Means algorithm
INFO werkzeug 2020-07-10 11:41:13,568 - 127.0.0.1 - - [10/Jul/2020 11:41:13] "[37mGET /clustering/summary?uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG sita 2020-07-10 11:41:13,568 - Writting clustering information to datafile
DEBUG sita 2020-07-10 11:41:13,589 - Getting scatter plot for clustered data
INFO admin1 2020-07-10 11:41:13,659 - Requested to cluster documents.
DEBUG admin1 2020-07-10 11:41:13,660 - Reading datafile..
DEBUG vaishnavi 2020-07-10 11:41:13,688 - Sorting clusters
DEBUG vaishnavi 2020-07-10 11:41:13,701 - Converting to JSON format
DEBUG vaishnavi 2020-07-10 11:41:13,706 - Exporting clustering results
DEBUG vaishnavi 2020-07-10 11:41:13,709 - Writting summary
DEBUG vaishnavi 2020-07-10 11:41:13,722 - Writting clustering information to datafile
DEBUG vaishnavi 2020-07-10 11:41:13,728 - Getting scatter plot for clustered data
DEBUG admin1 2020-07-10 11:41:13,742 - Calculating tf-idf
INFO sita 2020-07-10 11:41:14,164 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:41:14,165 - 127.0.0.1 - - [10/Jul/2020 11:41:14] "[37mPOST /clustering/agglomerative?k=5&format=csv&uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG admin1 2020-07-10 11:41:14,176 - Calculating variance threshold
DEBUG admin1 2020-07-10 11:41:14,198 - Applying PCA
INFO sita 2020-07-10 11:41:14,636 - Requested to get clustering details.
DEBUG sita 2020-07-10 11:41:14,636 - Reading datafile for clustered data
DEBUG admin1 2020-07-10 11:41:14,651 - Applying Birch algorithm
INFO sita 2020-07-10 11:41:14,670 - Get request for clustered data served successfully
DEBUG admin1 2020-07-10 11:41:14,680 - Sorting clusters
DEBUG admin1 2020-07-10 11:41:14,686 - Converting to JSON format
DEBUG admin1 2020-07-10 11:41:14,689 - Exporting clustering results
INFO werkzeug 2020-07-10 11:41:14,693 - 127.0.0.1 - - [10/Jul/2020 11:41:14] "[37mGET /clustering/agglomerative?uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG admin1 2020-07-10 11:41:14,709 - Writting summary
DEBUG admin1 2020-07-10 11:41:14,714 - Writting clustering information to datafile
INFO sita 2020-07-10 11:41:14,740 - Requested to get clustering summary.
DEBUG sita 2020-07-10 11:41:14,740 - Reading datafile for clustering summary
INFO sita 2020-07-10 11:41:14,754 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:41:14,769 - 127.0.0.1 - - [10/Jul/2020 11:41:14] "[37mGET /clustering/summary?uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG admin1 2020-07-10 11:41:14,790 - Getting scatter plot for clustered data
INFO sita 2020-07-10 11:41:14,826 - Requested to cluster documents.
DEBUG sita 2020-07-10 11:41:14,827 - Reading datafile..
INFO vaishnavi 2020-07-10 11:41:14,898 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:41:14,899 - 127.0.0.1 - - [10/Jul/2020 11:41:14] "[37mPOST /clustering/kmeans?k=4&format=csv&uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG sita 2020-07-10 11:41:14,902 - Calculating tf-idf
INFO vaishnavi 2020-07-10 11:41:15,060 - Requested to get clustering details.
DEBUG vaishnavi 2020-07-10 11:41:15,064 - Reading datafile for clustered data
DEBUG sita 2020-07-10 11:41:15,125 - Calculating variance threshold
INFO vaishnavi 2020-07-10 11:41:15,153 - Get request for clustered data served successfully
INFO admin1 2020-07-10 11:41:15,201 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:41:15,205 - 127.0.0.1 - - [10/Jul/2020 11:41:15] "[37mPOST /clustering/birch?k=5&format=csv&uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG sita 2020-07-10 11:41:15,204 - Applying PCA
INFO werkzeug 2020-07-10 11:41:15,219 - 127.0.0.1 - - [10/Jul/2020 11:41:15] "[37mGET /clustering/kmeans?uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG sita 2020-07-10 11:41:15,236 - Applying Birch algorithm
DEBUG sita 2020-07-10 11:41:15,254 - Sorting clusters
DEBUG sita 2020-07-10 11:41:15,256 - Converting to JSON format
DEBUG sita 2020-07-10 11:41:15,258 - Exporting clustering results
DEBUG sita 2020-07-10 11:41:15,260 - Writting summary
DEBUG sita 2020-07-10 11:41:15,261 - Writting clustering information to datafile
DEBUG sita 2020-07-10 11:41:15,263 - Getting scatter plot for clustered data
INFO admin1 2020-07-10 11:41:15,299 - Requested to get clustering details.
DEBUG admin1 2020-07-10 11:41:15,306 - Reading datafile for clustered data
INFO admin1 2020-07-10 11:41:15,315 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:41:15,324 - 127.0.0.1 - - [10/Jul/2020 11:41:15] "[37mGET /clustering/birch?uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO vaishnavi 2020-07-10 11:41:15,333 - Requested to get clustering summary.
DEBUG vaishnavi 2020-07-10 11:41:15,340 - Reading datafile for clustering summary
INFO admin1 2020-07-10 11:41:15,367 - Requested to get clustering summary.
DEBUG admin1 2020-07-10 11:41:15,368 - Reading datafile for clustering summary
INFO vaishnavi 2020-07-10 11:41:15,393 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:41:15,402 - 127.0.0.1 - - [10/Jul/2020 11:41:15] "[37mGET /clustering/summary?uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 11:41:15,406 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:41:15,434 - 127.0.0.1 - - [10/Jul/2020 11:41:15] "[37mGET /clustering/summary?uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO vaishnavi 2020-07-10 11:41:15,459 - Requested to cluster documents.
DEBUG vaishnavi 2020-07-10 11:41:15,520 - Reading datafile..
DEBUG vaishnavi 2020-07-10 11:41:15,523 - Calculating tf-idf
INFO sita 2020-07-10 11:41:15,521 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:41:15,531 - 127.0.0.1 - - [10/Jul/2020 11:41:15] "[37mPOST /clustering/birch?k=5&format=csv&uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG vaishnavi 2020-07-10 11:41:15,620 - Calculating variance threshold
INFO sita 2020-07-10 11:41:15,620 - Requested to get clustering details.
DEBUG sita 2020-07-10 11:41:15,631 - Reading datafile for clustered data
DEBUG vaishnavi 2020-07-10 11:41:15,636 - Applying PCA
INFO sita 2020-07-10 11:41:15,648 - Get request for clustered data served successfully
DEBUG vaishnavi 2020-07-10 11:41:15,663 - Applying DBSCAN algorithm
INFO werkzeug 2020-07-10 11:41:15,664 - 127.0.0.1 - - [10/Jul/2020 11:41:15] "[37mGET /clustering/birch?uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG vaishnavi 2020-07-10 11:41:15,681 - Sorting clusters
DEBUG vaishnavi 2020-07-10 11:41:15,683 - Converting to JSON format
DEBUG vaishnavi 2020-07-10 11:41:15,685 - Exporting clustering results
DEBUG vaishnavi 2020-07-10 11:41:15,688 - Writting summary
DEBUG vaishnavi 2020-07-10 11:41:15,690 - Writting clustering information to datafile
DEBUG vaishnavi 2020-07-10 11:41:15,692 - Getting scatter plot for clustered data
INFO sita 2020-07-10 11:41:15,746 - Requested to get clustering summary.
DEBUG sita 2020-07-10 11:41:15,757 - Reading datafile for clustering summary
INFO sita 2020-07-10 11:41:15,811 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:41:15,813 - 127.0.0.1 - - [10/Jul/2020 11:41:15] "[37mGET /clustering/summary?uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO vaishnavi 2020-07-10 11:41:15,933 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:41:15,934 - 127.0.0.1 - - [10/Jul/2020 11:41:15] "[37mPOST /clustering/dbscan?eps=0.3&min=1&format=csv&uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO vaishnavi 2020-07-10 11:41:16,005 - Requested to get clustering details.
DEBUG vaishnavi 2020-07-10 11:41:16,005 - Reading datafile for clustered data
INFO vaishnavi 2020-07-10 11:41:16,007 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:41:16,011 - 127.0.0.1 - - [10/Jul/2020 11:41:16] "[37mGET /clustering/dbscan?uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO vaishnavi 2020-07-10 11:41:16,083 - Requested to get clustering summary.
DEBUG vaishnavi 2020-07-10 11:41:16,083 - Reading datafile for clustering summary
INFO vaishnavi 2020-07-10 11:41:16,084 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:41:16,086 - 127.0.0.1 - - [10/Jul/2020 11:41:16] "[37mGET /clustering/summary?uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO vaishnavi 2020-07-10 11:41:16,103 - Requested to cluster documents.
DEBUG vaishnavi 2020-07-10 11:41:16,103 - Reading datafile..
DEBUG vaishnavi 2020-07-10 11:41:16,105 - Calculating tf-idf
DEBUG vaishnavi 2020-07-10 11:41:16,176 - Calculating variance threshold
DEBUG vaishnavi 2020-07-10 11:41:16,191 - Applying PCA
DEBUG vaishnavi 2020-07-10 11:41:16,218 - Applying Agglomerative algorithm
DEBUG vaishnavi 2020-07-10 11:41:16,231 - Sorting clusters
DEBUG vaishnavi 2020-07-10 11:41:16,232 - Converting to JSON format
DEBUG vaishnavi 2020-07-10 11:41:16,234 - Exporting clustering results
DEBUG vaishnavi 2020-07-10 11:41:16,237 - Writting summary
DEBUG vaishnavi 2020-07-10 11:41:16,239 - Writting clustering information to datafile
DEBUG vaishnavi 2020-07-10 11:41:16,242 - Getting scatter plot for clustered data
INFO vaishnavi 2020-07-10 11:41:16,421 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:41:16,422 - 127.0.0.1 - - [10/Jul/2020 11:41:16] "[37mPOST /clustering/agglomerative?k=5&format=csv&uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO vaishnavi 2020-07-10 11:41:16,479 - Requested to get clustering details.
DEBUG vaishnavi 2020-07-10 11:41:16,479 - Reading datafile for clustered data
INFO vaishnavi 2020-07-10 11:41:16,480 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:41:16,483 - 127.0.0.1 - - [10/Jul/2020 11:41:16] "[37mGET /clustering/agglomerative?uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO vaishnavi 2020-07-10 11:41:16,496 - Requested to get clustering summary.
DEBUG vaishnavi 2020-07-10 11:41:16,497 - Reading datafile for clustering summary
INFO vaishnavi 2020-07-10 11:41:16,498 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:41:16,500 - 127.0.0.1 - - [10/Jul/2020 11:41:16] "[37mGET /clustering/summary?uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO vaishnavi 2020-07-10 11:41:16,512 - Requested to cluster documents.
DEBUG vaishnavi 2020-07-10 11:41:16,512 - Reading datafile..
DEBUG vaishnavi 2020-07-10 11:41:16,514 - Calculating tf-idf
DEBUG vaishnavi 2020-07-10 11:41:16,591 - Calculating variance threshold
DEBUG vaishnavi 2020-07-10 11:41:16,603 - Applying PCA
DEBUG vaishnavi 2020-07-10 11:41:16,630 - Applying Birch algorithm
DEBUG vaishnavi 2020-07-10 11:41:16,648 - Sorting clusters
DEBUG vaishnavi 2020-07-10 11:41:16,650 - Converting to JSON format
DEBUG vaishnavi 2020-07-10 11:41:16,652 - Exporting clustering results
DEBUG vaishnavi 2020-07-10 11:41:16,654 - Writting summary
DEBUG vaishnavi 2020-07-10 11:41:16,656 - Writting clustering information to datafile
DEBUG vaishnavi 2020-07-10 11:41:16,662 - Getting scatter plot for clustered data
INFO vaishnavi 2020-07-10 11:41:16,884 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:41:16,885 - 127.0.0.1 - - [10/Jul/2020 11:41:16] "[37mPOST /clustering/birch?k=5&format=csv&uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO vaishnavi 2020-07-10 11:41:16,940 - Requested to get clustering details.
DEBUG vaishnavi 2020-07-10 11:41:16,940 - Reading datafile for clustered data
INFO vaishnavi 2020-07-10 11:41:16,941 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:41:16,945 - 127.0.0.1 - - [10/Jul/2020 11:41:16] "[37mGET /clustering/birch?uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO vaishnavi 2020-07-10 11:41:16,977 - Requested to get clustering summary.
DEBUG vaishnavi 2020-07-10 11:41:16,977 - Reading datafile for clustering summary
INFO vaishnavi 2020-07-10 11:41:16,979 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:41:16,982 - 127.0.0.1 - - [10/Jul/2020 11:41:16] "[37mGET /clustering/summary?uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO werkzeug 2020-07-10 11:43:29,748 -  * Detected change in 'C:\\Users\\Personnal\\Documents\\FinIQ\\NLP_Project\\Another\\API\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-10 11:43:30,614 -  * Restarting with stat
WARNING werkzeug 2020-07-10 11:43:35,490 -  * Debugger is active!
INFO werkzeug 2020-07-10 11:43:35,505 -  * Debugger PIN: 240-565-176
INFO werkzeug 2020-07-10 11:43:35,529 -  * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
INFO vaishnavi 2020-07-10 11:43:58,174 - Requested to extract data.
DEBUG vaishnavi 2020-07-10 11:43:58,179 - Extracted links and ISINs from JSON object.
INFO vaishnavi 2020-07-10 11:43:58,827 - Made entry for extracted data in datafile successfully.
INFO werkzeug 2020-07-10 11:43:58,828 - 127.0.0.1 - - [10/Jul/2020 11:43:58] "[37mPOST /extract?filepath=ISINS_v3.xlsx&no_of_docs=15&uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO vaishnavi 2020-07-10 11:43:58,868 - Requested to export extracted data.
INFO vaishnavi 2020-07-10 11:43:59,021 - Exported successfully
INFO werkzeug 2020-07-10 11:43:59,022 - 127.0.0.1 - - [10/Jul/2020 11:43:59] "[37mPOST /extract/export?filepath=extract.xlsx&uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO vaishnavi 2020-07-10 11:43:59,082 - Requested to pre-process data.
DEBUG vaishnavi 2020-07-10 11:43:59,083 - Pre-processed data
DEBUG vaishnavi 2020-07-10 11:43:59,085 - Made entry of pre-processed data in datafile successfully
INFO werkzeug 2020-07-10 11:43:59,086 - 127.0.0.1 - - [10/Jul/2020 11:43:59] "[37mPOST /preprocess?steps=url&steps=stemming&steps=lemmatization&steps=stopwords&steps=unusual&uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO vaishnavi 2020-07-10 11:43:59,108 - Requested to export pre-processed data.
DEBUG vaishnavi 2020-07-10 11:43:59,109 - Reading pre-processed datafile.
DEBUG vaishnavi 2020-07-10 11:43:59,111 - Exporting pre-processed data to excel file.
INFO vaishnavi 2020-07-10 11:43:59,186 - Exported pre-processed data successfully.
INFO werkzeug 2020-07-10 11:43:59,187 - 127.0.0.1 - - [10/Jul/2020 11:43:59] "[37mPOST /preprocess/export?filepath=prep.xlsx&uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO vaishnavi 2020-07-10 11:43:59,204 - Requested to cluster documents.
DEBUG vaishnavi 2020-07-10 11:43:59,204 - Reading datafile..
DEBUG vaishnavi 2020-07-10 11:43:59,206 - Calculating tf-idf
ERROR vaishnavi 2020-07-10 11:43:59,206 - Exception occurred: ValueError('empty vocabulary; perhaps the documents only contain stop words')
Traceback (most recent call last):
  File "C:\Users\Personnal\Documents\FinIQ\NLP_Project\Another\API\pre-processing-and-API\api.py", line 506, in post
    df = cf.tfidf(text)
  File "C:\Users\Personnal\Documents\FinIQ\NLP_Project\Another\API\pre-processing-and-API\clean_file.py", line 167, in tfidf
    vectors = vectorizer.fit_transform(text)
  File "C:\Users\Personnal\AppData\Local\Programs\Python\Python38\lib\site-packages\sklearn\feature_extraction\text.py", line 1840, in fit_transform
    X = super().fit_transform(raw_documents)
  File "C:\Users\Personnal\AppData\Local\Programs\Python\Python38\lib\site-packages\sklearn\feature_extraction\text.py", line 1198, in fit_transform
    vocabulary, X = self._count_vocab(raw_documents,
  File "C:\Users\Personnal\AppData\Local\Programs\Python\Python38\lib\site-packages\sklearn\feature_extraction\text.py", line 1129, in _count_vocab
    raise ValueError("empty vocabulary; perhaps the documents only"
ValueError: empty vocabulary; perhaps the documents only contain stop words
INFO werkzeug 2020-07-10 11:43:59,211 - 127.0.0.1 - - [10/Jul/2020 11:43:59] "[31m[1mPOST /clustering/kmeans?k=4&format=csv&uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 400 -
INFO ram 2020-07-10 11:44:00,317 - Requested to extract data.
DEBUG ram 2020-07-10 11:44:00,317 - Extracted links and ISINs from JSON object.
INFO ram 2020-07-10 11:44:00,695 - Made entry for extracted data in datafile successfully.
INFO werkzeug 2020-07-10 11:44:00,696 - 127.0.0.1 - - [10/Jul/2020 11:44:00] "[37mPOST /extract?filepath=ISINS_v3.xlsx&no_of_docs=9&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:44:00,728 - Requested to export extracted data.
INFO ram 2020-07-10 11:44:00,806 - Exported successfully
INFO werkzeug 2020-07-10 11:44:00,807 - 127.0.0.1 - - [10/Jul/2020 11:44:00] "[37mPOST /extract/export?filepath=extract.xlsx&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:44:00,831 - Requested to pre-process data.
DEBUG ram 2020-07-10 11:44:00,833 - Pre-processed data
DEBUG ram 2020-07-10 11:44:00,835 - Made entry of pre-processed data in datafile successfully
INFO werkzeug 2020-07-10 11:44:00,836 - 127.0.0.1 - - [10/Jul/2020 11:44:00] "[37mPOST /preprocess?steps=url&steps=stemming&steps=lemmatization&steps=stopwords&steps=unusual&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:44:00,861 - Requested to export pre-processed data.
DEBUG ram 2020-07-10 11:44:00,862 - Reading pre-processed datafile.
DEBUG ram 2020-07-10 11:44:00,863 - Exporting pre-processed data to excel file.
INFO ram 2020-07-10 11:44:00,933 - Exported pre-processed data successfully.
INFO werkzeug 2020-07-10 11:44:00,934 - 127.0.0.1 - - [10/Jul/2020 11:44:00] "[37mPOST /preprocess/export?filepath=prep.xlsx&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:44:00,966 - Requested to cluster documents.
DEBUG ram 2020-07-10 11:44:00,967 - Reading datafile..
DEBUG ram 2020-07-10 11:44:00,969 - Calculating tf-idf
ERROR ram 2020-07-10 11:44:00,970 - Exception occurred: ValueError('empty vocabulary; perhaps the documents only contain stop words')
Traceback (most recent call last):
  File "C:\Users\Personnal\Documents\FinIQ\NLP_Project\Another\API\pre-processing-and-API\api.py", line 506, in post
    df = cf.tfidf(text)
  File "C:\Users\Personnal\Documents\FinIQ\NLP_Project\Another\API\pre-processing-and-API\clean_file.py", line 167, in tfidf
    vectors = vectorizer.fit_transform(text)
  File "C:\Users\Personnal\AppData\Local\Programs\Python\Python38\lib\site-packages\sklearn\feature_extraction\text.py", line 1840, in fit_transform
    X = super().fit_transform(raw_documents)
  File "C:\Users\Personnal\AppData\Local\Programs\Python\Python38\lib\site-packages\sklearn\feature_extraction\text.py", line 1198, in fit_transform
    vocabulary, X = self._count_vocab(raw_documents,
  File "C:\Users\Personnal\AppData\Local\Programs\Python\Python38\lib\site-packages\sklearn\feature_extraction\text.py", line 1129, in _count_vocab
    raise ValueError("empty vocabulary; perhaps the documents only"
ValueError: empty vocabulary; perhaps the documents only contain stop words
INFO werkzeug 2020-07-10 11:44:00,971 - 127.0.0.1 - - [10/Jul/2020 11:44:00] "[31m[1mPOST /clustering/kmeans?k=4&format=csv&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 400 -
INFO admin1 2020-07-10 11:44:01,991 - Requested to extract data.
DEBUG admin1 2020-07-10 11:44:01,991 - Extracted links and ISINs from JSON object.
INFO admin1 2020-07-10 11:44:02,493 - Made entry for extracted data in datafile successfully.
INFO werkzeug 2020-07-10 11:44:02,495 - 127.0.0.1 - - [10/Jul/2020 11:44:02] "[37mPOST /extract?filepath=ISINS_v3.xlsx&no_of_docs=15&uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 11:44:02,507 - Requested to export extracted data.
INFO admin1 2020-07-10 11:44:02,578 - Exported successfully
INFO werkzeug 2020-07-10 11:44:02,579 - 127.0.0.1 - - [10/Jul/2020 11:44:02] "[37mPOST /extract/export?filepath=extract.xlsx&uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 11:44:02,592 - Requested to pre-process data.
DEBUG admin1 2020-07-10 11:44:02,594 - Pre-processed data
DEBUG admin1 2020-07-10 11:44:02,596 - Made entry of pre-processed data in datafile successfully
INFO werkzeug 2020-07-10 11:44:02,597 - 127.0.0.1 - - [10/Jul/2020 11:44:02] "[37mPOST /preprocess?steps=url&steps=stemming&steps=lemmatization&steps=stopwords&steps=unusual&uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 11:44:02,608 - Requested to export pre-processed data.
DEBUG admin1 2020-07-10 11:44:02,609 - Reading pre-processed datafile.
DEBUG admin1 2020-07-10 11:44:02,610 - Exporting pre-processed data to excel file.
INFO admin1 2020-07-10 11:44:02,695 - Exported pre-processed data successfully.
INFO werkzeug 2020-07-10 11:44:02,696 - 127.0.0.1 - - [10/Jul/2020 11:44:02] "[37mPOST /preprocess/export?filepath=prep.xlsx&uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 11:44:02,710 - Requested to cluster documents.
DEBUG admin1 2020-07-10 11:44:02,710 - Reading datafile..
DEBUG admin1 2020-07-10 11:44:02,712 - Calculating tf-idf
ERROR admin1 2020-07-10 11:44:02,713 - Exception occurred: ValueError('empty vocabulary; perhaps the documents only contain stop words')
Traceback (most recent call last):
  File "C:\Users\Personnal\Documents\FinIQ\NLP_Project\Another\API\pre-processing-and-API\api.py", line 506, in post
    df = cf.tfidf(text)
  File "C:\Users\Personnal\Documents\FinIQ\NLP_Project\Another\API\pre-processing-and-API\clean_file.py", line 167, in tfidf
    vectors = vectorizer.fit_transform(text)
  File "C:\Users\Personnal\AppData\Local\Programs\Python\Python38\lib\site-packages\sklearn\feature_extraction\text.py", line 1840, in fit_transform
    X = super().fit_transform(raw_documents)
  File "C:\Users\Personnal\AppData\Local\Programs\Python\Python38\lib\site-packages\sklearn\feature_extraction\text.py", line 1198, in fit_transform
    vocabulary, X = self._count_vocab(raw_documents,
  File "C:\Users\Personnal\AppData\Local\Programs\Python\Python38\lib\site-packages\sklearn\feature_extraction\text.py", line 1129, in _count_vocab
    raise ValueError("empty vocabulary; perhaps the documents only"
ValueError: empty vocabulary; perhaps the documents only contain stop words
INFO werkzeug 2020-07-10 11:44:02,715 - 127.0.0.1 - - [10/Jul/2020 11:44:02] "[31m[1mPOST /clustering/kmeans?k=4&format=csv&uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 400 -
INFO sita 2020-07-10 11:44:03,143 - Requested to extract data.
DEBUG sita 2020-07-10 11:44:03,144 - Extracted links and ISINs from JSON object.
INFO sita 2020-07-10 11:44:12,389 - Made entry for extracted data in datafile successfully.
INFO werkzeug 2020-07-10 11:44:12,391 - 127.0.0.1 - - [10/Jul/2020 11:44:12] "[37mPOST /extract?filepath=ISINS_v3.xlsx&no_of_docs=15&uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:44:12,403 - Requested to export extracted data.
INFO sita 2020-07-10 11:44:12,581 - Exported successfully
INFO werkzeug 2020-07-10 11:44:12,582 - 127.0.0.1 - - [10/Jul/2020 11:44:12] "[37mPOST /extract/export?filepath=extract.xlsx&uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:44:12,592 - Requested to pre-process data.
DEBUG sita 2020-07-10 11:44:31,025 - Pre-processed data
DEBUG sita 2020-07-10 11:44:31,027 - Made entry of pre-processed data in datafile successfully
INFO werkzeug 2020-07-10 11:44:31,029 - 127.0.0.1 - - [10/Jul/2020 11:44:31] "[37mPOST /preprocess?steps=url&steps=stemming&steps=lemmatization&steps=stopwords&steps=unusual&uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:44:31,040 - Requested to export pre-processed data.
DEBUG sita 2020-07-10 11:44:31,040 - Reading pre-processed datafile.
DEBUG sita 2020-07-10 11:44:31,056 - Exporting pre-processed data to excel file.
INFO sita 2020-07-10 11:44:31,193 - Exported pre-processed data successfully.
INFO werkzeug 2020-07-10 11:44:31,195 - 127.0.0.1 - - [10/Jul/2020 11:44:31] "[37mPOST /preprocess/export?filepath=prep.xlsx&uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:44:31,205 - Requested to cluster documents.
DEBUG sita 2020-07-10 11:44:31,206 - Reading datafile..
DEBUG sita 2020-07-10 11:44:31,208 - Calculating tf-idf
DEBUG sita 2020-07-10 11:44:31,259 - Calculating variance threshold
DEBUG sita 2020-07-10 11:44:31,272 - Applying PCA
DEBUG sita 2020-07-10 11:44:31,295 - Applying K-Means algorithm
DEBUG sita 2020-07-10 11:44:31,354 - Sorting clusters
DEBUG sita 2020-07-10 11:44:31,355 - Converting to JSON format
DEBUG sita 2020-07-10 11:44:31,467 - Exporting clustering results
DEBUG sita 2020-07-10 11:44:31,469 - Writting summary
DEBUG sita 2020-07-10 11:44:31,470 - Writting clustering information to datafile
DEBUG sita 2020-07-10 11:44:31,472 - Getting scatter plot for clustered data
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,556 - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,557 - findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,557 - findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,557 - findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,557 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,558 - findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,558 - findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,558 - findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,558 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,559 - findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,559 - findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,559 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,559 - findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,559 - findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,560 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,560 - findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,560 - findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,560 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,561 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,561 - findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,561 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,561 - findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,561 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,562 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,562 - findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,562 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,562 - findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,563 - findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,563 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,563 - findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,563 - findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,563 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,564 - findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,564 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,564 - findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,564 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,565 - findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,565 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,565 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,566 - findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal demi normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,566 - findfont: score(<Font 'Sanskrit Text' (Sanskr.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,566 - findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal black normal>) = 11.525
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,567 - findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,567 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,567 - findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,567 - findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,567 - findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,568 - findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,568 - findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,568 - findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,568 - findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,569 - findfont: score(<Font 'Utsaah' (utsaahb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,569 - findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,569 - findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,569 - findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,569 - findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,570 - findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,570 - findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,570 - findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,570 - findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,571 - findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,571 - findfont: score(<Font 'Corbel' (corbell.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,571 - findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,571 - findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,571 - findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,572 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,572 - findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,572 - findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,572 - findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,573 - findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,573 - findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,573 - findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,573 - findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,573 - findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,574 - findfont: score(<Font 'Candara' (Candarali.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,574 - findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal demi normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,574 - findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,574 - findfont: score(<Font 'Arial' (ariblk.ttf) normal normal black normal>) = 6.888636363636364
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,575 - findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,575 - findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,575 - findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,575 - findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,575 - findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,576 - findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,576 - findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,576 - findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,576 - findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,577 - findfont: score(<Font 'SketchFlow Print' (SketchFlow Print.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,577 - findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,577 - findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,577 - findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,577 - findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,578 - findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,578 - findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,578 - findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,578 - findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,578 - findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal roman normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,579 - findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal roman normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,579 - findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,579 - findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,579 - findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,579 - findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,580 - findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,580 - findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,580 - findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,580 - findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,581 - findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,581 - findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,581 - findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,581 - findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,582 - findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,582 - findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,582 - findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,582 - findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,582 - findfont: score(<Font 'Times New Roman' (times.ttf) normal normal roman normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,583 - findfont: score(<Font 'Utsaah' (utsaahb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,583 - findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,583 - findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,583 - findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal semibold normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,583 - findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,584 - findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,584 - findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,584 - findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,584 - findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,585 - findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,585 - findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,585 - findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,585 - findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,585 - findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,586 - findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,586 - findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal roman normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,586 - findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,587 - findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,587 - findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,587 - findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,587 - findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal bold condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,588 - findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,588 - findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,588 - findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,588 - findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,588 - findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,588 - findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,589 - findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,589 - findfont: score(<Font 'Utsaah' (utsaahi.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,589 - findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,589 - findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,589 - findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,590 - findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,590 - findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,590 - findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,590 - findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,590 - findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,591 - findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,591 - findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal medium condensed>) = 10.344999999999999
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,591 - findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,591 - findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,591 - findfont: score(<Font 'Aparajita' (aparajbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,592 - findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,592 - findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,592 - findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,592 - findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,592 - findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,593 - findfont: score(<Font 'Arial Unicode MS' (ARIALUNI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,593 - findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,593 - findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,593 - findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,594 - findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,594 - findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,594 - findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,594 - findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,595 - findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,595 - findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,595 - findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,595 - findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,595 - findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,596 - findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,596 - findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,596 - findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,596 - findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,597 - findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,597 - findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,597 - findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,597 - findfont: score(<Font 'Utsaah' (utsaah.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,598 - findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,598 - findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,598 - findfont: score(<Font 'SketchFlow Print' (SketchFlow Print.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,598 - findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,599 - findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,599 - findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,599 - findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,599 - findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,599 - findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,600 - findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,600 - findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,600 - findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,600 - findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,600 - findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,601 - findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,601 - findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,601 - findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,601 - findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,601 - findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,602 - findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,602 - findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,602 - findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal demi normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,602 - findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,602 - findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,603 - findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,603 - findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal heavy normal>) = 10.43
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,603 - findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,603 - findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,603 - findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,604 - findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,604 - findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,604 - findfont: score(<Font 'MT Extra' (mtextra.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,604 - findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,604 - findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,605 - findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,605 - findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,605 - findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,605 - findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,606 - findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,606 - findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,606 - findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,606 - findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,606 - findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,607 - findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal demi condensed>) = 10.44
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,607 - findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,607 - findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,607 - findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,608 - findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,608 - findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,608 - findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal black normal>) = 11.525
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,608 - findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,608 - findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,609 - findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,609 - findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,609 - findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,609 - findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,609 - findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,610 - findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,610 - findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal medium condensed>) = 10.344999999999999
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,610 - findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,610 - findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,611 - findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,611 - findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,611 - findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,611 - findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,612 - findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,612 - findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,612 - findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,612 - findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,612 - findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,613 - findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal bold condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,613 - findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,613 - findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,613 - findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,613 - findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,614 - findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,614 - findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,614 - findfont: score(<Font 'Segoe Marker' (SegoeMarker.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,614 - findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,615 - findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,615 - findfont: score(<Font 'Source Code Pro' (SourceCodePro-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,615 - findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,615 - findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal heavy normal>) = 11.43
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,616 - findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,616 - findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,616 - findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,616 - findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,617 - findfont: score(<Font 'Buxton Sketch' (BuxtonSketch.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,617 - findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,617 - findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,617 - findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,617 - findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,618 - findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,618 - findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,618 - findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,618 - findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,619 - findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,619 - findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal semibold normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,619 - findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,619 - findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,619 - findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,620 - findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal heavy normal>) = 11.43
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,620 - findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,620 - findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,620 - findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,621 - findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,621 - findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,621 - findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,621 - findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,621 - findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,622 - findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,622 - findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,622 - findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal medium normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,622 - findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,622 - findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,623 - findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,623 - findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,623 - findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,623 - findfont: score(<Font 'Aparajita' (aparaji.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,624 - findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,624 - findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,624 - findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,624 - findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,624 - findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,625 - findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal demi normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,625 - findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,625 - findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,625 - findfont: score(<Font 'Shivaji01' (Shivaji01.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,626 - findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,626 - findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,626 - findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,626 - findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,626 - findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,627 - findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,627 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,627 - findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,627 - findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,627 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,627 - findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,628 - findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,628 - findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,628 - findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,628 - findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,629 - findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,629 - findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,629 - findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,629 - findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,629 - findfont: score(<Font 'Aparajita' (aparajb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,630 - findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,630 - findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,630 - findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,630 - findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,630 - findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,631 - findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,631 - findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,631 - findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal bold condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,631 - findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,631 - findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,632 - findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,632 - findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,632 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,632 - findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,632 - findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,633 - findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,633 - findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,633 - findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal medium normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,633 - findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,633 - findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,634 - findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,634 - findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,634 - findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,634 - findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,635 - findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,635 - findfont: score(<Font 'Kokila' (kokilab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,635 - findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,635 - findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,635 - findfont: score(<Font 'Mangal' (mangal.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,636 - findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,636 - findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,636 - findfont: score(<Font 'Calibri' (calibril.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,636 - findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,637 - findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,637 - findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,637 - findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,637 - findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,637 - findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,637 - findfont: score(<Font 'Aparajita' (aparajb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,638 - findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,638 - findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,638 - findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,638 - findfont: score(<Font 'Utsaah' (utsaahi.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,639 - findfont: score(<Font 'Buxton Sketch' (BuxtonSketch.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,639 - findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,639 - findfont: score(<Font 'Aparajita' (aparaj.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,639 - findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,639 - findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,640 - findfont: score(<Font 'Kokila' (kokilai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,640 - findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,640 - findfont: score(<Font 'Source Code Pro' (SourceCodePro-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,640 - findfont: score(<Font 'TeamViewer13' (teamviewer13.otf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,641 - findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,641 - findfont: score(<Font 'Kokila' (kokilab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,641 - findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,641 - findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,641 - findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,642 - findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,642 - findfont: score(<Font 'Segoe Marker' (SegoeMarker.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,642 - findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,642 - findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,642 - findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,643 - findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,643 - findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,643 - findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,643 - findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,644 - findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,644 - findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal bold condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,644 - findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,644 - findfont: score(<Font 'Candara' (Candaral.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,644 - findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,645 - findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,645 - findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,645 - findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal demi normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,645 - findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal semibold normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,645 - findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,646 - findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,646 - findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,646 - findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,646 - findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,647 - findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,647 - findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,647 - findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,647 - findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,647 - findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,648 - findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,648 - findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,648 - findfont: score(<Font 'Corbel' (corbell.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,648 - findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,649 - findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,649 - findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,649 - findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal black normal>) = 11.525
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,649 - findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,650 - findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,650 - findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,650 - findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,650 - findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,650 - findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,651 - findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,651 - findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,651 - findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,651 - findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,651 - findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,651 - findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,651 - findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,651 - findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,651 - findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal demi normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,652 - findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,652 - findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,652 - findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,652 - findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,654 - findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,654 - findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,654 - findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,654 - findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,654 - findfont: score(<Font 'Utsaah' (utsaah.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,654 - findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,654 - findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,654 - findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,654 - findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,655 - findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,655 - findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,655 - findfont: score(<Font 'Kokila' (kokila.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,655 - findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,656 - findfont: score(<Font 'Mangal' (mangalb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,656 - findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,656 - findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,656 - findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,656 - findfont: score(<Font 'MT Extra' (mtextra.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,657 - findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,657 - findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,657 - findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,657 - findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,657 - findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,658 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,658 - findfont: score(<Font 'Shivaji05' (Shivaji05.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,658 - findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,658 - findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,659 - findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,659 - findfont: score(<Font 'Mangal' (mangal.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,659 - findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,659 - findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,659 - findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,660 - findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,660 - findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,660 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,660 - findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,660 - findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,661 - findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,661 - findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,661 - findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal demi condensed>) = 10.44
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,661 - findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,662 - findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,662 - findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,662 - findfont: score(<Font 'Shivaji02' (Shivaji02.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,662 - findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,662 - findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,663 - findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,663 - findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,663 - findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,663 - findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,663 - findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,664 - findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,664 - findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,664 - findfont: score(<Font 'Aparajita' (aparaj.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,664 - findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,665 - findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,665 - findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,665 - findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,665 - findfont: score(<Font 'Utsaah' (utsaahbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,666 - findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,666 - findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,666 - findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,666 - findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,666 - findfont: score(<Font 'Aparajita' (aparaji.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,667 - findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,667 - findfont: score(<Font 'Candara' (Candarali.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,667 - findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,667 - findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,668 - findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,668 - findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,668 - findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,668 - findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,668 - findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,669 - findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,669 - findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,669 - findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,669 - findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,669 - findfont: score(<Font 'Kokila' (kokila.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,670 - findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,670 - findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,670 - findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,670 - findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,670 - findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,671 - findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,671 - findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,671 - findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,671 - findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,672 - findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,672 - findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,672 - findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,672 - findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,673 - findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,673 - findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,673 - findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,673 - findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,673 - findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,674 - findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,674 - findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,674 - findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,674 - findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,674 - findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,675 - findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,675 - findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,675 - findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,675 - findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,675 - findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,676 - findfont: score(<Font 'TeamViewer13' (teamviewer13.otf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,676 - findfont: score(<Font 'Mangal' (mangalb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,676 - findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,676 - findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,676 - findfont: score(<Font 'Calibri' (calibril.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,677 - findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,677 - findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal black normal>) = 11.525
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,677 - findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,677 - findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,678 - findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,678 - findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,678 - findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,678 - findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,678 - findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,679 - findfont: score(<Font 'Kokila' (kokilai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,679 - findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,679 - findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,679 - findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,679 - findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,680 - findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,680 - findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,680 - findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,681 - findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,681 - findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,681 - findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,681 - findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,682 - findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,682 - findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,682 - findfont: score(<Font 'Aparajita' (aparajbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,682 - findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,682 - findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,683 - findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,683 - findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,683 - findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,683 - findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,683 - findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,684 - findfont: score(<Font 'Shivaji02' (Shivaji02.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,684 - findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,684 - findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,684 - findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,685 - findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,685 - findfont: score(<Font 'Shivaji01' (Shivaji01.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,685 - findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,685 - findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,686 - findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,686 - findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,686 - findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,686 - findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,687 - findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,687 - findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,687 - findfont: score(<Font 'Kokila' (kokilabi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,687 - findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,687 - findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,688 - findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,688 - findfont: score(<Font 'Kokila' (kokilabi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,688 - findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,688 - findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,688 - findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,689 - findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,689 - findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,689 - findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,689 - findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,690 - findfont: score(<Font 'Arial Unicode MS' (ARIALUNI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,690 - findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,690 - findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,690 - findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,690 - findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,691 - findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,691 - findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,691 - findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,691 - findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,691 - findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,692 - findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,692 - findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal roman normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,692 - findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,692 - findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,692 - findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,693 - findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,693 - findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,693 - findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,693 - findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,694 - findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,694 - findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,694 - findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,694 - findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,694 - findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,695 - findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,695 - findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,695 - findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal bold condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,695 - findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,695 - findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,696 - findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,696 - findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal bold condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,696 - findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,696 - findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,696 - findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,696 - findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,697 - findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,697 - findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,697 - findfont: score(<Font 'Utsaah' (utsaahbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,697 - findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,698 - findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,698 - findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,698 - findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal semibold normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,698 - findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,698 - findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,699 - findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,699 - findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,699 - findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,699 - findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,700 - findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,700 - findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,700 - findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,700 - findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal heavy normal>) = 10.43
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,700 - findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,701 - findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,701 - findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,701 - findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,701 - findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,702 - findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,702 - findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,702 - findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,702 - findfont: score(<Font 'Candara' (Candaral.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,702 - findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,703 - findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,703 - findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,703 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,703 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,704 - findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,704 - findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,704 - findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,704 - findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,704 - findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,704 - findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,705 - findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,705 - findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,705 - findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,705 - findfont: score(<Font 'Shivaji05' (Shivaji05.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,706 - findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,706 - findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,706 - findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,706 - findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,706 - findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,707 - findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,707 - findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,707 - findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,707 - findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,707 - findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,708 - findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,708 - findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,708 - findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,708 - findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,709 - findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,709 - findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,709 - findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,709 - findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,709 - findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,710 - findfont: score(<Font 'Times New Roman' (times.ttf) normal normal roman normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,710 - findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,710 - findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,710 - findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,710 - findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,711 - findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,711 - findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,711 - findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,711 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,712 - findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,712 - findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,712 - findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,712 - findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,712 - findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,713 - findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,713 - findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,713 - findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,713 - findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,714 - findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,714 - findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,714 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,714 - findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,715 - findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,715 - findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,715 - findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,715 - findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,715 - findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,716 - findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,716 - findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,716 - findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,716 - findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,717 - findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,717 - findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,717 - findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,717 - findfont: score(<Font 'Sanskrit Text' (Sanskr.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,717 - findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,718 - findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,718 - findfont: score(<Font 'Arial' (ariblk.ttf) normal normal black normal>) = 6.888636363636364
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,718 - findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,718 - findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,719 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,719 - findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,719 - findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,719 - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('C:\\Users\\Personnal\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,750 - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,750 - findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,751 - findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,751 - findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,751 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,751 - findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,752 - findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,752 - findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,752 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,752 - findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,753 - findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,753 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,753 - findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,753 - findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,753 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,754 - findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,754 - findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,754 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,754 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,755 - findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,755 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,755 - findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,755 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,755 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,756 - findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,756 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,756 - findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,756 - findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,757 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,757 - findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,757 - findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,757 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,757 - findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,758 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,758 - findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,758 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,758 - findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,758 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,759 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,759 - findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal demi normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,759 - findfont: score(<Font 'Sanskrit Text' (Sanskr.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,759 - findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal black normal>) = 11.525
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,759 - findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,760 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,760 - findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,760 - findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,760 - findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,760 - findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,761 - findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,761 - findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,761 - findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,761 - findfont: score(<Font 'Utsaah' (utsaahb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,762 - findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,762 - findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,762 - findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,762 - findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,762 - findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,763 - findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,763 - findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,763 - findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,763 - findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,763 - findfont: score(<Font 'Corbel' (corbell.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,764 - findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,764 - findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,764 - findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,765 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,765 - findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,765 - findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,765 - findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,765 - findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,766 - findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,766 - findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,766 - findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,766 - findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,767 - findfont: score(<Font 'Candara' (Candarali.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,767 - findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal demi normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,767 - findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,767 - findfont: score(<Font 'Arial' (ariblk.ttf) normal normal black normal>) = 6.888636363636364
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,768 - findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,768 - findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,768 - findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,768 - findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,768 - findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,769 - findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,769 - findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,769 - findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,769 - findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,770 - findfont: score(<Font 'SketchFlow Print' (SketchFlow Print.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,770 - findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,770 - findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,770 - findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,770 - findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,771 - findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,771 - findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,771 - findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,771 - findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,771 - findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal roman normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,772 - findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal roman normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,772 - findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,772 - findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,772 - findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,773 - findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,773 - findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,773 - findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,773 - findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,773 - findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,774 - findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,774 - findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,774 - findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,774 - findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,775 - findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,775 - findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,775 - findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,775 - findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,775 - findfont: score(<Font 'Times New Roman' (times.ttf) normal normal roman normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,776 - findfont: score(<Font 'Utsaah' (utsaahb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,776 - findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,776 - findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,776 - findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal semibold normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,777 - findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,777 - findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,777 - findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,777 - findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,777 - findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,778 - findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,778 - findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,778 - findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,778 - findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,779 - findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,779 - findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,779 - findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal roman normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,779 - findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,779 - findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,780 - findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,780 - findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,780 - findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal bold condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,780 - findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,781 - findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,781 - findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,781 - findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,781 - findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,782 - findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,782 - findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,782 - findfont: score(<Font 'Utsaah' (utsaahi.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,782 - findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,782 - findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,783 - findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,783 - findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,783 - findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,783 - findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,784 - findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,784 - findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,784 - findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,784 - findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal medium condensed>) = 10.344999999999999
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,784 - findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,785 - findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,785 - findfont: score(<Font 'Aparajita' (aparajbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,785 - findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,785 - findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,785 - findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,786 - findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,786 - findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,786 - findfont: score(<Font 'Arial Unicode MS' (ARIALUNI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,786 - findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,786 - findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,787 - findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,787 - findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,787 - findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,787 - findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,788 - findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,788 - findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,788 - findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,788 - findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,788 - findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,788 - findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,789 - findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,789 - findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,789 - findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,789 - findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,790 - findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,790 - findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,790 - findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,790 - findfont: score(<Font 'Utsaah' (utsaah.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,791 - findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,791 - findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,791 - findfont: score(<Font 'SketchFlow Print' (SketchFlow Print.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,791 - findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,791 - findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,792 - findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,792 - findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,792 - findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,792 - findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,793 - findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,793 - findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,793 - findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,793 - findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,793 - findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,794 - findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,794 - findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,794 - findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,794 - findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,794 - findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,795 - findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,795 - findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,795 - findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal demi normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,795 - findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,796 - findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,796 - findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,796 - findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal heavy normal>) = 10.43
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,796 - findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,796 - findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,797 - findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,797 - findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,797 - findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,797 - findfont: score(<Font 'MT Extra' (mtextra.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,798 - findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,798 - findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,798 - findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,798 - findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,798 - findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,798 - findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,799 - findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,799 - findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,799 - findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,799 - findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,799 - findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,800 - findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal demi condensed>) = 10.44
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,800 - findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,800 - findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,800 - findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,801 - findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,801 - findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,801 - findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal black normal>) = 11.525
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,801 - findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,801 - findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,802 - findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,802 - findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,802 - findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,802 - findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,802 - findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,802 - findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,803 - findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal medium condensed>) = 10.344999999999999
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,803 - findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,803 - findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,803 - findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,803 - findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,804 - findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,804 - findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,804 - findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,804 - findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,805 - findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,805 - findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,805 - findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,805 - findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal bold condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,805 - findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,806 - findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,806 - findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,806 - findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,806 - findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,807 - findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,807 - findfont: score(<Font 'Segoe Marker' (SegoeMarker.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,807 - findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,807 - findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,807 - findfont: score(<Font 'Source Code Pro' (SourceCodePro-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,808 - findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,808 - findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal heavy normal>) = 11.43
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,808 - findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,808 - findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,809 - findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,809 - findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,809 - findfont: score(<Font 'Buxton Sketch' (BuxtonSketch.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,809 - findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,809 - findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,810 - findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,810 - findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,810 - findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,810 - findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,811 - findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,811 - findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,811 - findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,811 - findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal semibold normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,811 - findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,812 - findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,812 - findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,812 - findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal heavy normal>) = 11.43
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,812 - findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,812 - findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,813 - findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,813 - findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,813 - findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,813 - findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,813 - findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,814 - findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,814 - findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,814 - findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,814 - findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal medium normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,815 - findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,815 - findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,815 - findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,815 - findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,816 - findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,816 - findfont: score(<Font 'Aparajita' (aparaji.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,816 - findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,816 - findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,816 - findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,817 - findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,817 - findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,817 - findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal demi normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,817 - findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,818 - findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,818 - findfont: score(<Font 'Shivaji01' (Shivaji01.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,818 - findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,818 - findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,818 - findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,819 - findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,819 - findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,819 - findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,819 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,819 - findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,820 - findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,820 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,820 - findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,820 - findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,821 - findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,821 - findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,821 - findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,821 - findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,821 - findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,822 - findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,822 - findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,822 - findfont: score(<Font 'Aparajita' (aparajb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,822 - findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,822 - findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,823 - findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,823 - findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,823 - findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,823 - findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,823 - findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,824 - findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal bold condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,824 - findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,824 - findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,824 - findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,824 - findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,825 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,825 - findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,825 - findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,825 - findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,826 - findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,826 - findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal medium normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,826 - findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,826 - findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,826 - findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,827 - findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,827 - findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,827 - findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,827 - findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,828 - findfont: score(<Font 'Kokila' (kokilab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,828 - findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,828 - findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,828 - findfont: score(<Font 'Mangal' (mangal.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,828 - findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,829 - findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,829 - findfont: score(<Font 'Calibri' (calibril.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,829 - findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,829 - findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,829 - findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,830 - findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,830 - findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,830 - findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,830 - findfont: score(<Font 'Aparajita' (aparajb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,831 - findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,831 - findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,831 - findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,831 - findfont: score(<Font 'Utsaah' (utsaahi.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,831 - findfont: score(<Font 'Buxton Sketch' (BuxtonSketch.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,832 - findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,832 - findfont: score(<Font 'Aparajita' (aparaj.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,832 - findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,832 - findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,833 - findfont: score(<Font 'Kokila' (kokilai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,833 - findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,833 - findfont: score(<Font 'Source Code Pro' (SourceCodePro-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,833 - findfont: score(<Font 'TeamViewer13' (teamviewer13.otf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,833 - findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,834 - findfont: score(<Font 'Kokila' (kokilab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,834 - findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,834 - findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,834 - findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,834 - findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,835 - findfont: score(<Font 'Segoe Marker' (SegoeMarker.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,835 - findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,835 - findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,835 - findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,836 - findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,836 - findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,836 - findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,836 - findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,836 - findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,837 - findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal bold condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,837 - findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,837 - findfont: score(<Font 'Candara' (Candaral.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,837 - findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,837 - findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,838 - findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,838 - findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal demi normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,838 - findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal semibold normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,838 - findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,839 - findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,839 - findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,839 - findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,839 - findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,839 - findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,840 - findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,840 - findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,840 - findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,840 - findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,840 - findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,841 - findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,841 - findfont: score(<Font 'Corbel' (corbell.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,841 - findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,841 - findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,841 - findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,842 - findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal black normal>) = 11.525
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,842 - findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,842 - findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,842 - findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,843 - findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,843 - findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,843 - findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,843 - findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,843 - findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,844 - findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,844 - findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,844 - findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,844 - findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,844 - findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,845 - findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,845 - findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal demi normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,845 - findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,845 - findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,846 - findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,846 - findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,846 - findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,846 - findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,846 - findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,847 - findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,847 - findfont: score(<Font 'Utsaah' (utsaah.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,847 - findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,847 - findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,848 - findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,848 - findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,848 - findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,848 - findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,849 - findfont: score(<Font 'Kokila' (kokila.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,849 - findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,849 - findfont: score(<Font 'Mangal' (mangalb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,849 - findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,849 - findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,850 - findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,850 - findfont: score(<Font 'MT Extra' (mtextra.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,850 - findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,850 - findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,851 - findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,851 - findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,851 - findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,851 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,852 - findfont: score(<Font 'Shivaji05' (Shivaji05.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,852 - findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,852 - findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,852 - findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,853 - findfont: score(<Font 'Mangal' (mangal.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,853 - findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,853 - findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,853 - findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,854 - findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,854 - findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,854 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,854 - findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,854 - findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,855 - findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,855 - findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,855 - findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal demi condensed>) = 10.44
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,855 - findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,855 - findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,856 - findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,856 - findfont: score(<Font 'Shivaji02' (Shivaji02.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,856 - findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,856 - findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,856 - findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,857 - findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,857 - findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,857 - findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,857 - findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,858 - findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,858 - findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,858 - findfont: score(<Font 'Aparajita' (aparaj.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,858 - findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,858 - findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,859 - findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,859 - findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,859 - findfont: score(<Font 'Utsaah' (utsaahbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,859 - findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,860 - findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,860 - findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,860 - findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,860 - findfont: score(<Font 'Aparajita' (aparaji.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,860 - findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,861 - findfont: score(<Font 'Candara' (Candarali.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,861 - findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,861 - findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,861 - findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,861 - findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,862 - findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,862 - findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,862 - findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,862 - findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,863 - findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,863 - findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,863 - findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,863 - findfont: score(<Font 'Kokila' (kokila.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,863 - findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,864 - findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,864 - findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,864 - findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,864 - findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,865 - findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,865 - findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,865 - findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,865 - findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,865 - findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,866 - findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,866 - findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,866 - findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,866 - findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,866 - findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,867 - findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,867 - findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,867 - findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,867 - findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,867 - findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,867 - findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,868 - findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,868 - findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,868 - findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,868 - findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,869 - findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,869 - findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,869 - findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,869 - findfont: score(<Font 'TeamViewer13' (teamviewer13.otf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,869 - findfont: score(<Font 'Mangal' (mangalb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,870 - findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,870 - findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,870 - findfont: score(<Font 'Calibri' (calibril.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,870 - findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,870 - findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal black normal>) = 11.525
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,871 - findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,871 - findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,871 - findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,871 - findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,871 - findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,872 - findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,872 - findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,872 - findfont: score(<Font 'Kokila' (kokilai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,872 - findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,872 - findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,873 - findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,873 - findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,873 - findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,873 - findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,874 - findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,874 - findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,874 - findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,874 - findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,874 - findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,875 - findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,875 - findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,875 - findfont: score(<Font 'Aparajita' (aparajbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,875 - findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,876 - findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,876 - findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,876 - findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,876 - findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,877 - findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,877 - findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,877 - findfont: score(<Font 'Shivaji02' (Shivaji02.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,877 - findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,877 - findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,878 - findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,878 - findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,878 - findfont: score(<Font 'Shivaji01' (Shivaji01.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,878 - findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,878 - findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,879 - findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,879 - findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,879 - findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,879 - findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,880 - findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,880 - findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,880 - findfont: score(<Font 'Kokila' (kokilabi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,880 - findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,880 - findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,881 - findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,881 - findfont: score(<Font 'Kokila' (kokilabi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,881 - findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,881 - findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,882 - findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,882 - findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,882 - findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,882 - findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,883 - findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,883 - findfont: score(<Font 'Arial Unicode MS' (ARIALUNI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,883 - findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,883 - findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,883 - findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,884 - findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,884 - findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,884 - findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,884 - findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,884 - findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,885 - findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,885 - findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,885 - findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal roman normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,885 - findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,886 - findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,886 - findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,886 - findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,886 - findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,886 - findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,887 - findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,887 - findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,887 - findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,887 - findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,887 - findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,888 - findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,888 - findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,888 - findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,888 - findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal bold condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,889 - findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,889 - findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,889 - findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,889 - findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal bold condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,889 - findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,890 - findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,890 - findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,890 - findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,890 - findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,891 - findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,891 - findfont: score(<Font 'Utsaah' (utsaahbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,891 - findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,891 - findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,891 - findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,892 - findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal semibold normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,892 - findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,892 - findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,892 - findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,892 - findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,893 - findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,893 - findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,893 - findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,893 - findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,893 - findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,894 - findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal heavy normal>) = 10.43
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,894 - findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,894 - findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,894 - findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,894 - findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,895 - findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,895 - findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,895 - findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,895 - findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,896 - findfont: score(<Font 'Candara' (Candaral.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,896 - findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,896 - findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,896 - findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,896 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,897 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,897 - findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,897 - findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,897 - findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,897 - findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,898 - findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,898 - findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,898 - findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,898 - findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,899 - findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,899 - findfont: score(<Font 'Shivaji05' (Shivaji05.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,899 - findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,899 - findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,899 - findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,900 - findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,900 - findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,900 - findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,900 - findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,901 - findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,901 - findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,901 - findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,901 - findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,901 - findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,901 - findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,902 - findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,902 - findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,902 - findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,902 - findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,902 - findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,902 - findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,903 - findfont: score(<Font 'Times New Roman' (times.ttf) normal normal roman normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,903 - findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,903 - findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,903 - findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,904 - findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,904 - findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,904 - findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,904 - findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,904 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,905 - findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,905 - findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,905 - findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,905 - findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,905 - findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,906 - findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,906 - findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,906 - findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,906 - findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,906 - findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,907 - findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,907 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,907 - findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,907 - findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,907 - findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,908 - findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,908 - findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,908 - findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,908 - findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,908 - findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,909 - findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,909 - findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,909 - findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,909 - findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,909 - findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,910 - findfont: score(<Font 'Sanskrit Text' (Sanskr.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,910 - findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,910 - findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,910 - findfont: score(<Font 'Arial' (ariblk.ttf) normal normal black normal>) = 6.888636363636364
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,910 - findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,910 - findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,911 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,911 - findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,911 - findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 11:44:31,911 - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\Personnal\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
INFO sita 2020-07-10 11:44:31,990 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:44:31,991 - 127.0.0.1 - - [10/Jul/2020 11:44:31] "[37mPOST /clustering/kmeans?k=4&format=csv&uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:44:32,063 - Requested to get clustering details.
DEBUG sita 2020-07-10 11:44:32,063 - Reading datafile for clustered data
INFO sita 2020-07-10 11:44:32,064 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:44:32,068 - 127.0.0.1 - - [10/Jul/2020 11:44:32] "[37mGET /clustering/kmeans?uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:44:32,080 - Requested to get clustering summary.
DEBUG sita 2020-07-10 11:44:32,080 - Reading datafile for clustering summary
INFO sita 2020-07-10 11:44:32,081 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:44:32,083 - 127.0.0.1 - - [10/Jul/2020 11:44:32] "[37mGET /clustering/summary?uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:44:32,096 - Requested to cluster documents.
DEBUG sita 2020-07-10 11:44:32,096 - Reading datafile..
DEBUG sita 2020-07-10 11:44:32,098 - Calculating tf-idf
DEBUG sita 2020-07-10 11:44:32,161 - Calculating variance threshold
DEBUG sita 2020-07-10 11:44:32,175 - Applying PCA
DEBUG sita 2020-07-10 11:44:32,199 - Applying DBSCAN algorithm
DEBUG sita 2020-07-10 11:44:32,214 - Sorting clusters
DEBUG sita 2020-07-10 11:44:32,216 - Converting to JSON format
DEBUG sita 2020-07-10 11:44:32,218 - Exporting clustering results
DEBUG sita 2020-07-10 11:44:32,219 - Writting summary
DEBUG sita 2020-07-10 11:44:32,221 - Writting clustering information to datafile
DEBUG sita 2020-07-10 11:44:32,223 - Getting scatter plot for clustered data
INFO sita 2020-07-10 11:44:32,512 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:44:32,513 - 127.0.0.1 - - [10/Jul/2020 11:44:32] "[37mPOST /clustering/dbscan?eps=0.3&min=1&format=csv&uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:44:32,592 - Requested to get clustering details.
DEBUG sita 2020-07-10 11:44:32,593 - Reading datafile for clustered data
INFO sita 2020-07-10 11:44:32,595 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:44:32,611 - 127.0.0.1 - - [10/Jul/2020 11:44:32] "[37mGET /clustering/dbscan?uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:44:32,697 - Requested to get clustering summary.
DEBUG sita 2020-07-10 11:44:32,698 - Reading datafile for clustering summary
INFO sita 2020-07-10 11:44:32,700 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:44:32,703 - 127.0.0.1 - - [10/Jul/2020 11:44:32] "[37mGET /clustering/summary?uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:44:32,725 - Requested to cluster documents.
DEBUG sita 2020-07-10 11:44:32,725 - Reading datafile..
DEBUG sita 2020-07-10 11:44:32,727 - Calculating tf-idf
DEBUG sita 2020-07-10 11:44:32,823 - Calculating variance threshold
DEBUG sita 2020-07-10 11:44:32,839 - Applying PCA
DEBUG sita 2020-07-10 11:44:32,880 - Applying Agglomerative algorithm
DEBUG sita 2020-07-10 11:44:32,928 - Sorting clusters
DEBUG sita 2020-07-10 11:44:32,930 - Converting to JSON format
DEBUG sita 2020-07-10 11:44:32,933 - Exporting clustering results
DEBUG sita 2020-07-10 11:44:32,936 - Writting summary
DEBUG sita 2020-07-10 11:44:32,937 - Writting clustering information to datafile
DEBUG sita 2020-07-10 11:44:32,939 - Getting scatter plot for clustered data
INFO sita 2020-07-10 11:44:33,201 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:44:33,203 - 127.0.0.1 - - [10/Jul/2020 11:44:33] "[37mPOST /clustering/agglomerative?k=5&format=csv&uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:44:33,282 - Requested to get clustering details.
DEBUG sita 2020-07-10 11:44:33,282 - Reading datafile for clustered data
INFO sita 2020-07-10 11:44:33,283 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:44:33,298 - 127.0.0.1 - - [10/Jul/2020 11:44:33] "[37mGET /clustering/agglomerative?uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:44:33,345 - Requested to get clustering summary.
DEBUG sita 2020-07-10 11:44:33,346 - Reading datafile for clustering summary
INFO sita 2020-07-10 11:44:33,347 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:44:33,349 - 127.0.0.1 - - [10/Jul/2020 11:44:33] "[37mGET /clustering/summary?uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:44:33,375 - Requested to cluster documents.
DEBUG sita 2020-07-10 11:44:33,375 - Reading datafile..
DEBUG sita 2020-07-10 11:44:33,378 - Calculating tf-idf
DEBUG sita 2020-07-10 11:44:33,453 - Calculating variance threshold
DEBUG sita 2020-07-10 11:44:33,470 - Applying PCA
DEBUG sita 2020-07-10 11:44:33,502 - Applying Birch algorithm
DEBUG sita 2020-07-10 11:44:33,525 - Sorting clusters
DEBUG sita 2020-07-10 11:44:33,527 - Converting to JSON format
DEBUG sita 2020-07-10 11:44:33,530 - Exporting clustering results
DEBUG sita 2020-07-10 11:44:33,532 - Writting summary
DEBUG sita 2020-07-10 11:44:33,534 - Writting clustering information to datafile
DEBUG sita 2020-07-10 11:44:33,536 - Getting scatter plot for clustered data
INFO sita 2020-07-10 11:44:33,718 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:44:33,718 - 127.0.0.1 - - [10/Jul/2020 11:44:33] "[37mPOST /clustering/birch?k=5&format=csv&uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:44:33,763 - Requested to get clustering details.
DEBUG sita 2020-07-10 11:44:33,763 - Reading datafile for clustered data
INFO sita 2020-07-10 11:44:33,765 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:44:33,768 - 127.0.0.1 - - [10/Jul/2020 11:44:33] "[37mGET /clustering/birch?uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:44:33,780 - Requested to get clustering summary.
DEBUG sita 2020-07-10 11:44:33,780 - Reading datafile for clustering summary
INFO sita 2020-07-10 11:44:33,782 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:44:33,783 - 127.0.0.1 - - [10/Jul/2020 11:44:33] "[37mGET /clustering/summary?uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO vaishnavi 2020-07-10 11:45:50,186 - Requested to extract data.
DEBUG vaishnavi 2020-07-10 11:45:50,187 - Extracted links and ISINs from JSON object.
INFO ram 2020-07-10 11:45:52,663 - Requested to extract data.
DEBUG ram 2020-07-10 11:45:52,663 - Extracted links and ISINs from JSON object.
INFO admin1 2020-07-10 11:45:53,655 - Requested to extract data.
DEBUG admin1 2020-07-10 11:45:53,655 - Extracted links and ISINs from JSON object.
INFO sita 2020-07-10 11:45:54,789 - Requested to extract data.
DEBUG sita 2020-07-10 11:45:54,801 - Extracted links and ISINs from JSON object.
INFO ram 2020-07-10 11:46:01,007 - Made entry for extracted data in datafile successfully.
INFO werkzeug 2020-07-10 11:46:01,008 - 127.0.0.1 - - [10/Jul/2020 11:46:01] "[37mPOST /extract?filepath=ISINS_v3.xlsx&no_of_docs=9&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:46:01,020 - Requested to export extracted data.
INFO ram 2020-07-10 11:46:01,255 - Exported successfully
INFO werkzeug 2020-07-10 11:46:01,256 - 127.0.0.1 - - [10/Jul/2020 11:46:01] "[37mPOST /extract/export?filepath=extract.xlsx&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:46:01,268 - Requested to pre-process data.
INFO vaishnavi 2020-07-10 11:46:04,344 - Made entry for extracted data in datafile successfully.
INFO werkzeug 2020-07-10 11:46:04,389 - 127.0.0.1 - - [10/Jul/2020 11:46:04] "[37mPOST /extract?filepath=ISINS_v3.xlsx&no_of_docs=15&uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO vaishnavi 2020-07-10 11:46:04,578 - Requested to export extracted data.
INFO vaishnavi 2020-07-10 11:46:07,069 - Exported successfully
INFO werkzeug 2020-07-10 11:46:07,088 - 127.0.0.1 - - [10/Jul/2020 11:46:07] "[37mPOST /extract/export?filepath=extract.xlsx&uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO vaishnavi 2020-07-10 11:46:07,158 - Requested to pre-process data.
INFO admin1 2020-07-10 11:46:13,864 - Made entry for extracted data in datafile successfully.
INFO werkzeug 2020-07-10 11:46:13,870 - 127.0.0.1 - - [10/Jul/2020 11:46:13] "[37mPOST /extract?filepath=ISINS_v3.xlsx&no_of_docs=15&uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 11:46:14,085 - Requested to export extracted data.
DEBUG ram 2020-07-10 11:46:17,438 - Pre-processed data
DEBUG ram 2020-07-10 11:46:17,477 - Made entry of pre-processed data in datafile successfully
INFO werkzeug 2020-07-10 11:46:17,484 - 127.0.0.1 - - [10/Jul/2020 11:46:17] "[37mPOST /preprocess?steps=url&steps=stemming&steps=lemmatization&steps=stopwords&steps=unusual&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:46:17,668 - Requested to export pre-processed data.
DEBUG ram 2020-07-10 11:46:17,710 - Reading pre-processed datafile.
INFO sita 2020-07-10 11:46:17,831 - Made entry for extracted data in datafile successfully.
INFO werkzeug 2020-07-10 11:46:17,850 - 127.0.0.1 - - [10/Jul/2020 11:46:17] "[37mPOST /extract?filepath=ISINS_v3.xlsx&no_of_docs=15&uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:46:17,926 - Requested to export extracted data.
DEBUG ram 2020-07-10 11:46:17,954 - Exporting pre-processed data to excel file.
INFO admin1 2020-07-10 11:46:18,945 - Exported successfully
INFO werkzeug 2020-07-10 11:46:18,948 - 127.0.0.1 - - [10/Jul/2020 11:46:18] "[37mPOST /extract/export?filepath=extract.xlsx&uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 11:46:19,035 - Requested to pre-process data.
INFO ram 2020-07-10 11:46:19,186 - Exported pre-processed data successfully.
INFO werkzeug 2020-07-10 11:46:19,204 - 127.0.0.1 - - [10/Jul/2020 11:46:19] "[37mPOST /preprocess/export?filepath=prep.xlsx&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:46:19,347 - Requested to cluster documents.
DEBUG ram 2020-07-10 11:46:19,347 - Reading datafile..
DEBUG ram 2020-07-10 11:46:19,361 - Calculating tf-idf
DEBUG ram 2020-07-10 11:46:19,736 - Calculating variance threshold
DEBUG ram 2020-07-10 11:46:19,840 - Applying PCA
DEBUG ram 2020-07-10 11:46:20,034 - Applying K-Means algorithm
DEBUG ram 2020-07-10 11:46:20,669 - Sorting clusters
DEBUG ram 2020-07-10 11:46:20,691 - Converting to JSON format
DEBUG ram 2020-07-10 11:46:20,716 - Exporting clustering results
DEBUG ram 2020-07-10 11:46:20,763 - Writting summary
DEBUG ram 2020-07-10 11:46:20,964 - Writting clustering information to datafile
DEBUG ram 2020-07-10 11:46:21,036 - Getting scatter plot for clustered data
INFO sita 2020-07-10 11:46:21,597 - Exported successfully
INFO werkzeug 2020-07-10 11:46:21,616 - 127.0.0.1 - - [10/Jul/2020 11:46:21] "[37mPOST /extract/export?filepath=extract.xlsx&uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:46:21,736 - Requested to pre-process data.
INFO ram 2020-07-10 11:46:22,617 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:46:22,639 - 127.0.0.1 - - [10/Jul/2020 11:46:22] "[37mPOST /clustering/kmeans?k=4&format=csv&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:46:22,887 - Requested to get clustering details.
DEBUG ram 2020-07-10 11:46:22,955 - Reading datafile for clustered data
INFO ram 2020-07-10 11:46:23,821 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:46:23,955 - 127.0.0.1 - - [10/Jul/2020 11:46:23] "[37mGET /clustering/kmeans?uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:46:24,173 - Requested to get clustering summary.
DEBUG ram 2020-07-10 11:46:24,185 - Reading datafile for clustering summary
INFO ram 2020-07-10 11:46:25,201 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:46:25,414 - 127.0.0.1 - - [10/Jul/2020 11:46:25] "[37mGET /clustering/summary?uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:46:25,591 - Requested to cluster documents.
DEBUG ram 2020-07-10 11:46:25,591 - Reading datafile..
DEBUG ram 2020-07-10 11:46:26,426 - Calculating tf-idf
DEBUG ram 2020-07-10 11:46:26,672 - Calculating variance threshold
DEBUG ram 2020-07-10 11:46:26,786 - Applying PCA
DEBUG ram 2020-07-10 11:46:27,023 - Applying DBSCAN algorithm
DEBUG ram 2020-07-10 11:46:27,182 - Sorting clusters
DEBUG ram 2020-07-10 11:46:27,212 - Converting to JSON format
DEBUG ram 2020-07-10 11:46:27,268 - Exporting clustering results
DEBUG ram 2020-07-10 11:46:27,383 - Writting summary
DEBUG ram 2020-07-10 11:46:27,531 - Writting clustering information to datafile
DEBUG ram 2020-07-10 11:46:27,690 - Getting scatter plot for clustered data
INFO ram 2020-07-10 11:46:28,084 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:46:28,085 - 127.0.0.1 - - [10/Jul/2020 11:46:28] "[37mPOST /clustering/dbscan?eps=0.3&min=1&format=csv&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:46:28,364 - Requested to get clustering details.
DEBUG ram 2020-07-10 11:46:28,376 - Reading datafile for clustered data
INFO ram 2020-07-10 11:46:29,241 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:46:29,333 - 127.0.0.1 - - [10/Jul/2020 11:46:29] "[37mGET /clustering/dbscan?uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:46:29,491 - Requested to get clustering summary.
DEBUG ram 2020-07-10 11:46:29,529 - Reading datafile for clustering summary
INFO ram 2020-07-10 11:46:30,777 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:46:30,821 - 127.0.0.1 - - [10/Jul/2020 11:46:30] "[37mGET /clustering/summary?uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:46:30,959 - Requested to cluster documents.
DEBUG ram 2020-07-10 11:46:31,027 - Reading datafile..
DEBUG ram 2020-07-10 11:46:32,034 - Calculating tf-idf
DEBUG ram 2020-07-10 11:46:32,276 - Calculating variance threshold
DEBUG ram 2020-07-10 11:46:32,383 - Applying PCA
DEBUG ram 2020-07-10 11:46:32,741 - Applying Agglomerative algorithm
DEBUG ram 2020-07-10 11:46:32,928 - Sorting clusters
DEBUG ram 2020-07-10 11:46:32,958 - Converting to JSON format
DEBUG ram 2020-07-10 11:46:33,035 - Exporting clustering results
DEBUG ram 2020-07-10 11:46:33,128 - Writting summary
DEBUG ram 2020-07-10 11:46:33,185 - Writting clustering information to datafile
DEBUG ram 2020-07-10 11:46:33,308 - Getting scatter plot for clustered data
INFO ram 2020-07-10 11:46:33,798 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:46:33,850 - 127.0.0.1 - - [10/Jul/2020 11:46:33] "[37mPOST /clustering/agglomerative?k=5&format=csv&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:46:34,140 - Requested to get clustering details.
DEBUG ram 2020-07-10 11:46:34,190 - Reading datafile for clustered data
INFO ram 2020-07-10 11:46:35,018 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:46:35,098 - 127.0.0.1 - - [10/Jul/2020 11:46:35] "[37mGET /clustering/agglomerative?uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:46:35,411 - Requested to get clustering summary.
DEBUG ram 2020-07-10 11:46:35,429 - Reading datafile for clustering summary
INFO ram 2020-07-10 11:46:36,395 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:46:36,491 - 127.0.0.1 - - [10/Jul/2020 11:46:36] "[37mGET /clustering/summary?uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:46:36,788 - Requested to cluster documents.
DEBUG ram 2020-07-10 11:46:36,827 - Reading datafile..
DEBUG ram 2020-07-10 11:46:37,751 - Calculating tf-idf
DEBUG ram 2020-07-10 11:46:38,046 - Calculating variance threshold
DEBUG ram 2020-07-10 11:46:38,249 - Applying PCA
DEBUG ram 2020-07-10 11:46:38,367 - Applying Birch algorithm
DEBUG ram 2020-07-10 11:46:38,690 - Sorting clusters
DEBUG ram 2020-07-10 11:46:38,750 - Converting to JSON format
DEBUG ram 2020-07-10 11:46:38,781 - Exporting clustering results
DEBUG ram 2020-07-10 11:46:38,858 - Writting summary
DEBUG ram 2020-07-10 11:46:38,909 - Writting clustering information to datafile
DEBUG ram 2020-07-10 11:46:39,013 - Getting scatter plot for clustered data
INFO ram 2020-07-10 11:46:40,551 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:46:40,569 - 127.0.0.1 - - [10/Jul/2020 11:46:40] "[37mPOST /clustering/birch?k=5&format=csv&uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:46:40,857 - Requested to get clustering details.
DEBUG ram 2020-07-10 11:46:40,900 - Reading datafile for clustered data
INFO ram 2020-07-10 11:46:41,662 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:46:41,871 - 127.0.0.1 - - [10/Jul/2020 11:46:41] "[37mGET /clustering/birch?uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO ram 2020-07-10 11:46:42,110 - Requested to get clustering summary.
DEBUG ram 2020-07-10 11:46:42,116 - Reading datafile for clustering summary
INFO ram 2020-07-10 11:46:42,626 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:46:42,629 - 127.0.0.1 - - [10/Jul/2020 11:46:42] "[37mGET /clustering/summary?uname=ram&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG vaishnavi 2020-07-10 11:46:47,196 - Pre-processed data
DEBUG vaishnavi 2020-07-10 11:46:47,281 - Made entry of pre-processed data in datafile successfully
INFO werkzeug 2020-07-10 11:46:47,300 - 127.0.0.1 - - [10/Jul/2020 11:46:47] "[37mPOST /preprocess?steps=url&steps=stemming&steps=lemmatization&steps=stopwords&steps=unusual&uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO vaishnavi 2020-07-10 11:46:47,408 - Requested to export pre-processed data.
DEBUG vaishnavi 2020-07-10 11:46:47,414 - Reading pre-processed datafile.
DEBUG vaishnavi 2020-07-10 11:46:47,957 - Exporting pre-processed data to excel file.
INFO vaishnavi 2020-07-10 11:46:50,551 - Exported pre-processed data successfully.
INFO werkzeug 2020-07-10 11:46:50,569 - 127.0.0.1 - - [10/Jul/2020 11:46:50] "[37mPOST /preprocess/export?filepath=prep.xlsx&uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO vaishnavi 2020-07-10 11:46:50,740 - Requested to cluster documents.
DEBUG vaishnavi 2020-07-10 11:46:50,752 - Reading datafile..
DEBUG vaishnavi 2020-07-10 11:46:51,095 - Calculating tf-idf
DEBUG vaishnavi 2020-07-10 11:46:51,541 - Calculating variance threshold
DEBUG vaishnavi 2020-07-10 11:46:51,702 - Applying PCA
DEBUG vaishnavi 2020-07-10 11:46:51,933 - Applying K-Means algorithm
DEBUG vaishnavi 2020-07-10 11:46:52,473 - Sorting clusters
DEBUG vaishnavi 2020-07-10 11:46:52,516 - Converting to JSON format
DEBUG vaishnavi 2020-07-10 11:46:52,567 - Exporting clustering results
DEBUG vaishnavi 2020-07-10 11:46:52,601 - Writting summary
DEBUG vaishnavi 2020-07-10 11:46:52,660 - Writting clustering information to datafile
DEBUG vaishnavi 2020-07-10 11:46:52,734 - Getting scatter plot for clustered data
INFO vaishnavi 2020-07-10 11:46:54,087 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:46:54,099 - 127.0.0.1 - - [10/Jul/2020 11:46:54] "[37mPOST /clustering/kmeans?k=4&format=csv&uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO vaishnavi 2020-07-10 11:46:54,309 - Requested to get clustering details.
DEBUG vaishnavi 2020-07-10 11:46:54,334 - Reading datafile for clustered data
INFO vaishnavi 2020-07-10 11:46:54,648 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:46:54,729 - 127.0.0.1 - - [10/Jul/2020 11:46:54] "[37mGET /clustering/kmeans?uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO vaishnavi 2020-07-10 11:46:55,029 - Requested to get clustering summary.
DEBUG vaishnavi 2020-07-10 11:46:55,035 - Reading datafile for clustering summary
INFO vaishnavi 2020-07-10 11:46:55,425 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:46:55,537 - 127.0.0.1 - - [10/Jul/2020 11:46:55] "[37mGET /clustering/summary?uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO vaishnavi 2020-07-10 11:46:55,797 - Requested to cluster documents.
DEBUG vaishnavi 2020-07-10 11:46:55,809 - Reading datafile..
DEBUG vaishnavi 2020-07-10 11:46:56,119 - Calculating tf-idf
DEBUG vaishnavi 2020-07-10 11:46:56,504 - Calculating variance threshold
DEBUG vaishnavi 2020-07-10 11:46:56,632 - Applying PCA
DEBUG vaishnavi 2020-07-10 11:46:56,882 - Applying DBSCAN algorithm
DEBUG vaishnavi 2020-07-10 11:46:57,006 - Sorting clusters
DEBUG vaishnavi 2020-07-10 11:46:57,026 - Converting to JSON format
DEBUG vaishnavi 2020-07-10 11:46:57,070 - Exporting clustering results
DEBUG vaishnavi 2020-07-10 11:46:57,212 - Writting summary
DEBUG vaishnavi 2020-07-10 11:46:57,274 - Writting clustering information to datafile
DEBUG vaishnavi 2020-07-10 11:46:57,341 - Getting scatter plot for clustered data
DEBUG admin1 2020-07-10 11:46:58,011 - Pre-processed data
INFO vaishnavi 2020-07-10 11:46:58,082 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:46:58,088 - 127.0.0.1 - - [10/Jul/2020 11:46:58] "[37mPOST /clustering/dbscan?eps=0.3&min=1&format=csv&uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG admin1 2020-07-10 11:46:58,095 - Made entry of pre-processed data in datafile successfully
INFO werkzeug 2020-07-10 11:46:58,108 - 127.0.0.1 - - [10/Jul/2020 11:46:58] "[37mPOST /preprocess?steps=url&steps=stemming&steps=lemmatization&steps=stopwords&steps=unusual&uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 11:46:58,174 - Requested to export pre-processed data.
DEBUG admin1 2020-07-10 11:46:58,175 - Reading pre-processed datafile.
INFO vaishnavi 2020-07-10 11:46:58,192 - Requested to get clustering details.
DEBUG vaishnavi 2020-07-10 11:46:58,193 - Reading datafile for clustered data
INFO vaishnavi 2020-07-10 11:46:58,195 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:46:58,199 - 127.0.0.1 - - [10/Jul/2020 11:46:58] "[37mGET /clustering/dbscan?uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG admin1 2020-07-10 11:46:58,263 - Exporting pre-processed data to excel file.
INFO vaishnavi 2020-07-10 11:46:58,335 - Requested to get clustering summary.
DEBUG vaishnavi 2020-07-10 11:46:58,341 - Reading datafile for clustering summary
INFO vaishnavi 2020-07-10 11:46:58,379 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:46:58,433 - 127.0.0.1 - - [10/Jul/2020 11:46:58] "[37mGET /clustering/summary?uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO vaishnavi 2020-07-10 11:46:58,514 - Requested to cluster documents.
DEBUG vaishnavi 2020-07-10 11:46:58,532 - Reading datafile..
DEBUG vaishnavi 2020-07-10 11:46:58,659 - Calculating tf-idf
DEBUG vaishnavi 2020-07-10 11:46:58,959 - Calculating variance threshold
DEBUG vaishnavi 2020-07-10 11:46:59,022 - Applying PCA
DEBUG sita 2020-07-10 11:46:59,134 - Pre-processed data
DEBUG vaishnavi 2020-07-10 11:46:59,138 - Applying Agglomerative algorithm
DEBUG sita 2020-07-10 11:46:59,139 - Made entry of pre-processed data in datafile successfully
INFO werkzeug 2020-07-10 11:46:59,142 - 127.0.0.1 - - [10/Jul/2020 11:46:59] "[37mPOST /preprocess?steps=url&steps=stemming&steps=lemmatization&steps=stopwords&steps=unusual&uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG vaishnavi 2020-07-10 11:46:59,155 - Sorting clusters
DEBUG vaishnavi 2020-07-10 11:46:59,157 - Converting to JSON format
DEBUG vaishnavi 2020-07-10 11:46:59,160 - Exporting clustering results
INFO sita 2020-07-10 11:46:59,163 - Requested to export pre-processed data.
DEBUG sita 2020-07-10 11:46:59,163 - Reading pre-processed datafile.
DEBUG vaishnavi 2020-07-10 11:46:59,164 - Writting summary
DEBUG vaishnavi 2020-07-10 11:46:59,166 - Writting clustering information to datafile
DEBUG vaishnavi 2020-07-10 11:46:59,169 - Getting scatter plot for clustered data
DEBUG sita 2020-07-10 11:46:59,212 - Exporting pre-processed data to excel file.
INFO vaishnavi 2020-07-10 11:46:59,335 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:46:59,336 - 127.0.0.1 - - [10/Jul/2020 11:46:59] "[37mPOST /clustering/agglomerative?k=5&format=csv&uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 11:46:59,358 - Exported pre-processed data successfully.
INFO werkzeug 2020-07-10 11:46:59,359 - 127.0.0.1 - - [10/Jul/2020 11:46:59] "[37mPOST /preprocess/export?filepath=prep.xlsx&uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 11:46:59,405 - Requested to cluster documents.
DEBUG admin1 2020-07-10 11:46:59,405 - Reading datafile..
DEBUG admin1 2020-07-10 11:46:59,408 - Calculating tf-idf
INFO vaishnavi 2020-07-10 11:46:59,420 - Requested to get clustering details.
DEBUG vaishnavi 2020-07-10 11:46:59,421 - Reading datafile for clustered data
DEBUG admin1 2020-07-10 11:46:59,477 - Calculating variance threshold
INFO vaishnavi 2020-07-10 11:46:59,484 - Get request for clustered data served successfully
DEBUG admin1 2020-07-10 11:46:59,487 - Applying PCA
INFO werkzeug 2020-07-10 11:46:59,497 - 127.0.0.1 - - [10/Jul/2020 11:46:59] "[37mGET /clustering/agglomerative?uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO vaishnavi 2020-07-10 11:46:59,514 - Requested to get clustering summary.
DEBUG vaishnavi 2020-07-10 11:46:59,515 - Reading datafile for clustering summary
DEBUG admin1 2020-07-10 11:46:59,517 - Applying K-Means algorithm
INFO vaishnavi 2020-07-10 11:46:59,551 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:46:59,569 - 127.0.0.1 - - [10/Jul/2020 11:46:59] "[37mGET /clustering/summary?uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG admin1 2020-07-10 11:46:59,585 - Sorting clusters
DEBUG admin1 2020-07-10 11:46:59,587 - Converting to JSON format
DEBUG admin1 2020-07-10 11:46:59,589 - Exporting clustering results
DEBUG admin1 2020-07-10 11:46:59,591 - Writting summary
DEBUG admin1 2020-07-10 11:46:59,593 - Writting clustering information to datafile
DEBUG admin1 2020-07-10 11:46:59,595 - Getting scatter plot for clustered data
INFO vaishnavi 2020-07-10 11:46:59,665 - Requested to cluster documents.
DEBUG vaishnavi 2020-07-10 11:46:59,668 - Reading datafile..
INFO admin1 2020-07-10 11:46:59,768 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:46:59,769 - 127.0.0.1 - - [10/Jul/2020 11:46:59] "[37mPOST /clustering/kmeans?k=4&format=csv&uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:46:59,769 - Exported pre-processed data successfully.
INFO werkzeug 2020-07-10 11:46:59,770 - 127.0.0.1 - - [10/Jul/2020 11:46:59] "[37mPOST /preprocess/export?filepath=prep.xlsx&uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG vaishnavi 2020-07-10 11:46:59,772 - Calculating tf-idf
INFO sita 2020-07-10 11:46:59,795 - Requested to cluster documents.
DEBUG sita 2020-07-10 11:46:59,807 - Reading datafile..
DEBUG vaishnavi 2020-07-10 11:46:59,847 - Calculating variance threshold
DEBUG vaishnavi 2020-07-10 11:46:59,864 - Applying PCA
DEBUG sita 2020-07-10 11:46:59,865 - Calculating tf-idf
INFO admin1 2020-07-10 11:46:59,873 - Requested to get clustering details.
DEBUG admin1 2020-07-10 11:46:59,882 - Reading datafile for clustered data
DEBUG vaishnavi 2020-07-10 11:46:59,948 - Applying Birch algorithm
DEBUG vaishnavi 2020-07-10 11:46:59,971 - Sorting clusters
DEBUG sita 2020-07-10 11:46:59,972 - Calculating variance threshold
DEBUG vaishnavi 2020-07-10 11:46:59,974 - Converting to JSON format
DEBUG vaishnavi 2020-07-10 11:46:59,983 - Exporting clustering results
INFO admin1 2020-07-10 11:46:59,986 - Get request for clustered data served successfully
DEBUG sita 2020-07-10 11:46:59,989 - Applying PCA
INFO werkzeug 2020-07-10 11:46:59,999 - 127.0.0.1 - - [10/Jul/2020 11:46:59] "[37mGET /clustering/kmeans?uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG vaishnavi 2020-07-10 11:46:59,999 - Writting summary
DEBUG vaishnavi 2020-07-10 11:47:00,013 - Writting clustering information to datafile
DEBUG sita 2020-07-10 11:47:00,014 - Applying K-Means algorithm
DEBUG vaishnavi 2020-07-10 11:47:00,027 - Getting scatter plot for clustered data
INFO admin1 2020-07-10 11:47:00,093 - Requested to get clustering summary.
DEBUG admin1 2020-07-10 11:47:00,094 - Reading datafile for clustering summary
DEBUG sita 2020-07-10 11:47:00,191 - Sorting clusters
DEBUG sita 2020-07-10 11:47:00,215 - Converting to JSON format
DEBUG sita 2020-07-10 11:47:00,224 - Exporting clustering results
INFO admin1 2020-07-10 11:47:00,229 - Get request for clustering summary served successfully
DEBUG sita 2020-07-10 11:47:00,229 - Writting summary
INFO werkzeug 2020-07-10 11:47:00,232 - 127.0.0.1 - - [10/Jul/2020 11:47:00] "[37mGET /clustering/summary?uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG sita 2020-07-10 11:47:00,240 - Writting clustering information to datafile
INFO vaishnavi 2020-07-10 11:47:00,316 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:47:00,317 - 127.0.0.1 - - [10/Jul/2020 11:47:00] "[37mPOST /clustering/birch?k=5&format=csv&uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG sita 2020-07-10 11:47:00,319 - Getting scatter plot for clustered data
INFO admin1 2020-07-10 11:47:00,323 - Requested to cluster documents.
DEBUG admin1 2020-07-10 11:47:00,323 - Reading datafile..
DEBUG admin1 2020-07-10 11:47:00,326 - Calculating tf-idf
INFO vaishnavi 2020-07-10 11:47:00,416 - Requested to get clustering details.
DEBUG vaishnavi 2020-07-10 11:47:00,427 - Reading datafile for clustered data
DEBUG admin1 2020-07-10 11:47:00,479 - Calculating variance threshold
DEBUG admin1 2020-07-10 11:47:00,513 - Applying PCA
DEBUG admin1 2020-07-10 11:47:00,592 - Applying DBSCAN algorithm
INFO vaishnavi 2020-07-10 11:47:00,655 - Get request for clustered data served successfully
INFO sita 2020-07-10 11:47:00,660 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:47:00,669 - 127.0.0.1 - - [10/Jul/2020 11:47:00] "[37mPOST /clustering/kmeans?k=4&format=csv&uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG admin1 2020-07-10 11:47:00,668 - Sorting clusters
INFO werkzeug 2020-07-10 11:47:00,673 - 127.0.0.1 - - [10/Jul/2020 11:47:00] "[37mGET /clustering/birch?uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG admin1 2020-07-10 11:47:00,672 - Converting to JSON format
DEBUG admin1 2020-07-10 11:47:00,676 - Exporting clustering results
DEBUG admin1 2020-07-10 11:47:00,678 - Writting summary
DEBUG admin1 2020-07-10 11:47:00,680 - Writting clustering information to datafile
INFO vaishnavi 2020-07-10 11:47:00,700 - Requested to get clustering summary.
DEBUG vaishnavi 2020-07-10 11:47:00,700 - Reading datafile for clustering summary
DEBUG admin1 2020-07-10 11:47:00,702 - Getting scatter plot for clustered data
INFO vaishnavi 2020-07-10 11:47:00,720 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:47:00,722 - 127.0.0.1 - - [10/Jul/2020 11:47:00] "[37mGET /clustering/summary?uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:47:00,833 - Requested to get clustering details.
DEBUG sita 2020-07-10 11:47:00,834 - Reading datafile for clustered data
INFO sita 2020-07-10 11:47:00,836 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:47:00,840 - 127.0.0.1 - - [10/Jul/2020 11:47:00] "[37mGET /clustering/kmeans?uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:47:00,879 - Requested to get clustering summary.
DEBUG sita 2020-07-10 11:47:00,884 - Reading datafile for clustering summary
INFO sita 2020-07-10 11:47:00,898 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:47:00,916 - 127.0.0.1 - - [10/Jul/2020 11:47:00] "[37mGET /clustering/summary?uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:47:00,953 - Requested to cluster documents.
DEBUG sita 2020-07-10 11:47:00,954 - Reading datafile..
DEBUG sita 2020-07-10 11:47:00,978 - Calculating tf-idf
INFO admin1 2020-07-10 11:47:01,023 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:47:01,030 - 127.0.0.1 - - [10/Jul/2020 11:47:01] "[37mPOST /clustering/dbscan?eps=0.3&min=1&format=csv&uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG sita 2020-07-10 11:47:01,106 - Calculating variance threshold
INFO admin1 2020-07-10 11:47:01,106 - Requested to get clustering details.
DEBUG admin1 2020-07-10 11:47:01,115 - Reading datafile for clustered data
DEBUG sita 2020-07-10 11:47:01,124 - Applying PCA
INFO admin1 2020-07-10 11:47:01,128 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:47:01,187 - 127.0.0.1 - - [10/Jul/2020 11:47:01] "[37mGET /clustering/dbscan?uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG sita 2020-07-10 11:47:01,192 - Applying DBSCAN algorithm
DEBUG sita 2020-07-10 11:47:01,220 - Sorting clusters
INFO admin1 2020-07-10 11:47:01,221 - Requested to get clustering summary.
DEBUG sita 2020-07-10 11:47:01,222 - Converting to JSON format
DEBUG sita 2020-07-10 11:47:01,225 - Exporting clustering results
DEBUG admin1 2020-07-10 11:47:01,223 - Reading datafile for clustering summary
INFO admin1 2020-07-10 11:47:01,229 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:47:01,231 - 127.0.0.1 - - [10/Jul/2020 11:47:01] "[37mGET /clustering/summary?uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG sita 2020-07-10 11:47:01,241 - Writting summary
DEBUG sita 2020-07-10 11:47:01,243 - Writting clustering information to datafile
DEBUG sita 2020-07-10 11:47:01,252 - Getting scatter plot for clustered data
INFO admin1 2020-07-10 11:47:01,324 - Requested to cluster documents.
DEBUG admin1 2020-07-10 11:47:01,325 - Reading datafile..
DEBUG admin1 2020-07-10 11:47:01,328 - Calculating tf-idf
DEBUG admin1 2020-07-10 11:47:01,478 - Calculating variance threshold
INFO sita 2020-07-10 11:47:01,549 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:47:01,550 - 127.0.0.1 - - [10/Jul/2020 11:47:01] "[37mPOST /clustering/dbscan?eps=0.3&min=1&format=csv&uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG admin1 2020-07-10 11:47:01,553 - Applying PCA
DEBUG admin1 2020-07-10 11:47:01,576 - Applying Agglomerative algorithm
DEBUG admin1 2020-07-10 11:47:01,586 - Sorting clusters
DEBUG admin1 2020-07-10 11:47:01,588 - Converting to JSON format
DEBUG admin1 2020-07-10 11:47:01,589 - Exporting clustering results
DEBUG admin1 2020-07-10 11:47:01,591 - Writting summary
DEBUG admin1 2020-07-10 11:47:01,593 - Writting clustering information to datafile
DEBUG admin1 2020-07-10 11:47:01,595 - Getting scatter plot for clustered data
INFO sita 2020-07-10 11:47:01,647 - Requested to get clustering details.
DEBUG sita 2020-07-10 11:47:01,647 - Reading datafile for clustered data
INFO sita 2020-07-10 11:47:01,675 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:47:01,688 - 127.0.0.1 - - [10/Jul/2020 11:47:01] "[37mGET /clustering/dbscan?uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:47:01,718 - Requested to get clustering summary.
DEBUG sita 2020-07-10 11:47:01,730 - Reading datafile for clustering summary
INFO admin1 2020-07-10 11:47:01,792 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:47:01,794 - 127.0.0.1 - - [10/Jul/2020 11:47:01] "[37mPOST /clustering/agglomerative?k=5&format=csv&uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:47:01,795 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:47:01,797 - 127.0.0.1 - - [10/Jul/2020 11:47:01] "[37mGET /clustering/summary?uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:47:01,860 - Requested to cluster documents.
DEBUG sita 2020-07-10 11:47:01,861 - Reading datafile..
DEBUG sita 2020-07-10 11:47:01,863 - Calculating tf-idf
INFO admin1 2020-07-10 11:47:01,874 - Requested to get clustering details.
DEBUG admin1 2020-07-10 11:47:01,875 - Reading datafile for clustered data
INFO admin1 2020-07-10 11:47:01,918 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:47:01,942 - 127.0.0.1 - - [10/Jul/2020 11:47:01] "[37mGET /clustering/agglomerative?uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG sita 2020-07-10 11:47:01,948 - Calculating variance threshold
DEBUG sita 2020-07-10 11:47:01,961 - Applying PCA
DEBUG sita 2020-07-10 11:47:01,990 - Applying Agglomerative algorithm
INFO admin1 2020-07-10 11:47:01,997 - Requested to get clustering summary.
DEBUG admin1 2020-07-10 11:47:01,999 - Reading datafile for clustering summary
DEBUG sita 2020-07-10 11:47:02,007 - Sorting clusters
DEBUG sita 2020-07-10 11:47:02,009 - Converting to JSON format
DEBUG sita 2020-07-10 11:47:02,011 - Exporting clustering results
INFO admin1 2020-07-10 11:47:02,012 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:47:02,014 - 127.0.0.1 - - [10/Jul/2020 11:47:02] "[37mGET /clustering/summary?uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG sita 2020-07-10 11:47:02,015 - Writting summary
DEBUG sita 2020-07-10 11:47:02,017 - Writting clustering information to datafile
DEBUG sita 2020-07-10 11:47:02,019 - Getting scatter plot for clustered data
INFO admin1 2020-07-10 11:47:02,308 - Requested to cluster documents.
DEBUG admin1 2020-07-10 11:47:02,309 - Reading datafile..
DEBUG admin1 2020-07-10 11:47:02,327 - Calculating tf-idf
INFO sita 2020-07-10 11:47:02,461 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:47:02,473 - 127.0.0.1 - - [10/Jul/2020 11:47:02] "[37mPOST /clustering/agglomerative?k=5&format=csv&uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG admin1 2020-07-10 11:47:02,482 - Calculating variance threshold
DEBUG admin1 2020-07-10 11:47:02,498 - Applying PCA
DEBUG admin1 2020-07-10 11:47:02,527 - Applying Birch algorithm
INFO sita 2020-07-10 11:47:02,544 - Requested to get clustering details.
DEBUG sita 2020-07-10 11:47:02,545 - Reading datafile for clustered data
DEBUG admin1 2020-07-10 11:47:02,550 - Sorting clusters
DEBUG admin1 2020-07-10 11:47:02,552 - Converting to JSON format
DEBUG admin1 2020-07-10 11:47:02,555 - Exporting clustering results
INFO sita 2020-07-10 11:47:02,558 - Get request for clustered data served successfully
DEBUG admin1 2020-07-10 11:47:02,558 - Writting summary
DEBUG admin1 2020-07-10 11:47:02,560 - Writting clustering information to datafile
DEBUG admin1 2020-07-10 11:47:02,563 - Getting scatter plot for clustered data
INFO werkzeug 2020-07-10 11:47:02,564 - 127.0.0.1 - - [10/Jul/2020 11:47:02] "[37mGET /clustering/agglomerative?uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:47:02,617 - Requested to get clustering summary.
DEBUG sita 2020-07-10 11:47:02,620 - Reading datafile for clustering summary
INFO admin1 2020-07-10 11:47:02,705 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:47:02,706 - 127.0.0.1 - - [10/Jul/2020 11:47:02] "[37mPOST /clustering/birch?k=5&format=csv&uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:47:02,707 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:47:02,709 - 127.0.0.1 - - [10/Jul/2020 11:47:02] "[37mGET /clustering/summary?uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:47:02,725 - Requested to cluster documents.
DEBUG sita 2020-07-10 11:47:02,726 - Reading datafile..
DEBUG sita 2020-07-10 11:47:02,729 - Calculating tf-idf
DEBUG sita 2020-07-10 11:47:02,790 - Calculating variance threshold
INFO admin1 2020-07-10 11:47:02,798 - Requested to get clustering details.
DEBUG admin1 2020-07-10 11:47:02,798 - Reading datafile for clustered data
DEBUG sita 2020-07-10 11:47:02,801 - Applying PCA
INFO admin1 2020-07-10 11:47:02,823 - Get request for clustered data served successfully
DEBUG sita 2020-07-10 11:47:02,822 - Applying Birch algorithm
DEBUG sita 2020-07-10 11:47:02,841 - Sorting clusters
DEBUG sita 2020-07-10 11:47:02,843 - Converting to JSON format
INFO werkzeug 2020-07-10 11:47:02,845 - 127.0.0.1 - - [10/Jul/2020 11:47:02] "[37mGET /clustering/birch?uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
DEBUG sita 2020-07-10 11:47:02,847 - Exporting clustering results
DEBUG sita 2020-07-10 11:47:02,850 - Writting summary
DEBUG sita 2020-07-10 11:47:02,852 - Writting clustering information to datafile
DEBUG sita 2020-07-10 11:47:02,853 - Getting scatter plot for clustered data
INFO admin1 2020-07-10 11:47:02,923 - Requested to get clustering summary.
DEBUG admin1 2020-07-10 11:47:02,931 - Reading datafile for clustering summary
INFO sita 2020-07-10 11:47:03,045 - Performed clustering successfully
INFO werkzeug 2020-07-10 11:47:03,046 - 127.0.0.1 - - [10/Jul/2020 11:47:03] "[37mPOST /clustering/birch?k=5&format=csv&uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 11:47:03,047 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:47:03,049 - 127.0.0.1 - - [10/Jul/2020 11:47:03] "[37mGET /clustering/summary?uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:47:03,106 - Requested to get clustering details.
DEBUG sita 2020-07-10 11:47:03,107 - Reading datafile for clustered data
INFO sita 2020-07-10 11:47:03,108 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 11:47:03,112 - 127.0.0.1 - - [10/Jul/2020 11:47:03] "[37mGET /clustering/birch?uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO sita 2020-07-10 11:47:03,170 - Requested to get clustering summary.
DEBUG sita 2020-07-10 11:47:03,171 - Reading datafile for clustering summary
INFO sita 2020-07-10 11:47:03,173 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 11:47:03,175 - 127.0.0.1 - - [10/Jul/2020 11:47:03] "[37mGET /clustering/summary?uname=sita&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO werkzeug 2020-07-10 12:00:36,789 -  * Detected change in 'C:\\Users\\Personnal\\Documents\\FinIQ\\NLP_Project\\Another\\API\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-10 12:00:37,751 -  * Restarting with stat
INFO werkzeug 2020-07-10 12:00:47,839 -  * Restarting with stat
WARNING werkzeug 2020-07-10 12:00:52,486 -  * Debugger is active!
INFO werkzeug 2020-07-10 12:00:52,499 -  * Debugger PIN: 240-565-176
INFO werkzeug 2020-07-10 12:00:52,517 -  * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
INFO admin1 2020-07-10 12:00:56,930 - Requested to extract data.
DEBUG admin1 2020-07-10 12:00:56,931 - Extracted links and ISINs from JSON object.
INFO admin1 2020-07-10 12:01:04,236 - Made entry for extracted data in datafile successfully.
INFO werkzeug 2020-07-10 12:01:04,238 - 127.0.0.1 - - [10/Jul/2020 12:01:04] "[37mPOST /extract?filepath=ISINS_v3.xlsx&no_of_docs=15&uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 12:01:04,249 - Requested to export extracted data.
ERROR admin1 2020-07-10 12:01:04,329 - Exception occurred:TypeError("exportexcel() got multiple values for argument 'filename'")
Traceback (most recent call last):
  File "C:\Users\Personnal\Documents\FinIQ\NLP_Project\Another\API\pre-processing-and-API\api.py", line 221, in post
    ex.exportexcel(args['uname'], args['fname'], filename = args['filepath'], datalist = [ISINs, URLs, text])
TypeError: exportexcel() got multiple values for argument 'filename'
INFO werkzeug 2020-07-10 12:01:04,331 - 127.0.0.1 - - [10/Jul/2020 12:01:04] "[31m[1mPOST /extract/export?filepath=extract.xlsx&uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 400 -
INFO admin1 2020-07-10 12:01:04,361 - Requested to pre-process data.
DEBUG admin1 2020-07-10 12:01:23,130 - Pre-processed data
DEBUG admin1 2020-07-10 12:01:23,132 - Made entry of pre-processed data in datafile successfully
INFO werkzeug 2020-07-10 12:01:23,134 - 127.0.0.1 - - [10/Jul/2020 12:01:23] "[37mPOST /preprocess?steps=url&steps=stemming&steps=lemmatization&steps=stopwords&steps=unusual&uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 12:01:23,146 - Requested to export pre-processed data.
DEBUG admin1 2020-07-10 12:01:23,146 - Reading pre-processed datafile.
DEBUG admin1 2020-07-10 12:01:23,164 - Exporting pre-processed data to excel file.
ERROR admin1 2020-07-10 12:01:23,165 - Exception occurred: TypeError("exportexcel() got multiple values for argument 'filename'")
Traceback (most recent call last):
  File "C:\Users\Personnal\Documents\FinIQ\NLP_Project\Another\API\pre-processing-and-API\api.py", line 436, in post
    ex.exportexcel(args['uname'], args['fname'], filename = args['filepath'], datalist = [ISINs, URLs, text])
TypeError: exportexcel() got multiple values for argument 'filename'
INFO werkzeug 2020-07-10 12:01:23,166 - 127.0.0.1 - - [10/Jul/2020 12:01:23] "[31m[1mPOST /preprocess/export?filepath=prep.xlsx&uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 400 -
INFO admin1 2020-07-10 12:01:23,222 - Requested to cluster documents.
DEBUG admin1 2020-07-10 12:01:23,223 - Reading datafile..
DEBUG admin1 2020-07-10 12:01:23,225 - Calculating tf-idf
DEBUG admin1 2020-07-10 12:01:23,294 - Calculating variance threshold
DEBUG admin1 2020-07-10 12:01:23,310 - Applying PCA
DEBUG admin1 2020-07-10 12:01:23,339 - Applying K-Means algorithm
DEBUG admin1 2020-07-10 12:01:23,408 - Sorting clusters
DEBUG admin1 2020-07-10 12:01:23,410 - Converting to JSON format
DEBUG admin1 2020-07-10 12:01:23,412 - Exporting clustering results
DEBUG admin1 2020-07-10 12:01:23,414 - Writting summary
DEBUG admin1 2020-07-10 12:01:23,416 - Writting clustering information to datafile
DEBUG admin1 2020-07-10 12:01:23,418 - Getting scatter plot for clustered data
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,530 - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0.
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,531 - findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,532 - findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,532 - findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,532 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,533 - findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,533 - findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,533 - findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,533 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,534 - findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,534 - findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,534 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,535 - findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,535 - findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,535 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,536 - findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,536 - findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,536 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,536 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,537 - findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,537 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,537 - findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,537 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,538 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,538 - findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,538 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,538 - findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,539 - findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,539 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,539 - findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,539 - findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,540 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,540 - findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,540 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,541 - findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,541 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,541 - findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,541 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,542 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,542 - findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal demi normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,542 - findfont: score(<Font 'Sanskrit Text' (Sanskr.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,542 - findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal black normal>) = 11.525
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,542 - findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,543 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,543 - findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,543 - findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,543 - findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,544 - findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,544 - findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,544 - findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,544 - findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,545 - findfont: score(<Font 'Utsaah' (utsaahb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,545 - findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,545 - findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,546 - findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,546 - findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,546 - findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,546 - findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,547 - findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,547 - findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,547 - findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,547 - findfont: score(<Font 'Corbel' (corbell.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,548 - findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,548 - findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,548 - findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,548 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,549 - findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,549 - findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,549 - findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,550 - findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,550 - findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,550 - findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,550 - findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,551 - findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,551 - findfont: score(<Font 'Candara' (Candarali.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,551 - findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal demi normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,551 - findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,552 - findfont: score(<Font 'Arial' (ariblk.ttf) normal normal black normal>) = 6.888636363636364
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,552 - findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,552 - findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,552 - findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,553 - findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,553 - findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,553 - findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,554 - findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,554 - findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,554 - findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,554 - findfont: score(<Font 'SketchFlow Print' (SketchFlow Print.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,555 - findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,555 - findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,555 - findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,555 - findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,556 - findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,556 - findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,556 - findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,557 - findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,557 - findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal roman normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,557 - findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal roman normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,558 - findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,558 - findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,558 - findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,558 - findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,559 - findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,559 - findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,559 - findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,559 - findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,560 - findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,560 - findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,560 - findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,560 - findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,561 - findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,561 - findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,561 - findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,562 - findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,562 - findfont: score(<Font 'Times New Roman' (times.ttf) normal normal roman normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,562 - findfont: score(<Font 'Utsaah' (utsaahb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,562 - findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,563 - findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,563 - findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal semibold normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,563 - findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,563 - findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,564 - findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,564 - findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,564 - findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,565 - findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,565 - findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,565 - findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,565 - findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,566 - findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,566 - findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,566 - findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal roman normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,566 - findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,567 - findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,567 - findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,567 - findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,567 - findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal bold condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,568 - findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,568 - findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,568 - findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,569 - findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,569 - findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,569 - findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,569 - findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,570 - findfont: score(<Font 'Utsaah' (utsaahi.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,570 - findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,570 - findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,570 - findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,571 - findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,571 - findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,571 - findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,572 - findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,572 - findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,572 - findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,572 - findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal medium condensed>) = 10.344999999999999
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,573 - findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,573 - findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,573 - findfont: score(<Font 'Aparajita' (aparajbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,574 - findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,574 - findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,574 - findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,574 - findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,575 - findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,575 - findfont: score(<Font 'Arial Unicode MS' (ARIALUNI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,575 - findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,575 - findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,576 - findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,576 - findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,576 - findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,576 - findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,577 - findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,577 - findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,577 - findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,577 - findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,578 - findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,578 - findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,578 - findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,578 - findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,579 - findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,579 - findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,579 - findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,580 - findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,580 - findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,580 - findfont: score(<Font 'Utsaah' (utsaah.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,580 - findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,581 - findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,581 - findfont: score(<Font 'SketchFlow Print' (SketchFlow Print.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,581 - findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,581 - findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,582 - findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,582 - findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,582 - findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,583 - findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,583 - findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,583 - findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,583 - findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,584 - findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,584 - findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,584 - findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,585 - findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,585 - findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,585 - findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,585 - findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,586 - findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,586 - findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,586 - findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal demi normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,586 - findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,587 - findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,587 - findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,587 - findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal heavy normal>) = 10.43
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,587 - findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,588 - findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,588 - findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,588 - findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,588 - findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,589 - findfont: score(<Font 'MT Extra' (mtextra.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,589 - findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,589 - findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,589 - findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,590 - findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,590 - findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,590 - findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,591 - findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,591 - findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,591 - findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,591 - findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,592 - findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,592 - findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal demi condensed>) = 10.44
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,592 - findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,592 - findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,593 - findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,593 - findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,593 - findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,594 - findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal black normal>) = 11.525
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,594 - findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,594 - findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,594 - findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,595 - findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,595 - findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,595 - findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,595 - findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,596 - findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,596 - findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal medium condensed>) = 10.344999999999999
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,596 - findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,596 - findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,597 - findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,597 - findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,597 - findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,598 - findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,598 - findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,598 - findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,599 - findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,599 - findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,600 - findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,600 - findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal bold condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,600 - findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,600 - findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,601 - findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,601 - findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,601 - findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,602 - findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,602 - findfont: score(<Font 'Segoe Marker' (SegoeMarker.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,602 - findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,603 - findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,603 - findfont: score(<Font 'Source Code Pro' (SourceCodePro-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,603 - findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,603 - findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal heavy normal>) = 11.43
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,604 - findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,604 - findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,604 - findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,605 - findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,605 - findfont: score(<Font 'Buxton Sketch' (BuxtonSketch.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,605 - findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,605 - findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,606 - findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,606 - findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,606 - findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,607 - findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,607 - findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,607 - findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,607 - findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,608 - findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal semibold normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,608 - findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,608 - findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,609 - findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,609 - findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal heavy normal>) = 11.43
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,609 - findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,609 - findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,610 - findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,610 - findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,610 - findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,610 - findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,611 - findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,611 - findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,611 - findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,611 - findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,612 - findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal medium normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,612 - findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,612 - findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,612 - findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,613 - findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,613 - findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,613 - findfont: score(<Font 'Aparajita' (aparaji.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,614 - findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,614 - findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,614 - findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,614 - findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,614 - findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,615 - findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal demi normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,615 - findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,615 - findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,615 - findfont: score(<Font 'Shivaji01' (Shivaji01.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,616 - findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,616 - findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,616 - findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,617 - findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,617 - findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,617 - findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,618 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,618 - findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,618 - findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,619 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,619 - findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,619 - findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,619 - findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,620 - findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,620 - findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,620 - findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,621 - findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,621 - findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,621 - findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,622 - findfont: score(<Font 'Aparajita' (aparajb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,622 - findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,622 - findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,623 - findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,623 - findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,623 - findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,623 - findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,624 - findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,624 - findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal bold condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,624 - findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,625 - findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,625 - findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,625 - findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,626 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,626 - findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,626 - findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,626 - findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,627 - findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,627 - findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal medium normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,627 - findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,628 - findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,628 - findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,628 - findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,629 - findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,629 - findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,629 - findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,629 - findfont: score(<Font 'Kokila' (kokilab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,630 - findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,630 - findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,630 - findfont: score(<Font 'Mangal' (mangal.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,631 - findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,631 - findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,631 - findfont: score(<Font 'Calibri' (calibril.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,631 - findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,632 - findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,632 - findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,632 - findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,632 - findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,633 - findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,633 - findfont: score(<Font 'Aparajita' (aparajb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,633 - findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,633 - findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,634 - findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,634 - findfont: score(<Font 'Utsaah' (utsaahi.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,634 - findfont: score(<Font 'Buxton Sketch' (BuxtonSketch.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,635 - findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,635 - findfont: score(<Font 'Aparajita' (aparaj.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,635 - findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,636 - findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,636 - findfont: score(<Font 'Kokila' (kokilai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,636 - findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,636 - findfont: score(<Font 'Source Code Pro' (SourceCodePro-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,637 - findfont: score(<Font 'TeamViewer13' (teamviewer13.otf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,637 - findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,637 - findfont: score(<Font 'Kokila' (kokilab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,638 - findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,638 - findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,638 - findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,639 - findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,639 - findfont: score(<Font 'Segoe Marker' (SegoeMarker.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,639 - findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,639 - findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,640 - findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,640 - findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,640 - findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,641 - findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,641 - findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,641 - findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,642 - findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal bold condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,642 - findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,642 - findfont: score(<Font 'Candara' (Candaral.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,643 - findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,643 - findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,643 - findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,644 - findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal demi normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,644 - findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal semibold normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,644 - findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,645 - findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,645 - findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,645 - findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,645 - findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,646 - findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,646 - findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,646 - findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,647 - findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,647 - findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,647 - findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,647 - findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,648 - findfont: score(<Font 'Corbel' (corbell.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,648 - findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,648 - findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,649 - findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,649 - findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal black normal>) = 11.525
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,649 - findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,649 - findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,650 - findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,650 - findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,650 - findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,651 - findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,651 - findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,651 - findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,651 - findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,652 - findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,652 - findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,652 - findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,652 - findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,653 - findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,653 - findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal demi normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,653 - findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,654 - findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,654 - findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,654 - findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,655 - findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,655 - findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,655 - findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,655 - findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,656 - findfont: score(<Font 'Utsaah' (utsaah.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,656 - findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,656 - findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,656 - findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,657 - findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,657 - findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,657 - findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,658 - findfont: score(<Font 'Kokila' (kokila.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,658 - findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,658 - findfont: score(<Font 'Mangal' (mangalb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,658 - findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,659 - findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,659 - findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,659 - findfont: score(<Font 'MT Extra' (mtextra.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,660 - findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,660 - findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,660 - findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,660 - findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,661 - findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,661 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,661 - findfont: score(<Font 'Shivaji05' (Shivaji05.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,661 - findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,662 - findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,662 - findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,662 - findfont: score(<Font 'Mangal' (mangal.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,662 - findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,663 - findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,663 - findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,663 - findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,664 - findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,664 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,664 - findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,664 - findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,665 - findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,665 - findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,665 - findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal demi condensed>) = 10.44
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,665 - findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,666 - findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,666 - findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,666 - findfont: score(<Font 'Shivaji02' (Shivaji02.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,667 - findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,667 - findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,667 - findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,667 - findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,668 - findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,668 - findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,668 - findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,668 - findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,669 - findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,669 - findfont: score(<Font 'Aparajita' (aparaj.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,669 - findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,669 - findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,670 - findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,670 - findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,670 - findfont: score(<Font 'Utsaah' (utsaahbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,671 - findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,671 - findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,671 - findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,671 - findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,672 - findfont: score(<Font 'Aparajita' (aparaji.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,672 - findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,672 - findfont: score(<Font 'Candara' (Candarali.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,672 - findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,673 - findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,673 - findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,673 - findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,674 - findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,674 - findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,674 - findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,674 - findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,675 - findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,675 - findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,675 - findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,675 - findfont: score(<Font 'Kokila' (kokila.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,676 - findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,676 - findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,676 - findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,676 - findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,677 - findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,677 - findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,677 - findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,677 - findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,677 - findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,678 - findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,678 - findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,678 - findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,678 - findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,679 - findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,679 - findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,679 - findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,679 - findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,680 - findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,680 - findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,680 - findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,680 - findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,681 - findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,681 - findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,681 - findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,681 - findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,681 - findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,682 - findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,682 - findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,682 - findfont: score(<Font 'TeamViewer13' (teamviewer13.otf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,682 - findfont: score(<Font 'Mangal' (mangalb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,683 - findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,683 - findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,683 - findfont: score(<Font 'Calibri' (calibril.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,683 - findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,684 - findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal black normal>) = 11.525
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,684 - findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,684 - findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,684 - findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,684 - findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,685 - findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,685 - findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,685 - findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,685 - findfont: score(<Font 'Kokila' (kokilai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,686 - findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,686 - findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,686 - findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,686 - findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,687 - findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,687 - findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,687 - findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,687 - findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,688 - findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,688 - findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,688 - findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,688 - findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,689 - findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,689 - findfont: score(<Font 'Aparajita' (aparajbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,689 - findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,689 - findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,690 - findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,690 - findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,690 - findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,690 - findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,691 - findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,691 - findfont: score(<Font 'Shivaji02' (Shivaji02.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,691 - findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,692 - findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,692 - findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,692 - findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,692 - findfont: score(<Font 'Shivaji01' (Shivaji01.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,693 - findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,693 - findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,693 - findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,694 - findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,694 - findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,694 - findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,695 - findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,695 - findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,695 - findfont: score(<Font 'Kokila' (kokilabi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,696 - findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,696 - findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,696 - findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,696 - findfont: score(<Font 'Kokila' (kokilabi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,697 - findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,697 - findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,697 - findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,698 - findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,698 - findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,698 - findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,698 - findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,699 - findfont: score(<Font 'Arial Unicode MS' (ARIALUNI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,699 - findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,699 - findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,699 - findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,700 - findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,700 - findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,700 - findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,701 - findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,701 - findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,701 - findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,701 - findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,702 - findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal roman normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,702 - findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,702 - findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,702 - findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,703 - findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,703 - findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,703 - findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,703 - findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,704 - findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,704 - findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,704 - findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,705 - findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,705 - findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,705 - findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,705 - findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,706 - findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal bold condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,706 - findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,706 - findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,706 - findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,707 - findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal bold condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,707 - findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,707 - findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,708 - findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,708 - findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,708 - findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,708 - findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,709 - findfont: score(<Font 'Utsaah' (utsaahbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,709 - findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,709 - findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,709 - findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,710 - findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal semibold normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,710 - findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,710 - findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,710 - findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,711 - findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,711 - findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,711 - findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,711 - findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,712 - findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,712 - findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,712 - findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal heavy normal>) = 10.43
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,712 - findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,713 - findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,713 - findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,713 - findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,713 - findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,714 - findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,714 - findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,714 - findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,714 - findfont: score(<Font 'Candara' (Candaral.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,715 - findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,715 - findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,715 - findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,715 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,716 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,716 - findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,716 - findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,717 - findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,717 - findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,717 - findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,717 - findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,718 - findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,718 - findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,718 - findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,718 - findfont: score(<Font 'Shivaji05' (Shivaji05.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,719 - findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,719 - findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,719 - findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,719 - findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,720 - findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,720 - findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,720 - findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,721 - findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,721 - findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,721 - findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,721 - findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,722 - findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,722 - findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,722 - findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,722 - findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,723 - findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,723 - findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,723 - findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,723 - findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,724 - findfont: score(<Font 'Times New Roman' (times.ttf) normal normal roman normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,724 - findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,725 - findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,725 - findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,725 - findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,725 - findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,726 - findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,726 - findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,726 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,726 - findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,727 - findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,727 - findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,727 - findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,727 - findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,728 - findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,728 - findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,728 - findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,728 - findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,729 - findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,729 - findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,729 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,730 - findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,730 - findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,730 - findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,730 - findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,731 - findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,731 - findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,731 - findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,731 - findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,732 - findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,732 - findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,732 - findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,733 - findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,733 - findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,733 - findfont: score(<Font 'Sanskrit Text' (Sanskr.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,733 - findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,734 - findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,734 - findfont: score(<Font 'Arial' (ariblk.ttf) normal normal black normal>) = 6.888636363636364
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,734 - findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,734 - findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,735 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,735 - findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,735 - findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,735 - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=12.0 to DejaVu Sans ('C:\\Users\\Personnal\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,781 - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0.
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,782 - findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,782 - findfont: score(<Font 'DejaVu Serif Display' (DejaVuSerifDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,782 - findfont: score(<Font 'cmsy10' (cmsy10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,783 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUniIta.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,783 - findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,783 - findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,783 - findfont: score(<Font 'cmb10' (cmb10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,784 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,784 - findfont: score(<Font 'STIXGeneral' (STIXGeneralItalic.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,784 - findfont: score(<Font 'STIXSizeFourSym' (STIXSizFourSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,784 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,785 - findfont: score(<Font 'cmex10' (cmex10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,785 - findfont: score(<Font 'STIXGeneral' (STIXGeneral.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,785 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Oblique.ttf) oblique normal 400 normal>) = 1.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,785 - findfont: score(<Font 'STIXSizeTwoSym' (STIXSizTwoSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,786 - findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,786 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUni.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,786 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans-Bold.ttf) normal normal 700 normal>) = 0.33499999999999996
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,786 - findfont: score(<Font 'STIXSizeOneSym' (STIXSizOneSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,787 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,787 - findfont: score(<Font 'DejaVu Sans Display' (DejaVuSansDisplay.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,787 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,788 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Italic.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,788 - findfont: score(<Font 'cmtt10' (cmtt10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,788 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-BoldOblique.ttf) oblique normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,788 - findfont: score(<Font 'STIXSizeThreeSym' (STIXSizThreeSymBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,788 - findfont: score(<Font 'cmr10' (cmr10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,789 - findfont: score(<Font 'DejaVu Sans Mono' (DejaVuSansMono-Oblique.ttf) oblique normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,789 - findfont: score(<Font 'cmmi10' (cmmi10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,789 - findfont: score(<Font 'STIXGeneral' (STIXGeneralBol.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,789 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-Bold.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,790 - findfont: score(<Font 'STIXGeneral' (STIXGeneralBolIta.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,790 - findfont: score(<Font 'DejaVu Serif' (DejaVuSerif-BoldItalic.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,790 - findfont: score(<Font 'STIXSizeFiveSym' (STIXSizFiveSymReg.ttf) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,790 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans.ttf) normal normal 400 normal>) = 0.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,791 - findfont: score(<Font 'cmss10' (cmss10.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,791 - findfont: score(<Font 'DejaVu Sans' (DejaVuSans-BoldOblique.ttf) oblique normal 700 normal>) = 1.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,791 - findfont: score(<Font 'STIXNonUnicode' (STIXNonUniBolIta.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,791 - findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal demi normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,792 - findfont: score(<Font 'Sanskrit Text' (Sanskr.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,792 - findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal black normal>) = 11.525
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,792 - findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,792 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,793 - findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,793 - findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,793 - findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,793 - findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,794 - findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,794 - findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,794 - findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,794 - findfont: score(<Font 'Utsaah' (utsaahb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,795 - findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,795 - findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,795 - findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,795 - findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,796 - findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,796 - findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,796 - findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,796 - findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,797 - findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,797 - findfont: score(<Font 'Corbel' (corbell.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,797 - findfont: score(<Font 'Microsoft YaHei' (msyhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,797 - findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,798 - findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,798 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,798 - findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,798 - findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,799 - findfont: score(<Font 'Rockwell' (ROCKI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,799 - findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,799 - findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,799 - findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,800 - findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,800 - findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,800 - findfont: score(<Font 'Candara' (Candarali.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,800 - findfont: score(<Font 'Franklin Gothic Demi' (FRADMIT.TTF) italic normal demi normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,801 - findfont: score(<Font 'Bookman Old Style' (BOOKOSBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,801 - findfont: score(<Font 'Arial' (ariblk.ttf) normal normal black normal>) = 6.888636363636364
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,801 - findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,801 - findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,802 - findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,802 - findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,802 - findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,802 - findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,803 - findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,803 - findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,803 - findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,803 - findfont: score(<Font 'SketchFlow Print' (SketchFlow Print.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,804 - findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,804 - findfont: score(<Font 'Century Schoolbook' (CENSCBK.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,804 - findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,805 - findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,805 - findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,805 - findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,805 - findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,806 - findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,806 - findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal roman normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,806 - findfont: score(<Font 'Times New Roman' (timesi.ttf) italic normal roman normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,807 - findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,807 - findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,807 - findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,807 - findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,808 - findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,808 - findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,808 - findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,808 - findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,809 - findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,809 - findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,809 - findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,810 - findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,810 - findfont: score(<Font 'Century Schoolbook' (SCHLBKBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,810 - findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,810 - findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,811 - findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,811 - findfont: score(<Font 'Times New Roman' (times.ttf) normal normal roman normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,811 - findfont: score(<Font 'Utsaah' (utsaahb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,811 - findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,812 - findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,812 - findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal semibold normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,812 - findfont: score(<Font 'Trebuchet MS' (trebucbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,812 - findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,813 - findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,813 - findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,813 - findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,814 - findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,814 - findfont: score(<Font 'Vivaldi' (VIVALDII.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,814 - findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,814 - findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,815 - findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,815 - findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,815 - findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal roman normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,815 - findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,816 - findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,816 - findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,816 - findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,816 - findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal bold condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,817 - findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,817 - findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,817 - findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,817 - findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,818 - findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,818 - findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,818 - findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,818 - findfont: score(<Font 'Utsaah' (utsaahi.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,819 - findfont: score(<Font 'Wingdings' (wingding.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,819 - findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,819 - findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,819 - findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,820 - findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,820 - findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,820 - findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,820 - findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,821 - findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,821 - findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal medium condensed>) = 10.344999999999999
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,821 - findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,822 - findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,822 - findfont: score(<Font 'Aparajita' (aparajbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,822 - findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,822 - findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,823 - findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,823 - findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,823 - findfont: score(<Font 'Bookman Old Style' (BOOKOSB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,823 - findfont: score(<Font 'Arial Unicode MS' (ARIALUNI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,824 - findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,824 - findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,824 - findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,825 - findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,825 - findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,825 - findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,826 - findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,826 - findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,826 - findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,826 - findfont: score(<Font 'Agency FB' (AGENCYB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,827 - findfont: score(<Font 'Bookshelf Symbol 7' (BSSYM7.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,827 - findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,827 - findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,828 - findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,828 - findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,828 - findfont: score(<Font 'Book Antiqua' (ANTQUAI.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,828 - findfont: score(<Font 'Gill Sans Ultra Bold' (GILSANUB.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,829 - findfont: score(<Font 'Courier New' (couri.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,829 - findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,829 - findfont: score(<Font 'Utsaah' (utsaah.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,829 - findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,830 - findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,830 - findfont: score(<Font 'SketchFlow Print' (SketchFlow Print.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,830 - findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,831 - findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,831 - findfont: score(<Font 'Bernard MT Condensed' (BERNHC.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,831 - findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,831 - findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,832 - findfont: score(<Font 'Berlin Sans FB Demi' (BRLNSDB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,832 - findfont: score(<Font 'Elephant' (ELEPHNTI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,832 - findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,832 - findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,833 - findfont: score(<Font 'Lucida Sans' (LSANS.TTF) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,833 - findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,833 - findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,833 - findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,834 - findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,834 - findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,834 - findfont: score(<Font 'Segoe Script' (segoescb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,834 - findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,835 - findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,835 - findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal demi normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,835 - findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,835 - findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,836 - findfont: score(<Font 'Lucida Console' (lucon.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,836 - findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal heavy normal>) = 10.43
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,836 - findfont: score(<Font 'Bodoni MT' (BOD_CI.TTF) italic normal 400 condensed>) = 11.25
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,836 - findfont: score(<Font 'Jokerman' (JOKERMAN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,836 - findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,837 - findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,837 - findfont: score(<Font 'Californian FB' (CALIFR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,837 - findfont: score(<Font 'MT Extra' (mtextra.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,837 - findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,838 - findfont: score(<Font 'Courier New' (courbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,838 - findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,838 - findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,838 - findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,839 - findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,839 - findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,839 - findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,839 - findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,840 - findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,840 - findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,840 - findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal demi condensed>) = 10.44
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,841 - findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,841 - findfont: score(<Font 'Bell MT' (BELL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,841 - findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,841 - findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,842 - findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,842 - findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal black normal>) = 11.525
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,842 - findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,843 - findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,843 - findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,843 - findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,843 - findfont: score(<Font 'Microsoft Yi Baiti' (msyi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,844 - findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,844 - findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,844 - findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,844 - findfont: score(<Font 'Franklin Gothic Medium Cond' (FRAMDCN.TTF) normal normal medium condensed>) = 10.344999999999999
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,845 - findfont: score(<Font 'Gill Sans MT' (GILBI___.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,845 - findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,845 - findfont: score(<Font 'Verdana' (verdanaz.ttf) italic normal 700 normal>) = 4.971363636363637
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,845 - findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,846 - findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,846 - findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,846 - findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,847 - findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,847 - findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,847 - findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,847 - findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,848 - findfont: score(<Font 'Tw Cen MT Condensed Extra Bold' (TCCEB.TTF) normal normal bold condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,848 - findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,848 - findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,848 - findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,849 - findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,849 - findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,849 - findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,849 - findfont: score(<Font 'Segoe Marker' (SegoeMarker.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,850 - findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,850 - findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,850 - findfont: score(<Font 'Source Code Pro' (SourceCodePro-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,851 - findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,851 - findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal heavy normal>) = 11.43
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,851 - findfont: score(<Font 'Tw Cen MT' (TCMI____.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,851 - findfont: score(<Font 'Cooper Black' (COOPBL.TTF) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,851 - findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,852 - findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,852 - findfont: score(<Font 'Buxton Sketch' (BuxtonSketch.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,852 - findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,852 - findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,853 - findfont: score(<Font 'Lucida Calligraphy' (LCALLIG.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,853 - findfont: score(<Font 'Modern No. 20' (MOD20.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,853 - findfont: score(<Font 'Courier New' (courbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,853 - findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,854 - findfont: score(<Font 'Bauhaus 93' (BAUHS93.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,854 - findfont: score(<Font 'Niagara Solid' (NIAGSOL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,854 - findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,854 - findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal semibold normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,855 - findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,855 - findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,855 - findfont: score(<Font 'Chiller' (CHILLER.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,855 - findfont: score(<Font 'Franklin Gothic Heavy' (FRAHVIT.TTF) italic normal heavy normal>) = 11.43
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,856 - findfont: score(<Font 'Century' (CENTURY.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,856 - findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,856 - findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,856 - findfont: score(<Font 'Consolas' (consolab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,857 - findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,857 - findfont: score(<Font 'Cambria' (cambriaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,857 - findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,858 - findfont: score(<Font 'Bodoni MT' (BOD_PSTC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,858 - findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,858 - findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,858 - findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal medium normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,859 - findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,859 - findfont: score(<Font 'Poor Richard' (POORICH.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,859 - findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,859 - findfont: score(<Font 'Gloucester MT Extra Condensed' (GLECB.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,860 - findfont: score(<Font 'Monotype Corsiva' (MTCORSVA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,860 - findfont: score(<Font 'Aparajita' (aparaji.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,860 - findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,861 - findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,861 - findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,861 - findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,861 - findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,861 - findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal demi normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,862 - findfont: score(<Font 'Ebrima' (ebrimabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,862 - findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,862 - findfont: score(<Font 'Shivaji01' (Shivaji01.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,863 - findfont: score(<Font 'Palatino Linotype' (palab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,863 - findfont: score(<Font 'Arial' (ARIALN.TTF) normal normal 400 condensed>) = 6.613636363636363
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,863 - findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,863 - findfont: score(<Font 'Malgun Gothic' (malgun.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,864 - findfont: score(<Font 'Book Antiqua' (ANTQUABI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,864 - findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,864 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,864 - findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,865 - findfont: score(<Font 'Onyx' (ONYX.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,865 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,865 - findfont: score(<Font 'Marlett' (marlett.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,866 - findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,866 - findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,866 - findfont: score(<Font 'Corbel' (corbeli.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,866 - findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,867 - findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,867 - findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,867 - findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,867 - findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,868 - findfont: score(<Font 'Aparajita' (aparajb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,868 - findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,868 - findfont: score(<Font 'Kristen ITC' (ITCKRIST.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,869 - findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,869 - findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,869 - findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,869 - findfont: score(<Font 'Trebuchet MS' (trebuc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,870 - findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,870 - findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal bold condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,870 - findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,870 - findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,871 - findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,871 - findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,871 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,871 - findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,872 - findfont: score(<Font 'Microsoft PhagsPa' (phagspab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,872 - findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,872 - findfont: score(<Font 'Rockwell Extra Bold' (ROCKEB.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,872 - findfont: score(<Font 'Franklin Gothic Medium' (framdit.ttf) italic normal medium normal>) = 11.145
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,873 - findfont: score(<Font 'Calisto MT' (CALIST.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,873 - findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,873 - findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,873 - findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,874 - findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,874 - findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,874 - findfont: score(<Font 'Eras Bold ITC' (ERASBD.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,875 - findfont: score(<Font 'Kokila' (kokilab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,875 - findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,875 - findfont: score(<Font 'Ravie' (RAVIE.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,875 - findfont: score(<Font 'Mangal' (mangal.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,876 - findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,876 - findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,876 - findfont: score(<Font 'Calibri' (calibril.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,876 - findfont: score(<Font 'Consolas' (consolai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,877 - findfont: score(<Font 'Constantia' (constani.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,877 - findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,877 - findfont: score(<Font 'Harlow Solid Italic' (HARLOWSI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,877 - findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,878 - findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,878 - findfont: score(<Font 'Aparajita' (aparajb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,878 - findfont: score(<Font 'Ebrima' (ebrima.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,878 - findfont: score(<Font 'Calibri' (calibrili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,879 - findfont: score(<Font 'Playbill' (PLAYBILL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,879 - findfont: score(<Font 'Utsaah' (utsaahi.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,879 - findfont: score(<Font 'Buxton Sketch' (BuxtonSketch.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,879 - findfont: score(<Font 'Wingdings 2' (WINGDNG2.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,880 - findfont: score(<Font 'Aparajita' (aparaj.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,880 - findfont: score(<Font 'Times New Roman' (timesbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,880 - findfont: score(<Font 'Microsoft Himalaya' (himalaya.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,880 - findfont: score(<Font 'Kokila' (kokilai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,881 - findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,881 - findfont: score(<Font 'Source Code Pro' (SourceCodePro-Regular.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,881 - findfont: score(<Font 'TeamViewer13' (teamviewer13.otf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,881 - findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,882 - findfont: score(<Font 'Kokila' (kokilab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,882 - findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,882 - findfont: score(<Font 'Stencil' (STENCIL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,882 - findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,883 - findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,883 - findfont: score(<Font 'Segoe Marker' (SegoeMarker.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,883 - findfont: score(<Font 'Sitka Small' (SitkaI.ttc) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,884 - findfont: score(<Font 'Californian FB' (CALIFI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,884 - findfont: score(<Font 'Segoe UI' (segoeuiz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,884 - findfont: score(<Font 'Lucida Bright' (LBRITEI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,884 - findfont: score(<Font 'Lucida Fax' (LFAXD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,885 - findfont: score(<Font 'Segoe MDL2 Assets' (segmdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,885 - findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,885 - findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,885 - findfont: score(<Font 'Gill Sans MT Ext Condensed Bold' (GLSNECB.TTF) normal normal bold condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,886 - findfont: score(<Font 'Wingdings 3' (WINGDNG3.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,886 - findfont: score(<Font 'Candara' (Candaral.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,886 - findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,886 - findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,887 - findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,887 - findfont: score(<Font 'Franklin Gothic Demi' (FRADM.TTF) normal normal demi normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,887 - findfont: score(<Font 'Segoe UI' (seguisb.ttf) normal normal semibold normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,887 - findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,888 - findfont: score(<Font 'Perpetua' (PERB____.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,888 - findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,888 - findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,888 - findfont: score(<Font 'Lucida Sans' (LSANSD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,889 - findfont: score(<Font 'Yu Gothic' (YuGothM.ttc) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,889 - findfont: score(<Font 'Bodoni MT' (BOD_I.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,889 - findfont: score(<Font 'Juice ITC' (JUICE___.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,889 - findfont: score(<Font 'Niagara Engraved' (NIAGENG.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,890 - findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,890 - findfont: score(<Font 'MS Reference Sans Serif' (REFSAN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,890 - findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,890 - findfont: score(<Font 'Corbel' (corbell.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,891 - findfont: score(<Font 'Maiandra GD' (MAIAN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,891 - findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,891 - findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,892 - findfont: score(<Font 'Segoe UI' (seguibli.ttf) italic normal black normal>) = 11.525
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,892 - findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,892 - findfont: score(<Font 'Book Antiqua' (ANTQUAB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,892 - findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,893 - findfont: score(<Font 'Goudy Old Style' (GOUDOSI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,893 - findfont: score(<Font 'High Tower Text' (HTOWERT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,893 - findfont: score(<Font 'High Tower Text' (HTOWERTI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,893 - findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,894 - findfont: score(<Font 'Rockwell' (ROCKB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,894 - findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,894 - findfont: score(<Font 'OCR A Extended' (OCRAEXT.TTF) normal normal 400 expanded>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,894 - findfont: score(<Font 'Blackadder ITC' (ITCBLKAD.TTF) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,895 - findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,895 - findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,895 - findfont: score(<Font 'Broadway' (BROADW.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,895 - findfont: score(<Font 'Eras Demi ITC' (ERASDEMI.TTF) normal normal demi normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,896 - findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,896 - findfont: score(<Font 'Century Gothic' (GOTHIC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,896 - findfont: score(<Font 'Bradley Hand ITC' (BRADHITC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,896 - findfont: score(<Font 'Book Antiqua' (BKANT.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,897 - findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,897 - findfont: score(<Font 'Sitka Small' (SitkaB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,897 - findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,897 - findfont: score(<Font 'Old English Text MT' (OLDENGL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,897 - findfont: score(<Font 'Utsaah' (utsaah.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,898 - findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,898 - findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,898 - findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,898 - findfont: score(<Font 'Tw Cen MT Condensed' (TCCB____.TTF) normal normal 700 condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,899 - findfont: score(<Font 'Perpetua Titling MT' (PERTIBD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,899 - findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,899 - findfont: score(<Font 'Kokila' (kokila.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,899 - findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,900 - findfont: score(<Font 'Mangal' (mangalb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,900 - findfont: score(<Font 'Lucida Sans' (LSANSDI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,900 - findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,900 - findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,901 - findfont: score(<Font 'MT Extra' (mtextra.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,901 - findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,901 - findfont: score(<Font 'Felix Titling' (FELIXTI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,901 - findfont: score(<Font 'MV Boli' (mvboli.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,902 - findfont: score(<Font 'Verdana' (verdanab.ttf) normal normal 700 normal>) = 3.9713636363636367
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,902 - findfont: score(<Font 'Arial' (arialbi.ttf) italic normal 700 normal>) = 7.698636363636363
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,902 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEO.TTF) oblique normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,902 - findfont: score(<Font 'Shivaji05' (Shivaji05.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,903 - findfont: score(<Font 'Verdana' (verdana.ttf) normal normal 400 normal>) = 3.6863636363636365
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,903 - findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,903 - findfont: score(<Font 'Rage Italic' (RAGE.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,903 - findfont: score(<Font 'Mangal' (mangal.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,904 - findfont: score(<Font 'Gill Sans MT' (GILI____.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,904 - findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,904 - findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,904 - findfont: score(<Font 'Arial' (ARIALNBI.TTF) italic normal 700 condensed>) = 7.8986363636363635
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,905 - findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,905 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailu.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,905 - findfont: score(<Font 'Berlin Sans FB' (BRLNSR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,906 - findfont: score(<Font 'Matura MT Script Capitals' (MATURASC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,906 - findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,906 - findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,906 - findfont: score(<Font 'Franklin Gothic Demi Cond' (FRADMCN.TTF) normal normal demi condensed>) = 10.44
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,907 - findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,907 - findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,907 - findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,907 - findfont: score(<Font 'Shivaji02' (Shivaji02.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,908 - findfont: score(<Font 'Californian FB' (CALIFB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,908 - findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,908 - findfont: score(<Font 'Lucida Handwriting' (LHANDW.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,909 - findfont: score(<Font 'Candara' (Candara.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,909 - findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,909 - findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,909 - findfont: score(<Font 'Haettenschweiler' (HATTEN.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,910 - findfont: score(<Font 'Goudy Old Style' (GOUDOSB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,910 - findfont: score(<Font 'Segoe UI' (segoeuisl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,910 - findfont: score(<Font 'Aparajita' (aparaj.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,910 - findfont: score(<Font 'Nirmala UI' (Nirmala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,911 - findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,911 - findfont: score(<Font 'Palatino Linotype' (palai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,911 - findfont: score(<Font 'Tempus Sans ITC' (TEMPSITC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,911 - findfont: score(<Font 'Utsaah' (utsaahbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,912 - findfont: score(<Font 'Goudy Stout' (GOUDYSTO.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,912 - findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,912 - findfont: score(<Font 'Arial Rounded MT Bold' (ARLRDBD.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,913 - findfont: score(<Font 'Constantia' (constan.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,913 - findfont: score(<Font 'Aparajita' (aparaji.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,913 - findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,913 - findfont: score(<Font 'Candara' (Candarali.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,914 - findfont: score(<Font 'Malgun Gothic' (malgunbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,914 - findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,914 - findfont: score(<Font 'Trebuchet MS' (trebucit.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,915 - findfont: score(<Font 'Script MT Bold' (SCRIPTBL.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,915 - findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,915 - findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,915 - findfont: score(<Font 'MS Outlook' (OUTLOOK.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,915 - findfont: score(<Font 'Cambria' (cambria.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,916 - findfont: score(<Font 'Century Gothic' (GOTHICBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,916 - findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,916 - findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,916 - findfont: score(<Font 'Kokila' (kokila.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,917 - findfont: score(<Font 'Palace Script MT' (PALSCRI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,917 - findfont: score(<Font 'Eras Medium ITC' (ERASMD.TTF) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,917 - findfont: score(<Font 'Elephant' (ELEPHNT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,917 - findfont: score(<Font 'Forte' (FORTE.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,918 - findfont: score(<Font 'Nirmala UI' (NirmalaB.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,918 - findfont: score(<Font 'Century Schoolbook' (SCHLBKI.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,918 - findfont: score(<Font 'Symbol' (symbol.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,918 - findfont: score(<Font 'Century Gothic' (GOTHICI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,919 - findfont: score(<Font 'Segoe UI' (segoeui.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,919 - findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,919 - findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,919 - findfont: score(<Font 'Georgia' (georgia.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,920 - findfont: score(<Font 'Calisto MT' (CALISTBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,920 - findfont: score(<Font 'Wide Latin' (LATINWD.TTF) normal normal 400 expanded>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,920 - findfont: score(<Font 'Arial' (ARIALNI.TTF) italic normal 400 condensed>) = 7.613636363636363
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,921 - findfont: score(<Font 'Lucida Sans' (LSANSI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,921 - findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,921 - findfont: score(<Font 'Tahoma' (tahomabd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,921 - findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,922 - findfont: score(<Font 'Berlin Sans FB' (BRLNSB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,922 - findfont: score(<Font 'Segoe Script' (segoesc.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,922 - findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,922 - findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,923 - findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,923 - findfont: score(<Font 'Baskerville Old Face' (BASKVILL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,923 - findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,924 - findfont: score(<Font 'Georgia' (georgiaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,924 - findfont: score(<Font 'Eras Light ITC' (ERASLGHT.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,924 - findfont: score(<Font 'TeamViewer13' (teamviewer13.otf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,925 - findfont: score(<Font 'Mangal' (mangalb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,925 - findfont: score(<Font 'Centaur' (CENTAUR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,925 - findfont: score(<Font 'Arial' (arial.ttf) normal normal 400 normal>) = 6.413636363636363
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,925 - findfont: score(<Font 'Calibri' (calibril.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,926 - findfont: score(<Font 'Segoe UI' (seguibl.ttf) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,926 - findfont: score(<Font 'Bodoni MT' (BOD_BLAI.TTF) italic normal black normal>) = 11.525
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,926 - findfont: score(<Font 'Britannic Bold' (BRITANIC.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,926 - findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,927 - findfont: score(<Font 'Palatino Linotype' (pala.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,927 - findfont: score(<Font 'Comic Sans MS' (comic.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,927 - findfont: score(<Font 'Cambria' (cambriab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,927 - findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,928 - findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,928 - findfont: score(<Font 'Kokila' (kokilai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,928 - findfont: score(<Font 'Microsoft JhengHei' (msjh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,928 - findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,929 - findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,929 - findfont: score(<Font 'Microsoft PhagsPa' (phagspa.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,929 - findfont: score(<Font 'Verdana' (verdanai.ttf) italic normal 400 normal>) = 4.6863636363636365
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,929 - findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,930 - findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,930 - findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,930 - findfont: score(<Font 'Microsoft JhengHei' (msjhbd.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,931 - findfont: score(<Font 'Comic Sans MS' (comicbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,931 - findfont: score(<Font 'Kunstler Script' (KUNSTLER.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,931 - findfont: score(<Font 'Franklin Gothic Medium' (framd.ttf) normal normal medium normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,931 - findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,932 - findfont: score(<Font 'Aparajita' (aparajbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,932 - findfont: score(<Font 'Footlight MT Light' (FTLTLT.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,932 - findfont: score(<Font 'Calibri' (calibrii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,932 - findfont: score(<Font 'Calibri' (calibrib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,933 - findfont: score(<Font 'Impact' (impact.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,933 - findfont: score(<Font 'Yu Gothic' (YuGothB.ttc) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,933 - findfont: score(<Font 'Lucida Sans Unicode' (l_10646.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,933 - findfont: score(<Font 'Castellar' (CASTELAR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,934 - findfont: score(<Font 'Shivaji02' (Shivaji02.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,934 - findfont: score(<Font 'Lucida Bright' (LBRITE.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,934 - findfont: score(<Font 'Perpetua' (PERI____.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,934 - findfont: score(<Font 'Nirmala UI' (NirmalaS.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,935 - findfont: score(<Font 'Times New Roman' (timesbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,935 - findfont: score(<Font 'Shivaji01' (Shivaji01.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,935 - findfont: score(<Font 'MS Gothic' (msgothic.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,936 - findfont: score(<Font 'HoloLens MDL2 Assets' (holomdl2.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,936 - findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,936 - findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,936 - findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,937 - findfont: score(<Font 'Lucida Bright' (LBRITEDI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,937 - findfont: score(<Font 'Leelawadee UI' (LeelaUIb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,937 - findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,937 - findfont: score(<Font 'Kokila' (kokilabi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,937 - findfont: score(<Font 'Javanese Text' (javatext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,938 - findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,938 - findfont: score(<Font 'Perpetua' (PER_____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,938 - findfont: score(<Font 'Kokila' (kokilabi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,938 - findfont: score(<Font 'Georgia' (georgiai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,939 - findfont: score(<Font 'Consolas' (consolaz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,939 - findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,939 - findfont: score(<Font 'Snap ITC' (SNAP____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,939 - findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,940 - findfont: score(<Font 'Segoe UI' (segoeuib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,940 - findfont: score(<Font 'Garamond' (GARA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,940 - findfont: score(<Font 'Arial Unicode MS' (ARIALUNI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,941 - findfont: score(<Font 'Yu Gothic' (YuGothR.ttc) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,941 - findfont: score(<Font 'Segoe UI' (seguisli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,941 - findfont: score(<Font 'Bodoni MT' (BOD_CBI.TTF) italic normal 700 condensed>) = 11.535
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,941 - findfont: score(<Font 'Calibri' (calibri.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,941 - findfont: score(<Font 'Gadugi' (gadugi.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,942 - findfont: score(<Font 'SimSun' (simsun.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,942 - findfont: score(<Font 'Harrington' (HARNGTON.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,942 - findfont: score(<Font 'Tw Cen MT' (TCBI____.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,943 - findfont: score(<Font 'Parchment' (PARCHM.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,943 - findfont: score(<Font 'Sitka Small' (SitkaZ.ttc) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,943 - findfont: score(<Font 'Informal Roman' (INFROMAN.TTF) normal normal roman normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,943 - findfont: score(<Font 'Century Schoolbook' (SCHLBKB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,944 - findfont: score(<Font 'Garamond' (GARABD.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,944 - findfont: score(<Font 'Perpetua' (PERBI___.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,944 - findfont: score(<Font 'Viner Hand ITC' (VINERITC.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,944 - findfont: score(<Font 'Gill Sans MT' (GILB____.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,945 - findfont: score(<Font 'Tw Cen MT' (TCB_____.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,945 - findfont: score(<Font 'Gadugi' (gadugib.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,945 - findfont: score(<Font 'Bodoni MT' (BOD_B.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,946 - findfont: score(<Font 'Rockwell' (ROCKBI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,946 - findfont: score(<Font 'Bodoni MT' (BOD_CB.TTF) normal normal 700 condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,946 - findfont: score(<Font 'Goudy Old Style' (GOUDOS.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,946 - findfont: score(<Font 'Myanmar Text' (mmrtextb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,947 - findfont: score(<Font 'Copperplate Gothic Light' (COPRGTL.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,947 - findfont: score(<Font 'Sylfaen' (sylfaen.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,947 - findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal bold condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,947 - findfont: score(<Font 'Brush Script MT' (BRUSHSCI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,948 - findfont: score(<Font 'Franklin Gothic Book' (FRABKIT.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,948 - findfont: score(<Font 'Arial' (ARIALNB.TTF) normal normal 700 condensed>) = 6.8986363636363635
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,948 - findfont: score(<Font 'Gill Sans Ultra Bold Condensed' (GILLUBCD.TTF) normal normal bold condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,948 - findfont: score(<Font 'Sitka Small' (Sitka.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,949 - findfont: score(<Font 'Tw Cen MT Condensed' (TCCM____.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,949 - findfont: score(<Font 'Trebuchet MS' (trebucbd.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,949 - findfont: score(<Font 'Palatino Linotype' (palabi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,949 - findfont: score(<Font 'Constantia' (constanz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,950 - findfont: score(<Font 'Calisto MT' (CALISTB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,950 - findfont: score(<Font 'Utsaah' (utsaahbi.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,950 - findfont: score(<Font 'Freestyle Script' (FREESCPT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,951 - findfont: score(<Font 'Candara' (Candarai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,951 - findfont: score(<Font 'Tahoma' (tahoma.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,951 - findfont: score(<Font 'Segoe UI' (seguisbi.ttf) italic normal semibold normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,951 - findfont: score(<Font 'Candara' (Candarab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,952 - findfont: score(<Font 'Mongolian Baiti' (monbaiti.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,952 - findfont: score(<Font 'Microsoft JhengHei' (msjhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,952 - findfont: score(<Font 'French Script MT' (FRSCRIPT.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,952 - findfont: score(<Font 'Edwardian Script ITC' (ITCEDSCR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,953 - findfont: score(<Font 'Comic Sans MS' (comici.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,953 - findfont: score(<Font 'Arial' (arialbd.ttf) normal normal 700 normal>) = 6.698636363636363
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,953 - findfont: score(<Font 'Rockwell Condensed' (ROCC____.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,954 - findfont: score(<Font 'Copperplate Gothic Bold' (COPRGTB.TTF) normal normal bold normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,954 - findfont: score(<Font 'Franklin Gothic Heavy' (FRAHV.TTF) normal normal heavy normal>) = 10.43
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,954 - findfont: score(<Font 'Rockwell' (ROCK.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,954 - findfont: score(<Font 'Vladimir Script' (VLADIMIR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,955 - findfont: score(<Font 'Cambria' (cambriai.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,955 - findfont: score(<Font 'Consolas' (consola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,955 - findfont: score(<Font 'Gigi' (GIGI.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,956 - findfont: score(<Font 'Gabriola' (Gabriola.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,956 - findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,956 - findfont: score(<Font 'Bell MT' (BELLB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,956 - findfont: score(<Font 'Candara' (Candaral.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,957 - findfont: score(<Font 'Ink Free' (Inkfree.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,957 - findfont: score(<Font 'Microsoft YaHei' (msyhl.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,957 - findfont: score(<Font 'Century Gothic' (GOTHICB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,958 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,958 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,958 - findfont: score(<Font 'Constantia' (constanb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,958 - findfont: score(<Font 'Segoe UI Emoji' (seguiemj.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,959 - findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,959 - findfont: score(<Font 'Showcard Gothic' (SHOWG.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,959 - findfont: score(<Font 'Yu Gothic' (YuGothL.ttc) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,959 - findfont: score(<Font 'Mistral' (MISTRAL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,960 - findfont: score(<Font 'Myanmar Text' (mmrtext.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,960 - findfont: score(<Font 'Lucida Fax' (LFAX.TTF) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,960 - findfont: score(<Font 'Courier New' (cour.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,960 - findfont: score(<Font 'Shivaji05' (Shivaji05.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,961 - findfont: score(<Font 'Perpetua Titling MT' (PERTILI.TTF) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,961 - findfont: score(<Font 'Bahnschrift' (bahnschrift.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,961 - findfont: score(<Font 'Arial' (ariali.ttf) italic normal 400 normal>) = 7.413636363636363
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,961 - findfont: score(<Font 'Leelawadee UI' (LeelawUI.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,962 - findfont: score(<Font 'Bodoni MT' (BOD_BLAR.TTF) normal normal black normal>) = 10.525
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,962 - findfont: score(<Font 'Microsoft YaHei' (msyh.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,962 - findfont: score(<Font 'Tw Cen MT' (TCM_____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,962 - findfont: score(<Font 'Gill Sans MT Condensed' (GILC____.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,963 - findfont: score(<Font 'Bodoni MT' (BOD_CR.TTF) normal normal 400 condensed>) = 10.25
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,963 - findfont: score(<Font 'Webdings' (webdings.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,963 - findfont: score(<Font 'Algerian' (ALGER.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,964 - findfont: score(<Font 'Rockwell Condensed' (ROCCB___.TTF) normal normal 700 condensed>) = 10.535
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,964 - findfont: score(<Font 'Lucida Fax' (LFAXDI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,964 - findfont: score(<Font 'MingLiU-ExtB' (mingliub.ttc) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,964 - findfont: score(<Font 'Microsoft Tai Le' (taileb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,965 - findfont: score(<Font 'Malgun Gothic' (malgunsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,965 - findfont: score(<Font 'Lucida Bright' (LBRITED.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,965 - findfont: score(<Font 'Segoe UI Historic' (seguihis.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,965 - findfont: score(<Font 'Leelawadee UI' (LeelUIsl.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,966 - findfont: score(<Font 'Times New Roman' (times.ttf) normal normal roman normal>) = 10.145
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,966 - findfont: score(<Font 'Comic Sans MS' (comicz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,966 - findfont: score(<Font 'Segoe Print' (segoepr.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,967 - findfont: score(<Font 'Colonna MT' (COLONNA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,967 - findfont: score(<Font 'Segoe UI' (seguili.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,967 - findfont: score(<Font 'Papyrus' (PAPYRUS.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,967 - findfont: score(<Font 'Bell MT' (BELLI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,968 - findfont: score(<Font 'Calibri' (calibriz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,968 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPE.TTF) normal normal regular normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,968 - findfont: score(<Font 'Segoe Print' (segoeprb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,968 - findfont: score(<Font 'MS Reference Specialty' (REFSPCL.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,969 - findfont: score(<Font 'Georgia' (georgiab.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,969 - findfont: score(<Font 'Bodoni MT' (BOD_R.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,969 - findfont: score(<Font 'Bookman Old Style' (BOOKOSI.TTF) italic normal book normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,969 - findfont: score(<Font 'Engravers MT' (ENGR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,970 - findfont: score(<Font 'Corbel' (corbelli.ttf) italic normal light normal>) = 11.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,970 - findfont: score(<Font 'Pristina' (PRISTINA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,970 - findfont: score(<Font 'Imprint MT Shadow' (IMPRISHA.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,970 - findfont: score(<Font 'Bodoni MT' (BOD_BI.TTF) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,971 - findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,971 - findfont: score(<Font 'Lucida Sans Typewriter' (LTYPEBO.TTF) oblique normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,971 - findfont: score(<Font 'Candara' (Candaraz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,972 - findfont: score(<Font 'Magneto' (MAGNETOB.TTF) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,972 - findfont: score(<Font 'Microsoft Sans Serif' (micross.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,972 - findfont: score(<Font 'Corbel' (corbel.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,972 - findfont: score(<Font 'Garamond' (GARAIT.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,973 - findfont: score(<Font 'Curlz MT' (CURLZ___.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,973 - findfont: score(<Font 'Segoe UI Symbol' (seguisym.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,973 - findfont: score(<Font 'Segoe UI' (segoeuii.ttf) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,974 - findfont: score(<Font 'Agency FB' (AGENCYR.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,974 - findfont: score(<Font 'Segoe UI' (segoeuil.ttf) normal normal light normal>) = 10.24
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,974 - findfont: score(<Font 'SimSun-ExtB' (simsunb.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,975 - findfont: score(<Font 'Corbel' (corbelb.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,975 - findfont: score(<Font 'Franklin Gothic Book' (FRABK.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,975 - findfont: score(<Font 'Sanskrit Text' (Sanskr.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,975 - findfont: score(<Font 'Microsoft Tai Le' (taile.ttf) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,976 - findfont: score(<Font 'Calisto MT' (CALISTI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,976 - findfont: score(<Font 'Arial' (ariblk.ttf) normal normal black normal>) = 6.888636363636364
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,976 - findfont: score(<Font 'Corbel' (corbelz.ttf) italic normal 700 normal>) = 11.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,976 - findfont: score(<Font 'Gill Sans MT' (GIL_____.TTF) normal normal 400 normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,977 - findfont: score(<Font 'Microsoft New Tai Lue' (ntailub.ttf) normal normal 700 normal>) = 10.335
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,977 - findfont: score(<Font 'Bookman Old Style' (BOOKOS.TTF) normal normal book normal>) = 10.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,977 - findfont: score(<Font 'Lucida Fax' (LFAXI.TTF) italic normal 400 normal>) = 11.05
DEBUG matplotlib.font_manager 2020-07-10 12:01:23,977 - findfont: Matching sans\-serif:style=normal:variant=normal:weight=normal:stretch=normal:size=10.0 to DejaVu Sans ('C:\\Users\\Personnal\\AppData\\Local\\Programs\\Python\\Python38\\lib\\site-packages\\matplotlib\\mpl-data\\fonts\\ttf\\DejaVuSans.ttf') with score of 0.050000.
INFO admin1 2020-07-10 12:01:24,086 - Performed clustering successfully
INFO werkzeug 2020-07-10 12:01:24,087 - 127.0.0.1 - - [10/Jul/2020 12:01:24] "[37mPOST /clustering/kmeans?k=4&format=csv&uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 12:01:24,172 - Requested to get clustering details.
DEBUG admin1 2020-07-10 12:01:24,172 - Reading datafile for clustered data
INFO admin1 2020-07-10 12:01:24,174 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 12:01:24,178 - 127.0.0.1 - - [10/Jul/2020 12:01:24] "[37mGET /clustering/kmeans?uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 12:01:24,193 - Requested to get clustering summary.
DEBUG admin1 2020-07-10 12:01:24,193 - Reading datafile for clustering summary
INFO admin1 2020-07-10 12:01:24,195 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 12:01:24,197 - 127.0.0.1 - - [10/Jul/2020 12:01:24] "[37mGET /clustering/summary?uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 12:01:24,231 - Requested to cluster documents.
DEBUG admin1 2020-07-10 12:01:24,232 - Reading datafile..
DEBUG admin1 2020-07-10 12:01:24,234 - Calculating tf-idf
DEBUG admin1 2020-07-10 12:01:24,309 - Calculating variance threshold
DEBUG admin1 2020-07-10 12:01:24,323 - Applying PCA
DEBUG admin1 2020-07-10 12:01:24,353 - Applying DBSCAN algorithm
DEBUG admin1 2020-07-10 12:01:24,372 - Sorting clusters
DEBUG admin1 2020-07-10 12:01:24,375 - Converting to JSON format
DEBUG admin1 2020-07-10 12:01:24,377 - Exporting clustering results
DEBUG admin1 2020-07-10 12:01:24,380 - Writting summary
DEBUG admin1 2020-07-10 12:01:24,382 - Writting clustering information to datafile
DEBUG admin1 2020-07-10 12:01:24,384 - Getting scatter plot for clustered data
INFO admin1 2020-07-10 12:01:24,575 - Performed clustering successfully
INFO werkzeug 2020-07-10 12:01:24,576 - 127.0.0.1 - - [10/Jul/2020 12:01:24] "[37mPOST /clustering/dbscan?eps=0.3&min=1&format=csv&uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 12:01:24,633 - Requested to get clustering details.
DEBUG admin1 2020-07-10 12:01:24,633 - Reading datafile for clustered data
INFO admin1 2020-07-10 12:01:24,635 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 12:01:24,639 - 127.0.0.1 - - [10/Jul/2020 12:01:24] "[37mGET /clustering/dbscan?uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 12:01:24,701 - Requested to get clustering summary.
DEBUG admin1 2020-07-10 12:01:24,701 - Reading datafile for clustering summary
INFO admin1 2020-07-10 12:01:24,703 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 12:01:24,704 - 127.0.0.1 - - [10/Jul/2020 12:01:24] "[37mGET /clustering/summary?uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 12:01:24,733 - Requested to cluster documents.
DEBUG admin1 2020-07-10 12:01:24,733 - Reading datafile..
DEBUG admin1 2020-07-10 12:01:24,735 - Calculating tf-idf
DEBUG admin1 2020-07-10 12:01:24,800 - Calculating variance threshold
DEBUG admin1 2020-07-10 12:01:24,814 - Applying PCA
DEBUG admin1 2020-07-10 12:01:24,840 - Applying Agglomerative algorithm
DEBUG admin1 2020-07-10 12:01:24,869 - Sorting clusters
DEBUG admin1 2020-07-10 12:01:24,871 - Converting to JSON format
DEBUG admin1 2020-07-10 12:01:24,873 - Exporting clustering results
DEBUG admin1 2020-07-10 12:01:24,883 - Writting summary
DEBUG admin1 2020-07-10 12:01:24,885 - Writting clustering information to datafile
DEBUG admin1 2020-07-10 12:01:24,886 - Getting scatter plot for clustered data
INFO admin1 2020-07-10 12:01:25,069 - Performed clustering successfully
INFO werkzeug 2020-07-10 12:01:25,070 - 127.0.0.1 - - [10/Jul/2020 12:01:25] "[37mPOST /clustering/agglomerative?k=5&format=csv&uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 12:01:25,127 - Requested to get clustering details.
DEBUG admin1 2020-07-10 12:01:25,128 - Reading datafile for clustered data
INFO admin1 2020-07-10 12:01:25,130 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 12:01:25,133 - 127.0.0.1 - - [10/Jul/2020 12:01:25] "[37mGET /clustering/agglomerative?uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 12:01:25,151 - Requested to get clustering summary.
DEBUG admin1 2020-07-10 12:01:25,152 - Reading datafile for clustering summary
INFO admin1 2020-07-10 12:01:25,154 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 12:01:25,156 - 127.0.0.1 - - [10/Jul/2020 12:01:25] "[37mGET /clustering/summary?uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 12:01:25,175 - Requested to cluster documents.
DEBUG admin1 2020-07-10 12:01:25,176 - Reading datafile..
DEBUG admin1 2020-07-10 12:01:25,178 - Calculating tf-idf
DEBUG admin1 2020-07-10 12:01:25,263 - Calculating variance threshold
DEBUG admin1 2020-07-10 12:01:25,282 - Applying PCA
DEBUG admin1 2020-07-10 12:01:25,311 - Applying Birch algorithm
DEBUG admin1 2020-07-10 12:01:25,329 - Sorting clusters
DEBUG admin1 2020-07-10 12:01:25,373 - Converting to JSON format
DEBUG admin1 2020-07-10 12:01:25,375 - Exporting clustering results
DEBUG admin1 2020-07-10 12:01:25,377 - Writting summary
DEBUG admin1 2020-07-10 12:01:25,401 - Writting clustering information to datafile
DEBUG admin1 2020-07-10 12:01:25,403 - Getting scatter plot for clustered data
INFO admin1 2020-07-10 12:01:25,579 - Performed clustering successfully
INFO werkzeug 2020-07-10 12:01:25,580 - 127.0.0.1 - - [10/Jul/2020 12:01:25] "[37mPOST /clustering/birch?k=5&format=csv&uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 12:01:25,638 - Requested to get clustering details.
DEBUG admin1 2020-07-10 12:01:25,639 - Reading datafile for clustered data
INFO admin1 2020-07-10 12:01:25,640 - Get request for clustered data served successfully
INFO werkzeug 2020-07-10 12:01:25,644 - 127.0.0.1 - - [10/Jul/2020 12:01:25] "[37mGET /clustering/birch?uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO admin1 2020-07-10 12:01:25,659 - Requested to get clustering summary.
DEBUG admin1 2020-07-10 12:01:25,659 - Reading datafile for clustering summary
INFO admin1 2020-07-10 12:01:25,661 - Get request for clustering summary served successfully
INFO werkzeug 2020-07-10 12:01:25,663 - 127.0.0.1 - - [10/Jul/2020 12:01:25] "[37mGET /clustering/summary?uname=admin1&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO werkzeug 2020-07-10 12:03:10,369 -  * Detected change in 'C:\\Users\\Personnal\\Documents\\FinIQ\\NLP_Project\\Another\\API\\pre-processing-and-API\\api.py', reloading
INFO werkzeug 2020-07-10 12:03:11,096 -  * Restarting with stat
WARNING werkzeug 2020-07-10 12:03:15,442 -  * Debugger is active!
INFO werkzeug 2020-07-10 12:03:15,454 -  * Debugger PIN: 240-565-176
INFO werkzeug 2020-07-10 12:03:15,472 -  * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
INFO werkzeug 2020-07-10 15:36:14,562 -  * Restarting with stat
WARNING werkzeug 2020-07-10 15:36:21,289 -  * Debugger is active!
INFO werkzeug 2020-07-10 15:36:21,326 -  * Debugger PIN: 240-565-176
INFO werkzeug 2020-07-10 15:36:21,353 -  * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)
INFO vaishnavi 2020-07-10 15:36:34,326 - Requested to extract data.
DEBUG vaishnavi 2020-07-10 15:36:34,344 - Extracted links and ISINs from JSON object.
INFO vaishnavi 2020-07-10 15:36:49,905 - Made entry for extracted data in datafile successfully.
INFO werkzeug 2020-07-10 15:36:49,906 - 127.0.0.1 - - [10/Jul/2020 15:36:49] "[37mPOST /extract?filepath=ISINS_v3.xlsx&no_of_docs=15&uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO vaishnavi 2020-07-10 15:36:49,916 - Requested to export extracted data.
ERROR vaishnavi 2020-07-10 15:36:50,018 - Exception occurred:TypeError("exportexcel() got multiple values for argument 'filename'")
Traceback (most recent call last):
  File "C:\Users\Personnal\Documents\FinIQ\NLP_Project\Another\API\pre-processing-and-API\api.py", line 221, in post
    ex.exportexcel(args['uname'], args['fname'], filename = args['filepath'], datalist = [ISINs, URLs, text])
TypeError: exportexcel() got multiple values for argument 'filename'
INFO werkzeug 2020-07-10 15:36:50,021 - 127.0.0.1 - - [10/Jul/2020 15:36:50] "[31m[1mPOST /extract/export?filepath=extract.xlsx&uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 400 -
INFO vaishnavi 2020-07-10 15:36:50,029 - Requested to pre-process data.
DEBUG vaishnavi 2020-07-10 15:37:08,465 - Pre-processed data
DEBUG vaishnavi 2020-07-10 15:37:08,468 - Made entry of pre-processed data in datafile successfully
INFO werkzeug 2020-07-10 15:37:08,469 - 127.0.0.1 - - [10/Jul/2020 15:37:08] "[37mPOST /preprocess?steps=url&steps=stemming&steps=lemmatization&steps=stopwords&steps=unusual&uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 200 -
INFO vaishnavi 2020-07-10 15:37:08,477 - Requested to export pre-processed data.
DEBUG vaishnavi 2020-07-10 15:37:08,477 - Reading pre-processed datafile.
DEBUG vaishnavi 2020-07-10 15:37:08,495 - Exporting pre-processed data to excel file.
ERROR vaishnavi 2020-07-10 15:37:08,495 - Exception occurred: TypeError("exportexcel() got multiple values for argument 'filename'")
Traceback (most recent call last):
  File "C:\Users\Personnal\Documents\FinIQ\NLP_Project\Another\API\pre-processing-and-API\api.py", line 436, in post
    ex.exportexcel(args['uname'], args['fname'], filename = args['filepath'], datalist = [ISINs, URLs, text])
TypeError: exportexcel() got multiple values for argument 'filename'
INFO werkzeug 2020-07-10 15:37:08,496 - 127.0.0.1 - - [10/Jul/2020 15:37:08] "[31m[1mPOST /preprocess/export?filepath=prep.xlsx&uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 400 -
INFO vaishnavi 2020-07-10 15:37:08,505 - Requested to plot elbow curve.
DEBUG vaishnavi 2020-07-10 15:37:08,506 - Reading datafile..
DEBUG vaishnavi 2020-07-10 15:37:08,506 - Calculating tf-idf
DEBUG vaishnavi 2020-07-10 15:37:08,562 - Calculating variance threshold
DEBUG vaishnavi 2020-07-10 15:37:08,575 - Applying PCA
DEBUG vaishnavi 2020-07-10 15:37:08,597 - Plotting elbow curve
ERROR vaishnavi 2020-07-10 15:37:08,597 - Exception occurred: NameError("name 'Kmeans' is not defined")
Traceback (most recent call last):
  File "C:\Users\Personnal\Documents\FinIQ\NLP_Project\Another\API\pre-processing-and-API\api.py", line 699, in post
    fig, K = kmeans.visualize_elbow(len(ISINs),ratio)
  File "C:\Users\Personnal\Documents\FinIQ\NLP_Project\Another\API\pre-processing-and-API\kmeans.py", line 82, in visualize_elbow
    kmeans_pca = Kmeans(n_clusters=i)
NameError: name 'Kmeans' is not defined
INFO werkzeug 2020-07-10 15:37:08,599 - 127.0.0.1 - - [10/Jul/2020 15:37:08] "[31m[1mPOST /elbow?uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 400 -
INFO vaishnavi 2020-07-10 15:37:08,609 - Requested to get optimal k value
DEBUG vaishnavi 2020-07-10 15:37:08,609 - Reading datafile for optimal k value after elbow method
ERROR vaishnavi 2020-07-10 15:37:08,610 - Error in reading datafile
Traceback (most recent call last):
  File "C:\Users\Personnal\Documents\FinIQ\NLP_Project\Another\API\pre-processing-and-API\api.py", line 744, in get
    data = ex.get_recent_file('elbow_k_' + args['uname'])
  File "C:\Users\Personnal\Documents\FinIQ\NLP_Project\Another\API\pre-processing-and-API\extract.py", line 290, in get_recent_file
    return names[0]
IndexError: list index out of range
INFO werkzeug 2020-07-10 15:37:08,612 - 127.0.0.1 - - [10/Jul/2020 15:37:08] "[31m[1mGET /elbow?uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 400 -
INFO vaishnavi 2020-07-10 15:37:08,621 - Requested for optimal value of K using Silhouette.
DEBUG vaishnavi 2020-07-10 15:37:08,621 - Reading datafile..
DEBUG vaishnavi 2020-07-10 15:37:08,622 - Calculating tf-idf
DEBUG vaishnavi 2020-07-10 15:37:08,665 - Calculating variance threshold
DEBUG vaishnavi 2020-07-10 15:37:08,673 - Applying PCA
ERROR vaishnavi 2020-07-10 15:37:08,691 - Exception occurred: IndexError('list index out of range')
Traceback (most recent call last):
  File "C:\Users\Personnal\Documents\FinIQ\NLP_Project\Another\API\pre-processing-and-API\api.py", line 831, in post
    jsonk = ex.read_json(ex.get_recent_file('elbow_k_' + args['uname']))
  File "C:\Users\Personnal\Documents\FinIQ\NLP_Project\Another\API\pre-processing-and-API\extract.py", line 290, in get_recent_file
    return names[0]
IndexError: list index out of range
INFO werkzeug 2020-07-10 15:37:08,693 - 127.0.0.1 - - [10/Jul/2020 15:37:08] "[31m[1mPOST /silhouette?uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 400 -
INFO vaishnavi 2020-07-10 15:37:08,703 - Requested to get optimal k value
DEBUG vaishnavi 2020-07-10 15:37:08,703 - Reading datafile for optimal k value after silhouette
ERROR vaishnavi 2020-07-10 15:37:08,703 - Error in reading datafile
Traceback (most recent call last):
  File "C:\Users\Personnal\Documents\FinIQ\NLP_Project\Another\API\pre-processing-and-API\api.py", line 884, in get
    data = ex.get_recent_file('optimal_k_' + args['uname'])
  File "C:\Users\Personnal\Documents\FinIQ\NLP_Project\Another\API\pre-processing-and-API\extract.py", line 290, in get_recent_file
    return names[0]
IndexError: list index out of range
INFO werkzeug 2020-07-10 15:37:08,705 - 127.0.0.1 - - [10/Jul/2020 15:37:08] "[31m[1mGET /silhouette?uname=vaishnavi&fname=ISINS_v3.xlsx HTTP/1.1[0m" 400 -
